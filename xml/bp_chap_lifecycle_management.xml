<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp.lifecycle">


    <title>Advanced Patch Lifecycle Management</title>

    <sect1 xml:id="bp.chapt.life.management.covered">
        <title>Whats Covered Here?</title>

        <para>This chapter describes how to setup and configure a &susemgr; testing implementation
            to enable companies in the delivery of these often requested features: <itemizedlist>
                <listitem>
                    <para>Automatic creation and archive of patch sets by quarter (or any other time
                        period)</para>
                </listitem>
                <listitem>
                    <para>Consistent method of patch promotion and delivery through numerous
                        landscapes and environments</para>
                </listitem>
                <listitem>
                    <para>Exception process for handling patches that need to be excluded from a
                        patch cycle</para>
                </listitem>
                <listitem>
                    <para>Environment creation with historical patch sets</para>
                </listitem>
                <listitem>
                    <para>Minimal need for host channel subscription manipulation from
                        cradle-to-grave</para>
                </listitem>
                <listitem>
                    <para>Support for service-pack migration using custom child channels</para>
                </listitem>
                <listitem>
                    <para>Provides a foundation for using multiple organizations to maintain
                        systems.</para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.assumptions">
        <title>Assumptions</title>
        <para>This guide covers &susemgr; &productnumber3;. A fresh installation is not required but
            some assumptions are made. You have a working &susemgr; environment, with a few
            registered clients, and a decent knowledge of &susemgr; terms and capabilities. If you
            are unfamiliar with these terms or do not have a current working setup, see the: <link
                linkend="quickstart.chapt.overview.requirements"/></para>
        <note>
            <title>spacecmd and XMLRPC Examples</title>
            <para>Using advanced features such as <systemitem>spacecmd</systemitem> or
                    <systemitem>XMLRPC</systemitem> API will be explained in some detail, but will
                not be exhaustive. Code examples will be included at the end of this chapter which
                may be modified or used as-is. These come with no <emphasis>WARRANTY</emphasis> and
                should not be expected to run with every implementation. <emphasis>Always</emphasis>
                test before running any examples in production.</para>
        </note>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.patch.life.mgr.overview">
        <title>Patch Lifecycle Management Overview</title>
        <para>Keeping systems patched and secure remains one of the greatest ongoing challenges
            which you will face as an administrator. Both proprietary and open-source companies are
            constantly working to provide updates which fix flaws discovered within their software
            products.</para>

        <para>Adding to these pressures are requirements imposed by compliance initiatives such as: <itemizedlist>
                <listitem>
                    <para>PCI-DSS (Payment Card Industry Data Security Standard)</para>
                </listitem>
                <listitem>
                    <para>SOX (Sarbanes-Oxley)</para>
                </listitem>
                <listitem>
                    <para>HIPAA (Health Insurance Portability and Accountability Act)</para>
                </listitem>
                <listitem>
                    <para>FIPS 140 (Federal Information Processing Standard)</para>
                </listitem>
            </itemizedlist>Included in most of these standards are rules which dictate frequency and
            time frames required for patching and often these schedules are modified due to the
            severity level of a specific patch.</para>

        <para>Businesses depend upon a changing landscape of applications covering a wide range of
            compute infrastructure. These may include physical and virtual hosts and have
            complicated application stacks. </para>
        <para>These applications may require the following: <itemizedlist>
                <listitem>
                    <para>A specific kernel version</para>
                </listitem>
                <listitem>
                    <para>Strict uptime requirements</para>
                </listitem>
                <listitem>
                    <para>Specific run-time environments, (like Java)</para>
                </listitem>
                <listitem>
                    <para>Specific Linux OS release</para>
                </listitem>
                <listitem>
                    <para>Specific configuration requirements</para>
                </listitem>
                <listitem>
                    <para>Hardening and platform requirements</para>
                </listitem>
                <listitem>
                    <para>Specific software versions</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Additionally, many companies have created duplicate host environments such as: <itemizedlist>
                <listitem>
                    <para>Production (PROD)</para>
                </listitem>
                <listitem>
                    <para>Development (DEV)</para>
                </listitem>
                <listitem>
                    <para>Quality Assurance (QA)</para>
                </listitem>
                <listitem>
                    <para>User-acceptance/Testing (UAT)</para>
                </listitem>
            </itemizedlist> These landscapes mirror production environments and allow for testing or
            validation of applied changes to a system or set of systems. This means that you are
            required to manage, patch and report on at least one more complete set of hosts. </para>

        <sect2 xml:id="bp.chapt.sect2.important.terminology">
            <title>Important Terminology</title>
            <para>The following paragraphs provide an explanation of important terms used throughout
                this chapter.</para>
            <formalpara>
                <title>Landscape</title>
                <para>Describes one of several groups of Linux hosts. This is commonly used with
                    enterprise software deployments as a way to define the role/quality of a host.
                    Examples include, production (PROD), development (DEV), quality-assurance (QA),
                    user-acceptance/testing (UAT), etc.</para>
            </formalpara>
            <formalpara>
                <title>Environment</title>
                <para>Defined as a physical separation of Linux hosts, like Corporate (CORP), or
                    Store (STORE), or NPE (Non-production Environment).</para>
            </formalpara>
            <formalpara>
                <title>Organizations</title>
                <para>Defined as a separate management environment placed under the default
                    organization which is created during initial installation of a SUSE Manager
                    Server. Organizations in SUSE Manager will typically have separate credentials
                    required to administer them via the WebUI and any Linux hosts managed by SUSE
                    Manager will be registered to a single organization and only visible to this
                    organization.</para>
            </formalpara>
        </sect2>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.example.scenario">
        <title>Example Scenario</title>
        <formalpara>
            <title>The Chameleon Corporation</title>
            <para>The world’s largest reptile and amphibian pet store whose headquarters are located
                in Yemen. This corporation has more than 1500 stores operating under the names
                    <emphasis>LizardsRUs</emphasis>, <emphasis>UnVeiledInc</emphasis> and
                    <emphasis>Chameleo-rama</emphasis> in five different countries. Due to
                compliance constraints, their patch lifecycle (both timing and delivery) is based on
                their corporate security policies, host environments, landscapes, and future
                management needs. The Chameleon Corporation must maintain the following requirements
                for managing patch and security updates to their Linux hosts:<itemizedlist>
                    <title>Requirement Summary</title>
                    <listitem>
                        <para>The published Security Policy states: "All Linux systems need to be
                            up-to-date with the latest available updates, bug-fixes and enhancements
                            on a quarterly basis."</para>
                        <para>Quarters are defined as: <itemizedlist>
                                <listitem>
                                    <para>Q1: January 1st through March 31st</para>
                                </listitem>
                                <listitem>
                                    <para>Q2: April 1st through June 30th</para>
                                </listitem>
                                <listitem>
                                    <para>Q3: July 1st through September 30th</para>
                                </listitem>
                                <listitem>
                                    <para>Q4: October 1st through December 31st</para>
                                </listitem>
                            </itemizedlist></para>
                    </listitem>

                    <listitem>
                        <para>The published Security Policy also states the need to patch all Linux
                            systems with “critical” security updates (CVSS score of 7 or greater)
                            within 1 month of release of the patch. This introduces a second
                            schedule that may overlap any existing patch roll-out.</para>
                    </listitem>
                    <listitem>
                        <para>The company has 3 different host environments,
                                <emphasis>Corporate</emphasis>, <emphasis>Store</emphasis> and
                                <emphasis>NPE</emphasis>.These are partitioned using SUSE Manager
                            Organizations. Each SUSE Manager Organization has visibility into the
                            default SUSE Manager Organization’s software channels due to trusts, yet
                            the managed hosts are naturally grouped and managed by their
                            environment.</para>
                    </listitem>
                    <listitem>
                        <para>There are at least 3 landscapes in each environment,
                                <emphasis>PROD</emphasis>,<emphasis>DEV</emphasis>, and
                                <emphasis>UAT</emphasis>.</para>
                    </listitem>
                    <listitem>
                        <para>A “patch exceptions" process exists, as there is often a need to
                            account for the removal of patches (e.g. kernel updates) from a
                            roll-out. Some hosts may have hardware drivers or third party software
                            which depend upon specific kernel versions. This exception process would
                            be handled on a case-by-case basis.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </formalpara>
    </sect1>
    <!-- The following section needs to be revised. It is wordy, and large amount of content difficult to read
        through. Goals: Shorten and reorganize. -->
    <sect1 xml:id="bp.chapt.life.management.implementation">
        <title>Implementation</title>
        <para>To review, you need to configure SUSE Manager, creating a set of procedures, processes
            and/or tools (scripts) to help with your patch lifecycle management. This includes the
            creation (and optimally an “automatic” creation) of patch archive channels from the SUSE
            provided “updates” channels for the versions of SLES you use. These patch archives will
            be the sources for your patch promotions, but can also be a source to setup testing
            environments based on a patch set rolled out in the past. This could be used to
            troubleshoot an error condition for example, by creating a lab full of hosts patched up
            to any previous patch set. You may also demonstrate and visualize a clear view of
            compliance defined by a time-stamped set of patches.</para>

        <para>You also will create a set of software channels which will be updated when you need to
            roll them out. Each landscape should receive these updates only from a previously
            “validated” landscape. This means a landscape patch set will first get put into DEV,
            tested, then move to QA, undergo tests and finally be moved into the PROD landscape.
            This process will begin anew each quarter, and you will handle exceptions if/when they
            occur.</para>

        <para>Every exception will be tracked by another established process with the constant goal
            of re-mediating any exception and making sure the patch is reintroduced as quickly as
            possible in order to ensure a clear view of compliance.</para>

        <para>Other interruptions to a quarterly roll-out might be the release of a “critical”
            security patch that needs to be deployed more rapidly than once-a-quarter. In order to
            handle this extra schedule, you will need to create an addition channel for any critical
            patches to track them and their roll-out. Critical patches should be considered any CVE
            that has a CVSS score of 7.1 or greater, or otherwise be mandated by your corporate
            security organization.</para>

        <para>For this implementation you will use two different SLES versions, SLES 11 SP3 and SLES
            12. You will plan to use SUSE Manager to assist with your service pack migrations, so
            setting up to account for SLES 11 SP4 initially would be ideal. We also maintain both
            32-bit and 64-bit Intel/AMD architecture versions of SLES 11 SP3 so we will need to
            account for both of them.</para>

        <para>There are 2 different environments we need to manage, Corporate (CORP) and Store
            (STORE). We have created separate SUSE Manager Organizations to allow our systems
            administrators an exclusive view of the hosts they are responsible for. Each SUSE
            Manager Organization has the 3 landscapes (DEV, QA and PROD) that they use for patch
            testing/promotion.</para>

        <para>Activation keys and bootstraps should be created for each SUSE Manager Organization
            (each environment) and each landscape so that hosts can be registered into their
            appropriate, and most likely, permanent role. For example, a bootstrap script will
            register a SLES 11 SP3 (64bit) DEV host into the correct organization and will add the
            appropriate base and child channels that should never have to be manipulated
            again.</para>

        <para>Automation is preferred. As mentioned, the use of scripts or scheduled jobs would
            greatly enhance this solution and make it easier for support staff.</para>
    </sect1>
    <sect1 xml:id="bp.chapt.life.management.base.channel.arch">
        <title>Base Channels and Architecture</title>

        <para>This represents a high-level outline of the architecture and channels:</para>

        <note>
            <title>Tip: Base Channel Naming</title>
            <para>Any Base channel listed can also be a clone tree of the SUSE vendor channels
                therefore should include a prefix in the name. This can aid the handling of service
                pack migrations described during channel creation. See:
                <!-- <link
                        linkend="">Channel Creation</link> -->.</para>
        </note>

        <para>
            <itemizedlist>
                <listitem>
                    <para>SUSE Manager Organization <itemizedlist>
                            <listitem>
                                <para>Default(Main) - 1 <itemizedlist>
                                        <listitem>
                                            <para>32 Bit Archive Channels (Public) <itemizedlist>
                                                  <listitem>
                                                  <para>Q2 - 06-30-2016 - SLES 11 SP3 Updates for
                                                  i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Q3 - 09-30-2016 - SLES 11 SP3 Updates for
                                                  I586</para>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <para>64 Bit Archive Channels(Public) <itemizedlist>
                                                  <listitem>
                                                  <para>Q2 - 06-30-2016 - SLES 11 SP3 Updates for
                                                  x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Q3 - 09-30-2016 - SLES 11 SP3 Updates for
                                                  x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Q2 - 06-30-2016 - SLES 12 Updates for
                                                  x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Q3 - 09-30-2016 - SLES 12 Updates for
                                                  x86_64</para>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <para>Clone Sets or Child Channels within SUSE Base
                                                Channels:</para>
                                        </listitem>
                                        <listitem>
                                            <para>Base : SLES 11 SP3 Pool for i586 <itemizedlist>
                                                  <listitem>
                                                  <para>DEV - Current Patch Set - SLES 11 SP3
                                                  Updates for i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>QA - Current Patch Set - SLES 11 SP3 Updates
                                                  for i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>PROD - Current Patch Set - SLES 11 SP3
                                                  Updates for i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Patch Exceptions (DO NOT SUBSCRIBE) - SLES
                                                  11 SP3 i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Security ASAP Exceptions - SLES 11 SP3
                                                  i586</para>
                                                  </listitem>

                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <para>Base : SLES 11 SP3 Pool for x86_64 <itemizedlist>
                                                  <listitem>
                                                  <para>DEV - Current Patch Set - SLES 11 SP3
                                                  Updates for x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>QA - Current Patch Set - SLES 11 SP3 Updates
                                                  for x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>PROD - Current Patch Set - SLES 12 Updates
                                                  for x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Patch Exceptions (DO NOT SUBSCRIBE) - SLES
                                                  12 x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Security ASAP Exceptions - SLES 12
                                                  x86_64</para>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <para>Base : SLES 12 Pool for x86_64<itemizedlist>
                                                  <listitem>
                                                  <para>DEV - Current Patch Set - SLES 12 Updates
                                                  for x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>QA - Current Patch Set - SLES 12 Updates for
                                                  x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>PROD - Current Patch Set - SLES 12 Updates
                                                  for x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Patch Exceptions (DO NOT SUBSCRIBE) - SLES
                                                  12 x86_64</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Security ASAP Exceptions - SLES 12
                                                  x86_64</para>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <para>Patch Exceptions Channels (as above)<itemizedlist>
                                                  <listitem>
                                                  <para>Per Base Channel - 1 channel for each
                                                  “Updates” channel:<itemizedlist>
                                                  <listitem>
                                                  <para>Examples:<itemizedlist>
                                                  <listitem>
                                                  <para>Patch Exceptions (DO NOT SUBSCRIBE) - SLES
                                                  11 SP3 i586</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>Security ASAP Exceptions - SLES 11 SP3
                                                  i586</para>
                                                  </listitem>
                                                  </itemizedlist></para>
                                                  </listitem>
                                                  </itemizedlist></para>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                            <listitem>
                                <para>Corporate (CORP) - 2<itemizedlist>
                                        <listitem>
                                            <para>Any public channel will be visible here</para>
                                        </listitem>
                                        <listitem>
                                            <para>Private channels can be shared
                                                per-organization</para>
                                        </listitem>
                                    </itemizedlist></para>
                            </listitem>
                            <listitem>
                                <para>Store (STORE) - 3<itemizedlist>
                                        <listitem>
                                            <para>Any public channel will be visible here</para>
                                        </listitem>
                                        <listitem>
                                            <para>Private channels can be shared
                                                per-organization</para>
                                        </listitem>
                                    </itemizedlist></para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.automation.process.design">
        <title>Automation and Process Design</title>
        <para>Automation will include automatic channel clone creation for the Archive channels. To
            best suit a particular company’s use-cases and product usage, a combination of scripts
            (cron and bash) and a configuration file will be used. The archive creation will be
            triggered by a custom cron job as follows. Criteria for dates will determine the exact
            setup. For example, a quarterly schedule could be implemented based on the first or last
            day of a given quarter. If the trigger time is the END of a quarter, it would have to
            consider day 30 on the 3 rd and 9 th months of a calendar (March and September), and day
            31 on the 6 th and 12 th months (June and December). This will require 2 crontab entries
            such as (cron syntax):<itemizedlist>
                <listitem>
                    <para><screen language="bash">0 0 30 6,9 * /path/to/archive-create-script</screen></para>
                </listitem>
                <listitem>
                    <para><screen language="bash">0 0 31 3,12 * /path/to/archive-create-script</screen></para>
                </listitem>
                <listitem>
                    <para>If the trigger for the quarter is going to happen on the 1 st of a month,
                        then only one crontab entry would be required, for
                        example:<screen language="bash">0 0 1 1,4,7,10 * /path/to/archive-create-script</screen></para>
                </listitem>
            </itemizedlist></para>
        <para>The actual “archive-create-script” will also need logic in it to determine the quarter
            it was run and formatting logic to provide the correct syntax for SUSE Manager channel
            cloning, etc. The script should also loop through each architecture and SLES version in
            order to make a full set of archives based on the company’s choices.</para>

        <para>Processes for patch promotion will be created so that administrators can precisely and
            explicitly define when a patch set is moved INTO a given landscape, and just as
            importantly - from WHERE. The easiest method to do this is using a script that leverages
            the XMLRPC API exposed in SUSE Manager. The API contains a softwareChannel method called
            mergePackages and mergeErrata. These two methods can be called with a source channel and
            target channel to quickly take content from one channel and merge the differences into
            another.</para>

        <para>The last process will define a workflow for removing a patch from the promotion
            process - and making sure it is stored to be tracked. These patch exceptions can later
            be reintroduced to a patch rollout calendar as the reason for the exception is
            remediated. In addition to the exception process of REMOVING a patch, there is a similar
            process for ADDING a patch as an emergency dictates.</para>

        <para>Emergency patches will likely always be available in the current SUSE Updates
            channels, but might not have been introduced into an Archive channel yet. As the
            quarterly archive channel creation job is triggered, any available patches would be part
            of an archive set - but for a given point in time, this might have occurred before the
            patch was released - or it may be up to 3 months until a new archive is created that
            contains this recent patch. A method for searching and then copying a patch into a
            target channel will need to be created. This will handle those times when a critical
            patch is released by SUSE but your archive channel won’t get a copy until the quarter is
            up.</para>

        <para>Copying these emergency patches into place doesn’t affect the normal deployments or
            creation of archive channels. The next archive channel creation will also contain this
            patch, and the use of an emergency patch channel with a duplicate patch (in the case of
            merging the same patch later) will not cause any conflicts with a system that already
            has installed it.</para>

        <para>For more information see also: <xref linkend="bp.chap.life.management.except.escalation"
                /></para>

    </sect1>

    <sect1 xml:id="bp.chapt.life.management.patch.promo.cycle">
        <title>Patch Promotion Cycle</title>
        <para>Understanding how patches (and the packages they include) are obtained from SUSE,
            where they go after download, and how they are arranged within SUSE Manager is key to
            setting up the Advanced Patch Lifecycle system. By default, SUSE Manager arranges its
            channel sets by a particular version and architecture of SUSE Linux Enterprise Server
            and its add-ons or extensions.</para>

        <para>For example, a base set of channels within SUSE Manager for SLES 11 SP3 x86_64
            includes the parent or base channel called a “pool” channel. This channel contains
            packages that are the functional equivalent of the installation DVD for SLES 11 SP3
            64-bit. Under this pool channel are all of the “child” channels which include a channel
            for the SUSE Manager Client packages, called SUSE Manager Tools channel, and an updates
            channel called in this case, SLES 11 SP3 Updates for x86_64.</para>

        <para>A normal set of channels that a managed host subscribes to will include at least a
            parent channel (pool), a SUSE Manager Tools channel, and an Updates channel. In some
            cases like SLES 11 SP2 - this will include the SLES 11 SP1 Pool, the SP1 Updates
            channel, the SP2 Core channel, SP2 Updates, SP2 Extension Store and the SP2 SUSE Manager
            Tools channel.</para>

        <note>
            <title>Long Term Service Pack Support (LTSS)</title>
            <para>Due to SP1 and SP2 both being in their LTSS (Long Term Service and Support) phase,
                there are no longer any non-LTSS updates being created from SUSE. This means that
                any SP1 or SP2 hosts a company might have will need to purchase LTSS and use LTSS
                Updates channels in order to receive further patches and support. For more
                information see: <link xlink:href="www.suse.com/lifecycle"/></para>
        </note>

        <figure>
            <title>Patch Promotion Process</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="patch-promo.png" width="80%"/>
                </imageobject>
            </mediaobject>
        </figure>
    </sect1>

    <sect1 xml:id="bp.chap.life.management.except.escalation">
        <title>Exception and Escalation Channels</title>
        <para>There might be several reasons to delay or remove a patch from a deployment cycle. A
            patch could be causing issues with the stability of a system or systems, it might not
            have passed a testing cycle from the current or previous landscape, or there could be
            some other reason not to deploy it within a patch cycle.</para>

        <para>On the other hand, there might be a reason to deploy a critical patch (one that
            patches a security vulnerability or a debilitating bug) ahead of schedule. Due to the
            critical nature of the patch it needs to go through testing and deployment as fast as
            possible - without waiting for the next quarterly patch cycle.</para>

        <para>In order to handle the periodic removal or addition of these exception patches,
            processes should be created to track them appropriately. While these exceptions are
            being tracked, they will be copied into their own channel containers for safe-keeping,
            accounting and reporting.</para>

        <para>These channels can be created within the Archive base channel or within the cloned
            base channel for the version of SLES that corresponds to the patch exception
            (recommended).</para>

        <para>The process for excluding a patch will be to first copy the patch (and associated
            packages) into the Exception Channel, and then to remove the patch (and associated
            packages) from the current deployment landscape. Optionally it can be removed from the
            current quarter’s archive channel but it is important to realize that the patch will be
            included in the following quarter’s archive as well. It might be tempting to remove it
            from the SUSE Updates channel, but this can often lead to a mishandling or misreporting
            of compliance. It is much better to track and resolve the reasons for the exception in
            the first place. This way, the patch can be reintroduced to the patch deployment
            workflow and remediate any potential security issues or code flaws that the patch was
            created to fix.</para>

        <formalpara>
            <title>Security Escalation Channel and Process</title>
            <para> The process for adding a security patch is similar to the process of excluding
                one. The key difference is that the patch needs to be copied into the Security
                Exception Channel from either the SUSE Updates channel or the latest archive if it
                has been created but not used for a promotion cycle yet. Assuming that this new
                critical security patch has been released in the middle of a rollout phase (you have
                already been promoting the current quarter’s patches and this new one comes out), it
                is likely that this new patch has not yet appeared in an archive.</para>
        </formalpara>

        <para>Another assumption is the need to test this new patch by promoting it through the
            landscapes as any normal patch set, but if necessary it can be copied directly to any
            stage. Simply copy this security patch into the initial landscape (e.g. DEV - Current)
            and follow the normal deploy-test-promote cycles to get it into production. Depending on
            the critical nature of the patch, the normal schedule for testing could be accelerated
            or in rare cases bypassed altogether assuming acceptable risk.</para>

    </sect1>

    <sect1 xml:id="bp.chapt.life.management.components.to.be.created">
        <title>Components to be Created</title>
        <para>The following list provides an overview on what you will be creating to enable
            Advanced Patch Lifecycle Management:<itemizedlist>
                <title>Channels</title>
                <listitem>
                    <para>Archive channels</para>
                </listitem>
                <listitem>
                    <para>Current updates channels</para>
                </listitem>
                <listitem>
                    <para>Exception channels (patch exclusions or security-ASAP)</para>
                </listitem>
                <listitem>
                    <para>Optional SP-Migration clone set</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Activation keys and bootstrap scripts</title>
                <listitem>
                    <para>Per-Organization, Per-SLES version activation keys</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Scripts</title>
                <listitem>
                    <para>Archive creation script</para>
                </listitem>
                <listitem>
                    <para>Archive sources list control file</para>
                </listitem>
                <listitem>
                    <para>Merge Tool python script</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Crontab Entries and Automation</title>
                <listitem>
                    <para>Quarterly (or any other frequency) archive creation call</para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.channels">
        <title>Channels</title>
        <para>Several custom channels will be created to support the patch promotion process. These
            channels will store the archives (created as clones of the SUSE Updates channels) and
            they will also store exception patches. For each landscape a custom channel will be
            created to hold patches which have been promoted. These channels will grow in size over
            time as patches are promoted each cycle.</para>

        <para>Each new patch cycle updates the available patches in a given landscape’s “current
            updates” channel. In this way each subsequent patch promotion adds the new updates and
            these can be applied to any hosts subscribed to the channel.</para>

        <para>The exception channels will be populated by managing individual patches, copying them
            from one of the landscape updates channels or from one of the archive channels. Once a
            patch is copied successfully into an exception channel, it can be removed from an
            updates channel or an archive.</para>

        <sect2 xml:id="bp.chapt.sect2.creating.archive.channels">
            <title>Creating Archive Channels</title>
            <para>Custom channels are created in SUSE Manager as “new”, blank and empty channels, or
                “clones”. Technically, cloned channels can also be created as empty, but in this
                case we will create the archive channels with content sourced from the SUSE Updates
                channel, the patches and the packages they reference.</para>

            <para>Each archive channel will reside within an empty base channel. Base channels will
                be created for each processor architecture managed by SUSE Manager, for example: <itemizedlist>
                    <listitem>
                        <para>IA-32</para>
                    </listitem>
                    <listitem>
                        <para>x86_64</para>
                    </listitem>
                    <listitem>
                        <para>s390x</para>
                    </listitem>
                    <listitem>
                        <para>PPC</para>
                    </listitem>
                </itemizedlist> Multiple archives matching the different versions of SLES may exist
                in the base channel, but they will all be of the same processor architecture.</para>

            <important>
                <title>Channel Naming</title>
                <para>Failing to label the following channels appropriately will cause the example
                    archive script to fail unless modified.</para>
            </important>
            <note>
                <title>Note on Base/Parent Channels</title>
                <para>The archive channels you are creating have <emphasis>no parent</emphasis>
                    because they <emphasis>are</emphasis> parent/base channels.</para>
            </note>
            <procedure>
                <title>Create the Base Archive Channels</title>
                <step>
                    <para>For each processor architecture used by hosts which are managed by SUSE
                        Manager, create empty channels named: <replaceable>32 Bit Archives
                            Channel</replaceable> and <replaceable>64 Bit Archives
                            Channel</replaceable></para>
                </step>
                <step>
                    <para>In the Web UI click <menuchoice>
                            <guimenu>Channels</guimenu>
                            <guimenu>Manage Software Channels</guimenu>
                        </menuchoice> then click the <guibutton>+ Create Channel</guibutton>
                        button.</para>
                </step>
                <step>
                    <para>The channel label <emphasis>must be</emphasis> in the format of
                            <replaceable>architecture-patch-archives-channel</replaceable>, for
                        example the 64-bit channel label should be:
                        <screen language="bash">x86_64-patch-archives-channel</screen></para>
                </step>
                <step>
                    <para>Select the appropriate architecture for this channel - x86_64 for 64-bit,
                        and IA-32 for 32-bit, etc.</para>
                </step>
                <step>
                    <para>Under the <systemitem>Channel Access Control</systemitem> heading select
                        the radio button with the description: <emphasis>This channel is
                                <command>public</command> and may be accessed by any of the
                                <systemitem>trusted organizations</systemitem> trusted by this
                            organization.</emphasis>
                    </para>
                </step>
                <step>
                    <para>Repeat this procedure for each architecture type of SLES you need
                        deployed</para>
                </step>
            </procedure>
            <para>The following procedure will guide you through creating clone channels for each
                version of &sle; being used.</para>
            <procedure>
                <title>Creating the Cloned Archived Channels</title>
                <step>
                    <para>From the WebUI click <menuchoice>
                            <guimenu>Channels</guimenu>
                            <guimenu>Manage Software Channels</guimenu>
                        </menuchoice> then click the <guibutton>Clone Channel</guibutton> button.
                    </para>
                </step>
                <step>
                    <para>Select the SUSE vendor channel of the SLES version you need to create and
                        use for your update archive source.</para>
                </step>
                <step>
                    <para>Select the radio button for all content/patches</para>
                </step>
                <step>
                    <para>Name the channel appropriately with an indication of Time/Date and what
                        the archive contains e.g. <replaceable>Q3 - 09-30-2015 - Archive of SLES 11
                            SP3 for x86_64</replaceable>
                    </para>
                </step>
                <step>
                    <para>Create a label using proper syntax - e.g.
                        “q3-09-30-2015-archive-sles11sp3-x86_64”</para>
                </step>
                <step>
                    <para>Include an appropriate description of the channel in the Summary and
                        Description fields</para>
                </step>
                <step>
                    <para>Click the <guibutton>Create Channel</guibutton> button when
                        finished</para>
                </step>
                <step>
                    <para>Scroll down and select the Public radio button and then click the
                            <guibutton>Update Channel</guibutton> button.</para>
                </step>
            </procedure>
            <para>Repeat this process for each version of SLES within architecture.</para>
            <note>
                <title>spacewalk-clone-by-date</title>
                <para>You can Use spacewalk-clone-by-date to create archive channels from the past.
                    See: <!-- ADD LINK HERE -->for an example source file that can be used with the
                    spacewalk-clone-by-date utility. This configuration file can be used to create a
                    clone channel with a certain date range as a filter for the content in the channel:<itemizedlist>
                        <listitem>
                            <para>The utility is called with the following syntax:
                                spacewalk-clone-by-date -c &lt;config file&gt;</para>
                        </listitem>
                        <listitem>
                            <para>Repeat for each archive channel with a past date modifying the
                                configuration files to match the appropriate dates and channel
                                source/target names.</para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.service.pack.migration.support.update.exception.channels">
            <title>Service Pack Migration Support with Update and Exception Channels</title>
            <para>There are a couple of generally accepted methods to managing a set of channels
                that allows consistent and expected behaviors when leveraging the SP Migration
                feature. You can find this feature in the Software tab of a particular host - it
                allows you to update the service pack of a particular host in a one-click
                fashion.</para>
            <para>When using the patch lifecycle methods described in this document, some challenges
                arise when using the SP Migration feature. When you select a given host to do an SP
                Migration, the UI proposes (dictates) a set of mandatory “child” channels that will
                be subscribed to for a migration action. These mandatory child channels (greyed-out
                in the UI) will normally include the SUSE provided Updates channel for a given SLES
                version. See the following image</para>
            <figure>
                <title>Service Pack Migration Support with Update and Exception Channels</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="spmigration-channels.png" width="80%"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>In order to allow usage of the patch lifecycle processes described here AND to use
                the functionality of SP Migrations, it is best to create a full clone-set of the
                &sle; product versions in use at your company. This is sometimes called a
                clone-tree, and can be easily created using the spacecmd command,
                    <command>softwarechannel_clonetree</command>.</para>
            <para>A full clonetree will include the base/parent channel (normally called a pool) and
                all child channels that currently exist beneath it. For example, using the
                    <replaceable>SLES 11 SP3 Pool x86_64</replaceable> channel as a source, you
                provide your own prefix to the <command>clonetree</command> command and it will make
                a copy of the pool and all children adding the prefix to the beginning of all the
                channel names and labels.</para>
            <para>The following figure provides an example of the &sle; 11 SP3 x86_64 channels and
                the cloned tree with prefix <replaceable>Chameleon_Co</replaceable>.</para>
            <figure>
                <title>Example Chameleon_CO Channels</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="chameleon_co.png" width="80%"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The command spacecmd softwarechannel_clonetree can be called directly by providing
                the source and prefix information directly or interactively by calling the command
                from within the spacecmd shell itself:</para>
            <screen language="bash">spacecmd -u SMadmin -- softwarechannel_clonetree sles11-sp3-pool-x86_64 -p “my_company-“</screen>
            <para>This will create a set of SLES 11 SP3 x86_64 channels with a prefix
                (my_company).</para>

            <para>Repeat this process for each SLES version and then when using the Service Pack
                migration feature you may select your company version of the target SLES version and
                choose the child channels appropriate for the landscape the host is in (described
                below).</para>

            <para>You can then modify the cloned Updates channel by removing all patches/packages -
                then use the merge script process to merge your “Current Patch Set” into the
                mandatory updates channel. This way you are able to do Service Pack Migrations and
                still retain your currently promoted patch set. Otherwise, SP Migrations will always
                update to whatever is the latest packages in the “mandatory” Updates child
                channel.</para>

            <para>Consider the following Image that shows the Q3 Patch Archive for SLES 11 SP4 with
                227 packages, the SUSE Updates channel for SP4 with 234 packages, and the
                Chameleon_Co version of SP4 Updates with 0 (zero) packages:</para>
            <figure>
                <title>Patch Archive and Update Channels</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="patch-channels.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>In the following sections we will describe the creation of custom
                    <emphasis>Current Updates</emphasis> channels and how to use a Merge script
                (also detailed below). For SP migrations using your own set of promoted patches, you
                would merge a <emphasis>Current</emphasis> Patch Archive from a
                    <emphasis>Production</emphasis> channel into the <emphasis>Updates</emphasis>
                channel so it will be used for migration efforts or simply leave the Updates channel
                permanantly <emphasis>empty</emphasis> and add your Current Updates channel to the
                    <emphasis>Optional Child Channels</emphasis> selection.</para>

            <para>With an empty Updates channel and a populated “Current Updates”, you can be
                assured of an SP Migration working as expected and not patching the machine to a
                version of packages more current than whatever is deemed “production.” The custom
                “updates” channels and the merge script process will be described in detail in the
                following sections.</para>

        </sect2>

        <sect2 xml:id="bp.chapt.sect2.current.updates.channels">
            <title> Current-Updates Channels </title>
            <para>Now create the <emphasis>current updates</emphasis> channels that managed hosts
                will subscribe to depending on their landscape, for example, <emphasis>DEV - Current
                    Updates for SLES 11 SP3 x86_64</emphasis>, or <emphasis>PROD - Current Updates -
                    for SLES 12 x86_64</emphasis>. There will be a full set of landscape channels
                for each SLES version and they will all be empty to begin with so we will create a
                “new” and then optionally “clone” that one to reduce the amount of typing
                needed:</para>


            <procedure>
                <title>Creating the Current Updates Channels</title>
                <step>
                    <para>From the <menuchoice>
                            <guimenu>Channels</guimenu>
                            <guimenu>Manage Software Channels</guimenu>
                        </menuchoice> click <emphasis><guibutton>+Create
                            Channel</guibutton></emphasis>.</para>
                </step>
                <step>
                    <para>Create the channel within one of the SLES Pool Channels or within your own
                        clone set pool.</para>
                </step>
                <step>
                    <para>Modify the channel to be Public.</para>
                </step>
                <step>
                    <para>Clone this new channel (without updates) into the remaining Landscapes.
                        Each channel as a <emphasis>Current Updates</emphasis> channel, and each
                        with the appropriate landscape prefix (e.g. <emphasis>DEV</emphasis>,
                            <emphasis>TEST</emphasis>, <emphasis>PROD</emphasis> , etc.)</para>
                </step>
            </procedure>

            <figure>
                <title>Updates Channels</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="updates-channels.png"/>
                    </imageobject>
                </mediaobject>
            </figure>


            <para>This procedure guided you through creating a full set of landscapes for each SLES
                version to be managed. Keep in mind for the SLES 11 SP1 and SP2 channels this will
                result in a full set 2x or even 4x with LTSS. However, SP1 and SP2 Update channels
                are no longer updated so these could be subscribed as static channels.</para>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.exception.channels">
            <title>Exception Channels</title>
            <para>Now create the 2 exception channels for each SLES version being managed. While it
                may be possible to create a mixed channel that is unique to architecture (like the
                archive channel base), tracking which distribution a patch exception has come from
                can get cumbersome. If you mix patches/packages from different versions of SLES, it
                is more difficult to track, resolve and then reintroduce these patches back into the
                patch workflow. It is much easier to place them into an exceptions channel
                specifically for the version of SLES the patch came from. Create the <emphasis>Patch
                    Exception</emphasis> and <emphasis>Security ASAP Exception</emphasis> channels
                as follows: <note>
                    <title>Exceptions Channel Subscription</title>
                    <para>It is recommended to add the text <emphasis>DO NOT SUBSCRIBE</emphasis> to
                        the Patch Exceptions Channel Name field during creation. Keep in mind that
                        this channel is used only as a bucket to track patches/packages that will
                        not be installed on a system. If systems subscribe to this channel they will
                        see available content and therefore potentially apply it during a patch
                        installation. The <emphasis>DO NOT SUBSCRIBE</emphasis> text acts as a
                        visual reminder when creating activation keys or manipulating a hosts
                        channel subscriptions preventing you from adding it to a hosts active
                        channels.</para>
                </note>
            </para>
            <procedure>
                <title>Creating Exception Channels</title>
                <step>
                    <para>From the <menuchoice>
                            <guimenu>Channels</guimenu>
                            <guimenu>Manage Software Channels</guimenu>
                        </menuchoice> click <emphasis><guibutton>+Create
                            Channel</guibutton></emphasis>.</para>
                </step>
                <step>
                    <para>Create the “Patch Exceptions - DO NOT SUBSCRIBE” channel within one of the
                        SLES Pool Channels or if you have your own clone set within that pool. This
                        channel will reside next to your Landscape channels.</para>
                </step>
                <step>
                    <para>Modify the channel to be Public.</para>
                </step>
                <step>
                    <para>Create the Security ASAP Exception channel as above - it too will reside
                        next to your Landscape and Patch Exceptions channels.</para>
                </step>
            </procedure>
            <para>Keep in mind for SLES 11 SP1 and SP2 - they reside in the same SP1 Pool base
                channel, so there will be Exceptions and Security Exceptions Channels for each
                Service Pack.</para>
            <figure>
                <title>Exception channels</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="exception-channels.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect2>
    </sect1>

    <sect1 xml:id="bp.chapt.life.management.act.keys.bootstrap">
        <title>Activation Keys and Bootstrapping</title>
        <para>Normally you should create a set of Activation Keys each assigned to a specific
            version of SLES that your hosts are installed with. There may be other characteristics
            assigned in your keys like System Groups, assorted Child Channels, Software Packages,
            etc. You may also choose to modify your existing Activation Keys and reuse them, or you
            can create new keys for this implementation. This example assumes a new key.</para>

        <procedure>
            <title>Activation Key Setup</title>
            <step>
                <para>From the <menuchoice>
                        <guimenu>Systems</guimenu>
                        <guimenu>Activation Keys</guimenu>
                    </menuchoice> click <emphasis><guibutton>+Create
                    Key</guibutton></emphasis>.</para>
            </step>
            <step>
                <para>Create the Activation Key within this Organization (remember to log into other
                    Organizations to create keys there if needed). Assign the appropriate
                    Entitlements and Software Packages and Configuration Channels as
                    appropriate.</para>
            </step>
            <step>
                <para>Name the Activation Key according to the Landscape host will register to with
                    this key. For example: <figure>
                        <title>Create Activation Key</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="activation-key-setup.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure></para>
            </step>
            <step>
                <para> Click on the Child Channels Tab and assign the appropriate Current Updates
                    channel to the Landscape this key will be used for: <figure>
                        <title>Landscape Key</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="landscape-key.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </para>
            </step>
            <step>
                <para>Select the appropriate SUSE Manager Tools channel as well as the other needed
                    channels to fill out the requirements for the version of SLES in
                    question.</para>
            </step>

        </procedure>
        <note>
            <title>Security ASAP Exceptions</title>
            <para>The Security ASAP Exceptions channel is selected as an active child channel, and
                the Patch Exceptions (DO NOT SUBSCRIBE) channel is NOT selected. This is important
                as any patch/package copied into the Patch Exceptions channel should remain
                invisible to hosts while patches/packages copied to the Security ASAP Exceptions
                channel should always be immediately visible to a host.</para>
        </note>
        <para>The Activation Key is called by a bootstrap script, often there is a one-to-one
            relationship between a registration bootstrap script and an activation key. Whether new
            activation keys were created or existing ones were modified to point to the landscape
            specific “current updates” channels, there should be a bootstrap script that calls that
            activation key.</para>
        <para>All new hosts will use these bootstraps to register and become managed by SUSE
            Manager. One of the key benefits is that they should never need to change their channel
            assignments as the host will now be assigned to its proper landscape update channels and
            will receive new updates as they are promoted each patch cycle.</para>
    </sect1>
    <sect1 xml:id="bp.chapt.life.management.scripts">
        <title>Scripts</title>
        <sect2 xml:id="bp.chapt.sect2.patch.package.merge.script">
            <title>Patch/Package Merge Script</title>
            <para>The Patch/Package Merge Script is used to Promote patches (and relevant packages)
                from one channel to another. It is used at first to merge content from an Archive
                channel into the first stage (landscape) e.g. DEV. It is then used to promote
                content from one stage to the next until the content reaches the final stage. This
                process is then repeated for each version of SLES (like 11 SP1, SP2, etc.) and each
                corporate environment (like STORE, CORP, etc.).</para>
            <para>Finally, the entire process is repeated for each patch calendar cycle
                (quarterly/monthly/etc.).</para>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.channel.archive.creation.script.source.list.conf">
            <title>Channel Archive Creation Script / Channel Archive Sources List Config
                File</title>
            <para>This script and its associated “sources list” configuration file are called either
                manually or by a crontab entry. The script uses the sources list file to determine
                which versions of SLES and which architectures to create archives for. As previously
                described, the Archive Channels are created as point-in-time clones of the various
                SLES Updates channels.</para>

            <para>To have the correct archive channels created, add lines to the sources file. Each
                line has 3 fields, the first being the architecture, the second is the source
                channel, and the third is target channel text. The script parses the source list and
                constructs the target parent channel for the archives by architecture, and then
                constructs the target channel and label, etc.</para>

            <para>The script calls the spacecmd functions <command>softwarechannel_clone</command>
                and <command>softwarechannel_setorgaccess</command> for each entry in the sources
                list. It then calculates the current calendar quarter, creates the archives and
                makes these archives publicly visible. See the Appendix for the entire
                script.</para>
        </sect2>
    </sect1>

    <sect1 xml:id="bp.chapt.life.managmenet.crontab.entries.and.automation">
        <title>Crontab Entries and Automation</title>
        <para>A decision needs to be made whether a calendar quarter is going to be created (looking
            backwards) at the end of a particular month, or at the beginning of a month (one day
            past the final day of a quarter). Since the Archive Channels are being created by
            cloning the SUSE Updates channels of a particular SLES version, the decision can affect
            the content.</para>

        <para>Either way is fine as it will be consistent from quarter to quarter. For the purposes
            of explaining the cron syntax, we will opt to show the more difficult of the two how to
            call the archive script at the end of the quarter. This is more difficult because it
            requires two cron entries to handle both the 30th of the month (for June and September),
            and the 31st of the month (for March and December).</para>

        <para>The crontab entries will point to the archive creation script and execute in months 3,
            6, 9 and 12. Here are what the cron entries look like:</para>
        <screen language="bash">0 0 30 6,9 * /path_to/the/archive/script
0 0 31 3,12 * /path_to/the/archive/script</screen>

        <para>The path will point to the actual archive-channel-create-script.sh (or similar). This
            could be placed in <replaceable>/usr/sbin/</replaceable> and must be made executable
                <command>chmod +x</command></para>

        <para>Also it is very important to note that this script in calling spacecmd commands from
            within a bash shell script. Spacecmd is itself a python-based shell that can be invoked
            - allowing the use of an extensive set of commands within the shell, or from outside the
            shell as a mediated command interpreter.</para>

        <para>The invocation of <command>spacecmd</command> stores a
                <replaceable>.spacecmd</replaceable> directory in the users home directory. Within
            the <replaceable>.spacecmd</replaceable> directory is a config file which can store
            credential sets that can be leveraged in order to keep from being prompted at spacecmd
            execution. This can be used to store credentials so the cron job will execute and not
            pause waiting for authentication credentials to be passed.</para>

        <para>Edit the <replaceable>/root/.spacecmd/</replaceable> config file and add the
            appropriate credentials:
            <screen language="ini">[spacecmd]
server=localhost
username=admin
password=suse1234
nossl=0</screen></para>

        <para>Storing these credentials will allow spacecmd operations from the SUSE Manager’s root
            user to be executed without the need to pass a username or password allowing the cron
            job for archive creation to run without failure at the appropriate time.</para>
    </sect1>


    <sect1 xml:id="bp.chapt.lifecycle.managment.use.cases.workflows">
        <title>Use Cases and Workflows</title>
        <para>This section describes an approach to patch lifecycle management that leverages SUSE
            Manager to allow deliverance of the following benefits:</para>

        <itemizedlist>
            <listitem>
                <para>Automated creation of Patch Archive Channels<itemizedlist>
                        <listitem>
                            <para>These channels can be created on a quarterly (or more frequent)
                                basis and allows an organization to create test environments based
                                on a historical set of patches (i.e. creation of a lab using
                                available patches from 2 calendar quarters ago.)</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Leverage a static set of “current” update channels so host subscriptions don’t
                    have to change<itemizedlist>
                        <listitem>
                            <para>Using the API/scripts, updates can be merged from a patch
                                “archive” into a subscribed host channel removing the need to
                                constantly clone and re-clone channels and modify host
                                subscriptions</para>
                        </listitem>
                        <listitem>
                            <para>Multi-Landscape environments can use a promotion process to merge
                                updates through each phase during testing/validation of patch
                                sets</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Exception handling for patches that need to be excluded from a patch roll-out<itemizedlist>
                        <listitem>
                            <para>Creation of a “patch exceptions” channel and a process for copying
                                patches/packages into that channel (and then removing them from an
                                updates channel) allows for tracking of patch exception. This
                                channel should be excluded from any hosts channel subscriptions,
                                thereby keeping all patch/package content from being
                                visible/available for installation.</para>
                        </listitem>
                        <listitem>
                            <para>Patch exceptions “processes” must be developed in order to track
                                remediation of all exceptions in order to avoid future complications
                                from managing an ever-growing bucket of patches.</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Security ASAP Exceptions handling for patches that need to roll out with a
                    higher priority<itemizedlist>
                        <listitem>
                            <para>The security ASAP exception channel should always be subscribed to
                                (unlike the “patch exceptions channel). Subscription to this channel
                                allows a host to obtain patches/packages added in an ad-hoc manner,
                                for example a security patch deemed important enough to deploy
                                outside of a normal patch schedule. This could be copied from a new
                                archive or directly from one of the SUSE (vendor) updates
                                channels.</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
        </itemizedlist>

        <sect2 xml:id="bp.chapt.sect2.workflow1.patch.promo.process">
            <title>Workflow 1: Patch Promotion Process</title>
            <para>The following sections provide some example workflows for the patch promotion and
                exception processes. Keep in mind that these can be modified to fit more closely to
                a particular operational group’s existing set of processes.</para>
            <para>Review the <emphasis>Patch Promotion Process</emphasis> in the following
                table.</para>
            <figure>
                <title>Workflow 1: Patch Promotion Process</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="example-workflow1.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.workflow2.patch.exept.process">
            <title>Workflow 2: Patch Exception Process</title>
            <para>Reveiwed the <emphasis>Patch Exception Process</emphasis> in the following table.
                Again, keep in mind that these can be modified to fit more closely with your
                particular operational group’s existing set of processes.</para>

            <figure>
                <title>Workflow 2: Patch Exception Process</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="example-workflow2.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.workflow3.security.asap.except.process">
            <title>Workflow 3: Security ASAP Exceptions Process</title>
            <para>The Security exception process differs from the previous patch exception process
                in that a patch is now being added into a patch rollout cycle, likely in the middle
                of a current (in-progress) rollout. A process table is included here as well as some
                images from the SUSE Manager WebUI to provide clarity.</para>
            <figure>
                <title>Workflow 3: Security Patch ASAP Process</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="example-workflow3.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The following image provides and overview of adding a patch to the
                    <emphasis>Security ASAP Exceptions Channel</emphasis>, specifically the
                    <replaceable>SLES 11 SP1 x86_64</replaceable> version:</para>
            <figure>
                <title>Security ASAP Exceptions</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="security-asap-exceptions.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The following image provides a view of the List/Remove function of a specific
                channel (in this case, <replaceable>DEV - Current - SLES11-SP1-LTSS-Updates for
                    x86_64</replaceable> and is the interface where a patch would be removed from a
                channel to keep it from being visible and potentially deployed as part of an
                exception process.</para>
            <figure>
                <title>Patches List/Remove</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="patch-list-remove.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect2>
    </sect1>
    <sect1 xml:id="bp.chapt.life.managment.sample.scripts">
        <title>Sample Scripts</title>
        <para>This section contains scripts which will be useful for <emphasis>Advanced Patch
                Lifecycle Management</emphasis>.</para>
        <sect2 xml:id="bp.chapt.sect2.sample.spacewalk.clone.by.date.config">
            <title>Sample Spacewalk-Clone-By-Date Configuration</title>
            <para>This sample is stored as a text-file. It is used with the spacewalk-clone-by-date
                utility by using the -c flag to indicate an input config
                file:<screen language="bash">spacewalk-clone-by-date -c Q3-2015-sles11sp3-x86_64-archive.conf</screen></para>

            <para>This sample, below is using the SUSE Manager administrator account name of
                    <emphasis>SMadmin</emphasis> but can be changed to meet the requirements of your
                installation. The config file is using an end-date of 9/30/2015 and a source of the
                SLES 11 SP3 Updates for x86_64 and creating a clone inside the
                cc_patch_archives_channel_64bit base channel. The end result is a 3 Quarter patch
                archive that filters all available patches for SLES 11 SP3 64-bit, up to the date of
                9/30/2015.</para>
            <note>
                <title>Base Channel Source/Target Channel/ Directive</title>
                <para>This specifies the following:<itemizedlist>
                        <listitem>
                            <para>Base channel source:
                                    <replaceable>sles11-sp3-pool-x86_64</replaceable>
                            </para>
                        </listitem>
                        <listitem>
                            <para>The target base channel:
                                    <replaceable>cc_patch_archives_channel_64bit</replaceable>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Uses directive: <replaceable>existing-parent-do-not- modify
                                </replaceable> true</para>
                        </listitem>
                    </itemizedlist> This tells the utility that a child channel from one base will
                    be cloned into a completely different base channel. Your channel names may
                    differ therefore this example may need modifications to work in your tests.
                </para>
            </note>
            <para>The following is an example from the
                    <replaceable>Q3-2015-sles11sp3-x86_64-archive.conf</replaceable>.</para>
            <screen language="json">{
"username":"SMadmin",
"to_date": "2015-09-30",
"skip_depsolve":false,
"security_only":false,
"use_update_date":false,
"no_errata_sync":false,
"dry_run":false,
"channels":[
      {
       "sles11-sp3-pool-x86_64": {
         "label": "cc_patch_archives_channel_64bit",
          "existing-parent-do-not-modify": true
       },
       "sles11-sp3-updates-x86_64": {
          "label": "09_30_2015_q3_archive-sles11-sp3-updates-x86_64",
          "name": "Q3-2015 Patch Archive - 09-30-2015 - SLES11-SP3-Updates for x86_64",
          "summary": "Q3 - 2015 - Patch Archive Set (9-30-2015) - SUSE Linux Enterprise
Server 11 SP3 x86_64",
          "description": "Q3 - 2015 - Patch Archive Set (9-30-2015) - SUSE Linux Enterprise
  Server 11 SP3 x86_64"
       }
      }
    ]
}</screen>
            <important>
                <title>spacewalk-clone-by-date Utility Post Checks</title>
                <para>When using the <command>spacewalk-clone-by-date</command> utility please
                    review the channel patch content after creation to ensure that the channel
                    contains the patches for the appropriate end-date. Sometimes extra patches are
                    included in the channel that are in the wrong time-period and these may be
                    deleted manually.</para>
            </important>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.sample.patch.package.merge.script.python">
            <title>Sample Patch/Package Merge Script Using Python</title>
            <para>This script has a defined SUSE Manager server URL set in the “MANAGER_URL”
                variable. The script prompts for a SUSE Manager Administrator ID and password. It
                then asks for a source and target channel. The script will then confirm the channels
                and ask if it should continue. An affirmative response (Y) will then allow the
                script to merge the patches and packages from the source channel into the target
                channel.</para>
            <screen language="python">#!/usr/bin/python
import xmlrpclib
import sys
import getpass

MANAGER_URL = "https://suma01.chameleoncorp.com/rpc/api"
MANAGER_LOGIN = raw_input("Please Enter the SUSE Manager Login Name: ")
MANAGER_PASSWORD = getpass.getpass("Please Enter the Password: ")

MERGE_SOURCE = raw_input("Enter the SOURCE channel label to Merge FROM: ")
MERGE_TARGET = raw_input("Enter the TARGET channel label to Merge INTO: ")
print("This tool is going to take all packages and errata from the SOURCE")
print("Channel : " + MERGE_SOURCE)
print("and merge it into the TARGET ")
print("Channel : " + MERGE_TARGET)

def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.
    
    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits (Enter).
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).
    
    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)
    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")
query_yes_no("Is this information correct?")

client = xmlrpclib.Server(MANAGER_URL, verbose=0)
key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)

client.channel.software.mergePackages(key, MERGE_SOURCE, MERGE_TARGET)
client.channel.software.mergeErrata(key, MERGE_SOURCE, MERGE_TARGET)

client.auth.logout(key)                            </screen>
        </sect2>

        <sect2 xml:id="bp.chapt.sect2.sample.crontab.entries.automation.archive.channel">
            <title>Sample Crontab Entries for Automation and Archive Channel Creation</title>
            <para>Below are some sample cron entries that can be used to run the Archive Channel
                Creation Script resulting in channel creation for each quarter. This example has two
                entries in order to clone all patches received up until the end of a quarter. A
                single entry could be used to create it at the beginning of a quarter, but care must
                be taken to modify the calculations in the Archive Script to account for that.
                Currently the example Archive Channel Creation Script below figures out what quarter
                it is by looking at the current date. Running the script in the 4 th quarter will
                name the archive created as a 4 th quarter archive.</para>
            <para>Cron entries for end-of-quarter (e.g. 30th of months June and Sept. and 31st of
                months March and
                December):<screen language="Bash">0 0 30 6,9 * /path_to/the/archive/script
0 0 31 3,12 * /path_to/the/archive/script</screen></para>
        </sect2>
        <sect2 xml:id="bp.chapt.sect2.sample.archive.channel.creation.script">
            <title>Sample Archive Channel Creation Script</title>
            <para>The script below works with the Archive Channel Sources file (next appendix item)
                to create quarterly archives of the SUSE Updates channels. This example script is
                written in BASH but calls spacecmd to accomplish the cloning and setting the new
                archive to be public (accessible to other organizations).</para>

            <para>The script takes some time to run - as the clone command finishes quickly, but the
                actual cloned channel still takes some time to settle down before the org-access
                command can access/finish. So if you want to test this manually - you must be
                patient. A normal cron-type run of the script will finish in due-time.</para>
            <screen language="bash">#!/bin/bash
####################################################################
#                                                                  #
#     SUMa Archive Channel Creation Script - Called from Cron      #
#                                                                  #
####################################################################
#                                                                  #
#     This script creates quarterly archives of SUSE Manager       #
#      channels from SUSE Updates channels. It takes a list        #
#      of source channels from the archive-sources.lst file        #
#      that should be located in the same directory as this        #
#      script. Each entry in that file will be used as a           #
#      source channel to create an archive for patches/updates     #
#      in the appropriate archive channel.                         # 
#                                                                  #
#  REQUIRES:                                                       #
#  1. cron entries for each quarter:                               #
#     eg. 30th of months June and Sept. and 31st of months         #
#     March and December:                                          #
#          0 0 30 6,9 * /path/to/this/script                       #
#          0 0 31 3,12 * /path/to/this/script                      #
#                                                                  #
#  2. archive-sources.lst:                                         #
#    A list of the architecture, the source updates channel        # 
#    for each distro and the suffix of the target channel          #
#    version and architecture (1 per line - no line-feed at EOF)   #
#  EXAMPLE:                                                        #
#  S390x,sles11-sp3-updates-s390x,SLES11-SP3-Updates for s390x     #                      
#  ppc64,sles11-sp4-updates-ppc64,SLES11-SP4-Updates for PPC       #
#  x86_64,sles11-sp3-updates-x86_64,SLES11-SP3-Updates for x86_64  #
#                                                                  #
####################################################################
#                                                                  #
#        Created by - Jeff Price, SUSE Consulting - 2015           #
#                                                                  #
####################################################################
 
## date strings
month=`date +%m`
year=`date +%Y`
fdate=`date +%m-%d-%Y`

## set quarter
if [ $month -le 3 ]
then
    quar=1
elif [ $month -gt 3 ] &amp;&amp; [ $month -lt 7 ]
then
    quar=2
elif [ $month -gt 6 ] &amp;&amp; [ $month -lt 10 ]
then
    quar=3
elif [ $month -gt 9 ]
then
    quar=4
fi

## Create archives using source list

while read line
do
        arch=`echo "$line" | awk -F, '{print $1}'`
        src_ch=`echo "$line" | awk -F, '{print $2}'`
        trg_ch=`echo "$line" | awk -F, '{print $3}'`

## set archive channel
target_parent=$arch"-patch-archives-channel"
source_channel=$src_ch
target_channel_name="Q"$quar" "$year" - "$fdate" - Archive of "$trg_ch
target_summary="Q"$quar"-"$year" Archive Set "$trg_ch
target_channel_label="q"$quar"-"$year"-archive-"$src_ch

## Debug Output
echo "Architecture: " $arch
echo "Source Channel: "$src_ch
echo "Target Channel Archive Suffix: "$trg_ch
echo "Target Archive Parent Channel: "$target_parent
echo "Source Channel (again): "$source_channel
echo "Target Channel Name: "$target_channel_name
lctn=`echo $target_channel_name|tr '[:upper:]' '[:lower:]'`
echo "lowercase target name: "$lctn
echo "Target Channel Label: "$target_channel_label
echo "Target Channel Summary and Description: "$target_summary

/usr/bin/spacecmd -d -- softwarechannel_clone -s “‘$src_ch’” -n
“‘$target_channel_name’” -l “‘$target_channel_label’” -p “‘$target_parent’” -g

/usr/bin/spacecmd -d -- softwarechannel_setorgaccess
“‘$target_channel_label’” -e

done &lt; ./archive-sources.lst</screen>
        </sect2>

        <sect2 xml:id="sample.archive.channel.sources.list.file">
            <title>Sample Archive Channel Sources List File</title>
            <para>This file is called/used by the Archive Channel Creation Script located above in
                the previous section. Since the function “readline” is used, there should only be
                lines with data in the file. Any blank lines will be sourced as data and will cause
                errors with the Archive Channel Creation script above.</para>

            <para>The fields are:<itemizedlist>
                    <listitem>
                        <para><emphasis>Architecture</emphasis> - which defines the source parent
                            archive channel. This is where the new archive will be placed as a child
                            channel.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>Source Channel Label</emphasis> - This defines Where
                            patches/packages are coming from.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>Target channel Naming</emphasis> - the text that makes up
                            the channel name and part of the channel summary/description
                            fields.</para>
                        <screen language="nocode">s390x, sles11-sp3-updates-s390x,SLES11-SP3-Updates
x86_64, sles11-sp4-updates-x86_64,SLES11-SP4-Updates
i586, sles11-sp3-updates-x86_64,SLES11-SP3-Updates</screen>
                    </listitem>
                </itemizedlist></para>
            <para>This concludes the <emphasis>Advanced Patch Lifecycle Managment</emphasis> chapter
                of this guide.</para>
        </sect2>


    </sect1>


</chapter>
