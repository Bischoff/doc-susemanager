<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ch-pup">
<!-- xmllint says: this is valid!  emacs believes:  it is not.
      anyhow, to make the docs build, this is needed for now.  

      actually the schema is weird.  for chapters, the schema allows
      _either_ a sequence of sections _or_ a sequence of refentries
      _or_ a msgset _or_ a *single* xi:include ???

/usr/share/xml/novdoc/schema/rng/1.0/novdocx-core.rnc

chapter =
  element chapter {
    attlist_chapter,
    title,
    (abstract | all | procedure | qandaset)+,
    (sect1* | refentry* | msgset? | xi_include.opt)
  }

no good.

this is the part from 
/usr/share/xml/novdoc/schema/dtd/1.0/novdocx.dtd

<!-/- CHANGE_SEP_28 added msgset to Appendix, Chapter and Sect1 -/->
<!ELEMENT appendix  (title , (%all; | procedure | qandaset)+ , (sect1* | refentry* | msgset?) ) >
<!ELEMENT chapter   (title , (abstract | %all; | procedure | qandaset)+ , (sect1* |refentry* | msgset? %xi_include.opt;) ) >
<!ELEMENT abstract  (title?, para+) >

in case a chapter should continue to be either sect1 sections or
refentries (man pages) or a single msgset (eror message catalogue),
then chapter could instead be this:

<!ELEMENT chapter   (title ,
                     (abstract | %all; | procedure | qandaset)+ ,
                     ( (sect1 %xi_include.opt; )* | (refentry %xi_include.opt;)* | (msgset %xi_include.opt;)?  ) ) >


alternatively, if the restriction on chapter structure can be lifted,
it could also look like this instead:

<!ELEMENT chapter   (title , (abstract | %all; | procedure | qandaset)+ , (sect1 |refentry | msgset %xi_include.opt;)* ) >



anyhow.  this will render the documentation for now.
  -->
 <title>Package Update Tools (&slea; and &rhela;)</title>
 <info/><indexterm>
 <primary>package installation</primary>
 <secondary>complete description</secondary></indexterm>
 <para>
  On the supported client systems various software management and package
  update tools are available&mdash;not only GUI programs and desktop
  applets, but also command-line tools.
 </para>
 <warning>
  <title>Updating &susemgr;</title>
  <para>
   To update &susemgr; server, additional steps might be required. Refer
   to <xref linkend="s1-maintenance-update"/> for detailed instructions.
  </para>
 </warning>
 <sect1 xml:id="pup-sle">
<!--status="rfc"-->

  <title>Updating Packages on &slea;</title><indexterm>

  <primary>package installation</primary>

  <secondary>on &sle;</secondary></indexterm>

  <remark role="generic">
  2011-01-28 - ke: contents missing
  2011-01-31 - ke: I added generic contents; is more wanted?
  </remark>

  <para>
   &yast; Online Update (<command>yast2 online_update</command>) is the
   desktop update application for &sle;. Using this tool, you can update
   packages and read additional information about the updated packages, such
   as bug fix details, security alerts, enhancements, and more. For more
   information, refer to <xref linkend="pup-sle-you"/>.
  </para>

  <para>
   Use <command>zypper</command> if you prefer to manage software updates on
   the command line. For more information, refer to
   <xref linkend="pup-sle-zypper"/>.
  </para>

  <para>
   For background information, see the &sle; &deploy;, Chapter 9.0
   <citetitle>Installing or Removing Software</citetitle> (using desktop
   applets). &sle; &admin;, Chapter 1.0 <citetitle>YaST Online
   Update</citetitle>, and Chapter 4.0 <citetitle>Managing Software with
   Command Line Tools</citetitle> (zypper).
  </para>

<!-- FIXME add pointer to client guide once available-->

  <para>
   If you enable the <guimenu>Auto Patch Update</guimenu>, updates will be
   installed automatically, pushed from &susemgr;. For more information
   about this feature, refer to
   <xref linkend="varentry-system-details-properties-auto"/>.
  </para>

  <sect2 xml:id="pup-sle-you">
   <title>Using &yast; Online Update</title>
<!-- 2011-01-31: taken from SLE_110/books/en/xml/yast2_you.xml -->
<!-- FIXME: add special SM features, if any -->
   <para>
    <phrase os="sles;sled">Novell</phrase><phrase os="osuse">openSUSE</phrase>
    offers a continuous stream of software security updates for your
    products. By default the update applet is used to keep your system
    up-to-date.
<!-- 
    FIXME: Refer
    to <xref linkend="sec.updater"/> for further information on the update
    applet. -->
    This section covers the tool for updating software packages: &yast;
    Online Update.
   </para>
   <figure xml:id="fig.ref.yast.repo.services">
    <title>&yast; Software Repositories</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast-gtk-repo-services.png" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast-gtk-repo-services.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    After activating the &sls; client system, &susemgr; channels are
    available as a <systemitem>spacewalk</systemitem> repository service
    (see <xref linkend="fig.ref.yast.repo.services"/>) and you can use
    &yast; to install software updates on the client system. For more
    information about client activation, refer to
    <xref linkend="sec.manager.config.setup.client"/> and
    <xref linkend="s2-sm-systems-activation-keys"/>.
   </para>
<!--
   <para>
    The current patches for &productnamereg; are available from an update
    software repository<phrase os="osuse">, which is automatically configured
    during the installation</phrase>. <phrase os="sles;sled;">If you have
    registered your product during the installation, an update repository is
    already configured. If you have not registered &productname;, you can do
    so by running <menuchoice> <guimenu>Software</guimenu> <guimenu>Online
    Update Configuration</guimenu> </menuchoice> in &yast; and start
    <menuchoice> <guimenu>Advanced</guimenu><guimenu>Register for Support and
    Get Update Repository</guimenu></menuchoice>.</phrase> Alternativelly, you
    can manually add an update repository from a source you trust. To add or
    remove repositories, start the Repository Manager with <menuchoice>
    <guimenu>Software</guimenu> <guimenu>Software Repositories</guimenu>
    </menuchoice> in &yast;.
   </para>
   <note os="sles;sled">
    <title>Error on Accessing the Update Catalog</title>
    <para>
     <remark condition="generic"> 2008-02-29 - fs: Fate #303284 </remark>
     If you are not able to access the update catalog, this might be due to an
     expired subscription. Normally, &productname; comes with a one or three
     years subscription, during which you have access to the update catalog.
     This access will be denied once the subscription ends.
    </para>
    <para>
     In case of an access denial to the update catalog you will see a warning
     message with a recommendation to visit the &ncc; and check your
     subscription. The &ncc; is available at
     <ulink url="http://www.novell.com/center/"/>.
    </para>
   </note>
   -->
   <para>
    <phrase os="sles">SUSE</phrase><phrase os="osuse">openSUSE</phrase>
    provides updates with different relevance levels.
    <literal>Security</literal> updates fix severe security hazards and
    should definitely be installed. <literal>Recommended</literal> updates
    fix issues that could compromise your computer, whereas
    <literal>Optional</literal> updates fix non-security relevant issues or
    provide enhancements.
   </para>
   <procedure>
    <title>Installing Patches with &yast; Online Update</title>
    <step>
     <para>
      Run <menuchoice><guimenu>Software</guimenu><guimenu>Online
      Update</guimenu></menuchoice> in &yast;
     </para>
    </step>
    <step>
     <para>
      All new patches (except optional ones) currently available for your
      system are already marked for installation. Confirm the selection to
      automatically install these patches.
     </para>
    </step>
    <step>
     <para>
      Confirm with <guimenu>Finish</guimenu> after the installation has
      completed. Your system is now up-to-date.
     </para>
    </step>
   </procedure>
<!--
   <tip>
    <title>Disabling deltarpms</title>
    <para>
     <remark condition="generic"> 2008-02-29 - fs: Fate #302544 </remark>
     By default updates are downloaded as deltarpms. Since rebuilding rpm
     packages from deltarpms is a memory and CPU time consuming task, certain
     setups or hardware configurations might require you to disable the usage
     of deltarpms for performance sake. To disable the use of deltarpms edit
     the file <filename>/etc/zypp/zypp.conf</filename> and set
     <literal>download.use_deltarpm</literal> to <option>false</option>.
    </para>
   </tip>
   -->
   <sect3 xml:id="sec.onlineupdate.you.manually">
    <title>Installing Patches Manually Using the Qt Interface</title>
    <para>
     The <guimenu>Online Update</guimenu> window consists of four sections.
     The list of all patches available is on the left. Find the description
     of the selected patch displayed below the list of patches. The right
     column lists the packages included in the selected patch (a patch can
     consist of several packages) and below a detailed description of the
     selected package.
    </para>
    <figure>
     <title>&yast; Online Update</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_you.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="yast2_you.png" width="75%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>
     The patch display lists the available patches for the client system.
     The patches are sorted by security relevance
     (<literal>security</literal>, <literal>recommended</literal>, and
     <literal>optional</literal>). There are three different views on
     patches. Use <guimenu>Show Patch Category</guimenu> to toggle the
     views:
    </para>
    <variablelist>
     <varlistentry>
      <term><guimenu>Needed Patches</guimenu> (default view)</term>
      <listitem>
       <para>
        Non-installed patches that apply to packages installed on your
        system.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>Unneeded Patches</guimenu>
      </term>
      <listitem>
       <para>
        Patches that either apply to packages not installed on your system,
        or patches that have requirements which have already been fulfilled
        (because the relevant packages have already been updated from
        another source).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>All Patches</guimenu>
      </term>
      <listitem>
       <para>
        All patches available for the client system.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     A list entry consists of a symbol and the patch name. For a list of
     possible symbols, press
     <keycombo><keycap function="shift"/><keycap>F1</keycap></keycombo>.
     Actions required by <literal>Security</literal> and
     <literal>Recommended</literal> patches are automatically preset. These
     actions are <guimenu>Autoinstall</guimenu>,
     <guimenu>Autoupdate</guimenu> and <guimenu>Autodelete</guimenu>.
     Actions for <literal>Optional</literal> patches are not
     preset&mdash;right-click on a patch and choose an action from the
     list.
    </para>
    <para>
     If you install an up-to-date package from a repository other than the
     update repository, the requirements of a patch for this package may be
     fulfilled with this installation. If so, a check mark is displayed in
     front of the patch summary. The patch will be visible in the list until
     you mark it for installation. This will in fact not install the patch
     (because the package already is up-to-date), but mark the patch as
     installed.
    </para>
    <para>
     Most patches include updates for several packages. If you want to
     change actions for single packages, right-click on a package in the
     package window and choose an action. Once you have marked all patches
     and packages as desired, proceed with <guimenu>Accept.</guimenu>
    </para>
   </sect3>
   <sect3 xml:id="sec.onlineupdate.you_gtk.manually">
    <title>Installing Patches Manually Using the GTK Interface</title>
    <remark>emap 2011-03-24: Do we need to add a few words
    on why there are two different interfaces? Something like 'If you selected
    the GNOME desktop during installation, the YaST interface will look
    slightly different.' I guess something like this should rather be added to
    the Qt section with a reference to here?</remark>
    <remark role="generic">
2011-04-01 - ke: Maybe in the future.
</remark>
    <para>
     The <guimenu>Online Update</guimenu> window consists of two main
     sections. The left pane lists all patches and provides different
     filters for the patch list. See the right pane for a list of changes
     that will be made once you <guimenu>Apply</guimenu> them.
    </para>
    <figure>
     <title>&yast; Online Update</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_you_gtk.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="yast2_you_gtk.png" width="75%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <variablelist>
     <title>Patch List Filters</title>
     <varlistentry>
      <term><guimenu>Available</guimenu>
      </term>
      <listitem>
       <para>
        Non-installed patches that apply to packages installed on your
        system.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>Installed</guimenu>
      </term>
      <listitem>
       <para>
        Patches that are already installed.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>All</guimenu>
      </term>
      <listitem>
       <para>
        Patches that are either already installed or available.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>Severity</guimenu>
      </term>
      <listitem>
       <para>
        Only show <guimenu>Optional</guimenu>,
        <guimenu>Recommended</guimenu>, or <guimenu>Security</guimenu>
        patches. By default, <guimenu>All</guimenu> patches are shown.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>Repositories</guimenu>
      </term>
      <listitem>
       <para>
        This filter lets you display patches per repository.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><guimenu>Packages Listing</guimenu>
      </term>
      <listitem>
       <para>
        Apply your custom filter here.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Click on a patch entry to open a row with detailed information about
     the patch in the bottom of the window. Here you can see a patch
     description as well as the versions available. You can also choose to
     <guimenu>Install</guimenu> optional patches&mdash;security and
     recommended patches are already preselected for installation.
    </para>
   </sect3>
   <sect3 xml:id="sec.onlineupdate.you.automatically">
    <title>Automatic Online Update</title>
    <para>
     &yast; also offers the possibility to set up an automatic update.
     Open <menuchoice><guimenu>Software</guimenu><guimenu>Online Update
     Configuration</guimenu></menuchoice>. Check <guimenu>Automatic Online
     Update</guimenu> and choose whether to update <guimenu>Daily</guimenu>,
     <guimenu>Weekly</guimenu>, or <guimenu>Monthly</guimenu>. Some patches,
     such as kernel updates, require user interaction, which would cause the
     automatic update procedure to stop. Therefore you should check
     <guimenu>Skip Interactive Patches</guimenu> if you want the update
     procedure to proceed fully automatically. In that case, you should run
     a manual <guimenu>Online Update</guimenu> from time to time in order to
     install patches that require interaction.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="pup-sle-zypper">
   <title>Updating Packages from the Command Line with Zypper</title>
<!-- <title>Update from the Command Line with zypper</title> --><indexterm xml:id="idx.zypper" class="startofrange">
   <primary>zypper</primary></indexterm><indexterm>
   <primary>commands</primary>
   <secondary>zypper</secondary></indexterm><indexterm>
   <primary>software</primary>
   <secondary>managing</secondary>
   <tertiary>command line</tertiary></indexterm>
   <para>
    <remark role="general"> mdejmek: if refering to Zypper as a tool it should
   be capitalized, if refering to it as a command it should be written in
   lowercase</remark>
    <remark>ke: sounds good.</remark>
    Zypper is a command line package manager for installing, updating, and
    removing packages as well as for managing repositories. It is especially
    useful for remote software management tasks or managing software from
    shell scripts.
   </para>
   <para>
    For more information on managing software from the command line, enter
    <command>zypper help</command> or <command>zypper help</command>
    <replaceable>command</replaceable> or see the
    <systemitem>zypper(8)</systemitem> manpage. <phrase os="osuse">Also see
    <link xlink:href="http://en.opensuse.org/Zypper/Usage"/> for a complete
    and detailed command-reference.</phrase>
   </para>
   <sect3 xml:id="sec.zypper.usage">
    <title>General Usage</title>
    <para>
     The general syntax of Zypper is:
    </para>
<screen>zypper <option>[global-options]</option> <replaceable>command</replaceable> <option>[command-options]</option> <option>[arguments]</option> ...</screen>
    <para>
     The components enclosed in brackets are not required. The simplest way
     to execute Zypper is to type its name followed by a command. For
     example, to apply all needed patches to the system, type:
    </para>
<screen>zypper patch</screen>
    <para>
     Additionally, you can choose from one or more global options by typing
     them just before the command. For example,
     <option>--non-interactive</option> means running the command without
     asking anything (automatically applying the default answers):
    </para>
<screen>zypper --non-interactive patch</screen>
    <para>
     To use options specific to a particular command, type them right after
     the command. For example, <option>--auto-agree-with-licenses</option>
     means applying all needed patches to the system without asking to
     confirm any licenses (they will automatically be accepted):
    </para>
<screen>zypper patch --auto-agree-with-licenses</screen>
    <para>
     Some commands require one or more arguments. When using the install
     command, for example, you need to specify which package(s) to install:
    </para>
<screen>zypper install mplayer</screen>
<!-- bnc#845470
         use patch instead of pattern to avoid confusion
    -->
    <para>
     Some options also require an argument. The following command will list
     all known patches:
    </para>
<screen>zypper search -t patch</screen>
    <para>
     You can combine all of the above. For example, the following command
     will install <systemitem>mplayer</systemitem> and
     <systemitem>amarok</systemitem> packages, using the
     <literal>factory</literal> repository only, in verbose mode:
    </para>
<screen>zypper -v install --repo factory mplayer amarok</screen>
    <para>
     Most Zypper commands have a <literal>dry-run</literal> option that does
     a simulation of the given command. It can be used for test purposes.
     This could be useful to find out beforehand if and which package
     dependencies will break.
    </para>
<screen>zypper remove --dry-run MozillaFirefox</screen>
   </sect3>
   <sect3 xml:id="sec.zypper.softman">
    <title>Installing and Removing Software with Zypper</title>
    <para>
     To install or remove packages use the following commands:
    </para>
<screen>zypper install <replaceable>package</replaceable>
zypper remove <replaceable>package</replaceable></screen>
    <para>
     Zypper knows various ways to address packages for the install and
     remove commands.
    </para>
    <variablelist>
     <varlistentry>
      <term>By the exact package name:</term>
      <listitem>
<screen>zypper in MozillaFirefox</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>By repository alias and package name:</term>
      <listitem>
<screen>zypper in mozilla:MozillaFirefox</screen>
       <para>
        In this example <literal>mozilla</literal> is the alias of the
        repository from which to install.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>By package name using wildcards:</term>
      <listitem>
       <para>
        The following command will install all packages that have names
        starting with <quote>Moz</quote>. Use with care, especially when
        removing packages.
       </para>
<screen>zypper in 'Moz*'</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>By capability:</term>
      <listitem>
       <para>
        For example, if you want to install a perl module without knowing
        the name of the package, capabilities come in handy:
       </para>
<screen>zypper in 'perl(Time::ParseDate)'</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>By capability and/or architecture and/or version:</term>
      <listitem>
       <para>
        Together with a capability you can specify an architecture (such as
        <literal>i586</literal> or <literal>x86_64</literal>) and a version.
        The version must be preceded by an operator:
        <literal>&lt;</literal> (lesser than),
        <literal>&lt;=</literal> (lesser than or equal),
        <literal>=</literal> (equal&gt;, <literal>&gt;=</literal>
        (greater than or equal), <literal>&gt;</literal> (greater than).
       </para>
<screen>zypper in 'firefox.x86_64'
zypper in 'firefox&gt;=3.5.3'
zypper in 'firefox.x86_64&gt;=3.5.3'</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>By path:</term>
      <listitem>
       <para>
        Specify a local or remote path to a package:
       </para>
<screen>zypper in /tmp/install/MozillaFirefox.rpm
zypper in http://download.opensuse.org/repositories/mozilla/SUSE_Factory/x86_64/MozillaFirefox-3.5.3-1.3.x86_64.rpm</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     To install and remove packages simultaneously, use the
     <literal>+/-</literal> modifiers. To install
     <systemitem>emacs</systemitem> and remove <systemitem>vim</systemitem>
     simultaneously, use:
    </para>
<screen>zypper install emacs -vim
</screen>
    <para>
     To remove <systemitem>emacs</systemitem> and install
     <systemitem>vim</systemitem> simultaneously, use:
    </para>
<screen>zypper remove emacs +vim
</screen>
    <para>
     To prevent the package name starting with the <literal>-</literal>
     being interpreted as a command option, always use it as the second
     argument. If this is not possible, precede it with
     <literal>--</literal>:
    </para>
<screen>zypper install -emacs +vim       # Wrong
zypper install vim -emacs        # Correct
zypper install -- -emacs +vim    # Correct, same as above
zypper remove emacs +vim         # Correct, same as above</screen>
    <para>
     By default, Zypper asks for confirmation before installing or removing
     a selected package, or when a problem occurs. You can override this
     behavior using the <option>--non-interactive</option> option. This
     option must be given before the actual command (install, remove, and
     patch) as in the following:
    </para>
<screen>zypper <option>--non-interactive</option> install <replaceable>package_name</replaceable></screen>
    <para>
     This option allows the use of Zypper in scripts and cron jobs.
    </para>
<!-- fate#304459 -->
    <warning>
     <title>Do not Remove Mandatory System Packages</title>
     <para>
      Do not remove packages such as <systemitem>glibc</systemitem>,
      <systemitem>zypper</systemitem>, <systemitem>kernel</systemitem>, or
      similar packages. These packages are mandatory for the system and, if
      removed, may cause the system to become unstable or stop working
      altogether.
     </para>
    </warning>
    <sect4 xml:id="sec.zypper.softman.sources">
     <title>Installing Source Packages</title>
     <para>
      <indexterm>
      <primary>software</primary>
      <secondary>installing</secondary>
      <tertiary>source package</tertiary>
      </indexterm> If you want to install the corresponding source package
      of a package, use:
     </para>
<screen>zypper source-install <replaceable>package_name</replaceable>
   </screen>
     <para>
      This command will also install the build dependencies of the specified
      package. To avoid this, add the switch <literal>-D</literal>. To
      install only the build dependencies use <literal>-d</literal>.
     </para>
<screen>zypper source-install -D <replaceable>package_name</replaceable> # source package only
zypper source-install -d <replaceable>package_name</replaceable> # build dependencies only</screen>
     <para>
      Of course, this will only work if you have the repository with the
      source packages enabled in your repository list (it is added by
      default, but not enabled). See <xref linkend="sec.zypper.instrepo"/>
      for details on repository management.
     </para>
     <para>
      A list of all source packages available in your repositories can be
      obtained with:
     </para>
<screen>zypper search -t srcpackage</screen>
    </sect4>
    <sect4 xml:id="sec.zypper.softman.util">
     <title>Utilities</title>
     <para>
      To verify whether all dependencies are still fulfilled and to repair
      missing dependencies, use:
     </para>
<screen>zypper verify</screen>
     <para>
      In addition to dependencies that must be fulfilled, some packages
      <quote>recommend</quote> other packages. These recommended packages
      are only installed if actually available. In case recommended packages
      were made available after the recommending package has been installed
      (by adding additional packages), use the following command:
     </para>
<screen>zypper install-new-recommends</screen>
    </sect4>
   </sect3>
   <sect3 xml:id="sec.zypper.softup">
    <title>Updating Software with Zypper</title>
    <para>
     There are three different ways to update software using Zypper: by
     installing patches, by installing a new version of a package or by
     updating the entire distribution. Do not use the latter
     (<command>zypper dist-upgrade</command>) for migrating &susemgr; 1.7
     to version 2.1. Instead use &yast; Wagon as described in
     <xref linkend="sec.update.online.wagon"/>.
    </para>
    <sect4 xml:id="sec.zypper.softup.patch">
     <title>Installing Patches</title>
     <para>
      To install all officially released patches applying to your system,
      just run:
     </para>
<screen>zypper patch</screen>
     <para>
      In this case, all patches available in your repositories are checked
      for relevance and installed, if necessary.
      <phrase os="sles;sled">After registering your &productname;
      installation, an official update repository containing such patches
      will be added to your system.</phrase> The above command is all you
      must enter in order to apply patches when needed.
     </para>
     <para>
      Zypper knows three different commands to query for available patches:
     </para>
     <variablelist>
      <varlistentry>
       <term><command>zypper patch-check</command>
       </term>
       <listitem>
        <para>
         Lists the number of needed patches (patches that apply to your
         system but are not yet installed).
        </para>
<screen>~ # zypper patch-check
Loading repository data...
Reading installed packages...
5 patches needed (1 security patch)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><command>zypper list-patches</command>
       </term>
       <listitem>
        <para>
         Lists all needed patches (patches that apply to your system but are
         not yet installed).
        </para>
<!--taroth 2010-07-26: todo - (instead of zypper list-patches) the output 
       of zypper list-updates is given below, correct for next revision (fixed in 
       trunk already but the only SLE installation I had at hand said: No
       updates found)-->
<screen><?dbsuse-fo font-size="0.60em"?>~ # zypper list-updates
Loading repository data...
Reading installed packages...
S | Repository | Name                          | Current | Available  | Arch
--+------------+-------------------------------+---------+------------+-------
v | Updates    | update-test-interactive       | 0-2.35  | 0-9999.1.2 | noarch
v | Updates    | update-test-optional          | 0-2.35  | 0-9999.1.2 | noarch
v | Updates    | update-test-reboot-needed     | 0-2.35  | 0-9999.1.2 | noarch
v | Updates    | update-test-relogin-suggested | 0-2.35  | 0-9999.1.2 | noarch
v | Updates    | update-test-security          | 0-2.35  | 0-9999.1.2 | noarch</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><command>zypper patches</command>
       </term>
       <listitem>
        <para>
         Lists all patches available for &productname;, regardless of
         whether they are already installed or apply to your installation.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      It is also possible to list and install patches relevant to specific
      issues. To list specific patches, use the <command>zypper
      list-patches</command> command with the following options:
     </para>
     <variablelist>
      <varlistentry>
       <term><option>-b</option>
       </term>
       <listitem>
        <para>
         Lists all needed patches for Bugzilla issues.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>--bugzilla[=<replaceable>number</replaceable>] </option>
       </term>
       <listitem>
        <para>
         Lists needed patches for a Bugzilla issue with the specified
         number.
        </para>
       </listitem>
      </varlistentry>
<!--cve, issues not working yet-->
     </variablelist>
     <para>
      To install a patch for a specific issue, use command:
     </para>
<screen>zypper patch --bugzilla=<replaceable>number</replaceable>
  </screen>
    </sect4>
<!--
Done in zypper. You can fetch zypper 1.2.2 from home:jkupec:Factory to try and let me know what you think. New options in lp and patch commands:
$ zypper help lp
-b, - -bugzilla[=#]         List needed patches for Bugzilla issues.
    - -cve[=#]              List needed patches for CVE issues.
    - -issues[=string]      Look for issues matching the specified string.
-a, - -all                  List all patches, not only the needed ones.

$ zypper help patch
patch [options]
-b, - -bugzilla #            Install patch fixing the specified bugzilla issue.
    - -cve #                 Install patch fixing the specified CVE issue.
- -bz works, too. 
Can this feature be closed, or we'll close it after the repo metadata have the CVE references?
-->
    <sect4 xml:id="sec.zypper.softup.update">
     <title>Installing Updates</title>
     <para>
      If a repository contains only new packages but does not provide
      patches, <command>zypper&nbsp;patch</command> does not show any
      effect. To update all installed packages with newer available
      versions, use:
     </para>
<screen>zypper update</screen>
     <para>
      To update individual packages, specify the package with either the
      update or install command:
     </para>
<screen>zypper update <replaceable>package</replaceable>
zypper install <replaceable>package</replaceable></screen>
     <para>
      A list of all new packages available can be obtained with the command:
     </para>
<screen>zypper list-updates</screen>
     <note>
      <title>Updating packages to newer versions with <command>zypper update</command></title>
      <para>
       Choose <command>zypper update</command> to update packages to newer
       versions available for your product version while maintaining system
       integrity. <command>zypper update</command> will honor the following
       rules:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         no vendor changes,
        </para>
       </listitem>
       <listitem>
        <para>
         no architecture changes,
        </para>
       </listitem>
       <listitem>
        <para>
         no downgrades,
        </para>
       </listitem>
       <listitem>
        <para>
         keep installed packages.
        </para>
       </listitem>
      </itemizedlist>
<!-- <para>
       To upgrade your installation to a new product version use
       <command>zypper dist-upgrade</command> with the required repositories
       (see <xref linkend="sec.zypper.instrepo"/> for details). This command
       ensures that all packages will be installed from the repositories
       currently enabled. This rule is enforced, so packages might change
       vendor or architecture or even might get downgraded. All packages
       that have unfulfilled dependencies after the upgrade will be
       uninstalled.
      </para> emap: not supposed to be used for SUMa bnc #862122-->
     </note>
    </sect4>
   </sect3>
   <sect3 xml:id="sec.zypper.instrepo">
    <title>Managing Repositories with Zypper</title>
    <para>
     All installation or patch commands of Zypper rely on a list of known
     repositories. To list all repositories known to the system, use the
     command:
    </para>
<screen>zypper repos</screen>
    <para>
     The result will look similar to the following output:
    </para>
<screen os="sles;sled"><?dbsuse-fo font-size="0.60em"
?># | Alias                             | Name                              | Enabled | Refresh
--+-----------------------------------+-----------------------------------+---------+--------
1 | SUSE-Linux-Enterprise-Server 11-0 | SUSE-Linux-Enterprise-Server 11-0 | Yes     | No
2 | SLES-11-Updates                   | SLES 11 Online Updates            | Yes     | Yes
3 | broadcomdrv                       | Broadcom Drivers                  | Yes     | No      </screen>
<screen os="osuse"><?dbsuse-fo font-size="0.80em"
?># | Alias                 | Name                  | Enabled | Refresh
--+-----------------------+-----------------------+---------+--------
1 | Updates               | Updates               | Yes     | Yes
2 | openSUSE 11.2-0       | openSUSE 11.2-0       | No      | No
3 | openSUSE-11.2-Debug   | openSUSE-11.2-Debug   | No      | Yes
4 | openSUSE-11.2-Non-Oss | openSUSE-11.2-Non-Oss | Yes     | Yes
5 | openSUSE-11.2-Oss     | openSUSE-11.2-Oss     | Yes     | Yes
6 | openSUSE-11.2-Source  | openSUSE-11.2-Source  | No      | Yes</screen>
    <para>
     When specifying repositories in various commands, an alias, URI or
     repository number from the <command>zypper repos</command> command
     output can be used. Note however that the numbers can change after
     modifying the list of repositories. The alias will never change by
     itself.
    </para>
    <para>
     By default, details such as the URI or the priority of the repository
     are not displayed. Use the following command to list all details:
    </para>
<screen>zypper repos -d</screen>
    <sect4 xml:id="sec.zypper.instrepo.add">
     <title>Adding Repositories</title>
     <para>
      To add a repository, run
     </para>
<screen>zypper addrepo <replaceable>URI</replaceable> <replaceable>Alias</replaceable></screen>
     <para>
      <replaceable>URI</replaceable> can either be an Internet repository, a
      network resource, a directory, or a CD or DVD (see
      <link xlink:href="http://en.opensuse.org/openSUSE:Libzypp_URIs"/> for
      details). The <replaceable>Alias</replaceable> is a shorthand and
      unique identifier of the repository. You can freely choose it as long
      as it is unique. Zypper will issue a warning if you specify an alias
      that is already in use. Use short and easy-to-remember aliases for
      your own convenience.
     </para>
    </sect4>
    <sect4 xml:id="sec.zypper.instrepo.rm">
     <title>Removing Repositories</title>
     <para>
      If you want to remove a repository from the list, use the command
      <command>zypper removerepo</command> together with the alias or number
      of the repository you want to delete. To remove the 3rd entry from the
      example, use the following command:
     </para>
<screen>zypper removerepo 3</screen>
    </sect4>
    <sect4 xml:id="sec.zypper.instrepo.mofify">
     <title>Modifying Repositories</title>
     <para>
      Enable or disable repositories with <command>zypper
      modifyrepo</command>. You can also alter the repository's properties
      (such as refreshing behavior, name or priority) with this command. The
      following command will enable the repository name
      <quote>updates</quote>, turn on auto-refresh and set its priority to
      20:
     </para>
<screen>zypper mr -er -p 20 'updates'</screen>
     <para>
      Modifying repositories is not limited to a single
      repository&mdash;you can also operate on groups:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <option>-a</option>: all repositories,
       </para>
      </listitem>
      <listitem>
       <para>
        <option>-l</option>: local repositories,
       </para>
      </listitem>
      <listitem>
       <para>
        <option>-t</option>: remote repositories,
       </para>
      </listitem>
      <listitem>
       <para>
        <option>-m <replaceable>TYPE</replaceable></option>: repositories of
        a certain type (<replaceable>TYPE</replaceable> can be one of the
        following: http, https, ftp, cd, dvd, dir, file, cifs, smb, nfs, hd,
        iso).
       </para>
      </listitem>
     </itemizedlist>
     <para>
      To change a repository alias, use the <literal>renamerepo</literal>
      command. The following example changes the alias from <quote>Mozilla
      Firefox</quote> to just <quote>firefox</quote>:
     </para>
<screen>zypper renamerepo 'Mozilla Firefox' firefox</screen>
    </sect4>
   </sect3>
   <sect3 xml:id="sec.zypper.query">
    <title>Querying Repositories and Packages with Zypper</title>
    <para>
     Zypper offers various methods to query repositories or packages. To get
     lists of all products, patterns, packages, or patches available, use
     the following commands:
    </para>
<screen>zypper products
zypper patterns
zypper packages
zypper patches</screen>
    <para>
     To query all repositories for certain packages, use
     <literal>search</literal>. It works on package names, capabilities, or
     optionally on package summaries and descriptions. Using the wildcards *
     and ? in the search term is allowed. By default, the search is not
     case-sensitive.
    </para>
<screen>zypper se firefox       # simple search for "firefox"
zypper se '*fire*'      # using wildcards
zypper se -d fire       # also search in package descriptions and summaries
zypper se -u firefox    # only display packages not already installed</screen>
    <para>
     To search for packages which provide a special capability, use the
     command <literal>what-provides</literal>. For example, if you want to
     know which package provides the perl Module
     <literal>SVN::Core</literal>, use the following command:
    </para>
<screen>zypper what-provides 'perl(SVN::Core)'</screen>
    <para>
     To query single packages, use <literal>info</literal> with an exact
     package name as an argument. It displays detailed information about a
     package. Use the options <option>--requires</option> and
     <option>--recommends</option> to also show what is required/recommended
     by the package:
    </para>
<screen>zypper info --requires MozillaFirefox</screen>
    <para>
     The <literal>what-provides <replaceable>package</replaceable></literal>
     is similar to <command>rpm -q --whatprovides</command>
     <replaceable>package</replaceable>, but rpm is only able to query the
     RPM database (that is the database of all installed packages). Zypper,
     on the other hand, will tell you about providers of the capability from
     any repository, not only those that are installed.
    </para><indexterm class="endofrange" startref="idx.zypper"/>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="pup-rhel">
  <title>Updating Packages on &rhela;&nbsp;5 and&nbsp;6</title><indexterm>

  <primary>package installation</primary>

  <secondary>on &rhel;</secondary></indexterm>

  <remark role="needinfo">
   2011-01-28 - ke: I did de-branding.  I did not change contents.  If
   other RH client systems and tools running on them are important, I
   need your feedback.
   </remark>

  <remark>emap: seems like all works the same for RHEL 6, added.</remark>

  <para>
   Depending on your version of Red Hat Enterprise Linux, systems registered
   with &susemgr; can update client systems directly, using various tools
   and applications installed on the system. For Red Hat Enterprise Linux 5
   and 6, you can use the Package Updater (<command>pup</command>), the
   updater applet, and <command>yum</command> tools to keep systems
   up-to-date.
  </para>

  <remark role="needinfo">emap: RH only documents the package updater applet for updating packages. Couldn't find this content anymore in their 5.6 documentation, nor the yum section with command line options. Should we keep or drop?</remark>

  <para>
   The Package Updater (<command>pup</command>) is the desktop update
   application for Red Hat Enterprise Linux 5 and later. Using this tool,
   you can update packages and read information about the updated packages,
   such as bug fix details, security alerts, enhancements, and more.
  </para>

  <sect2 xml:id="pup-start">
   <title>Using the Package Updater</title>
   <para>
    To start the Package Updater from the desktop, open
    <guimenu>Applications</guimenu> (main menu on the panel), then click
    <menuchoice><guimenu>System Tools</guimenu><guimenu>Package
    Updater</guimenu></menuchoice>.
   </para>
   <para>
    If you are at a shell prompt window, type <command>pup</command> to open
    the Package Updater.
   </para>
   <figure>
    <title>Package Updater Interface</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="75%" fileref="pup2.png"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="pup2.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    If there are multiple package updates, they will be listed with
    pre-selected check boxes next to them so that you can choose which files
    to update. Some packages (for example, kernel packages) may have a
    circular arrow icon next to them, indicating that you are required to
    reboot your system after updating the package.
   </para>
   <para>
    To view the update details of any package, highlight the package and
    click the arrow next to <guimenu>Update Details</guimenu>.
   </para>
   <para>
    When you are ready to update the packages, click <guimenu>Apply
    updates</guimenu>. The Updater will resolve any dependencies and notify
    you if a package must be installed to meet a dependency for an updated
    package.
   </para>
   <figure>
    <title>Package Dependency</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="pup3.png"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="pup3.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    Click <guimenu>Continue</guimenu> to accept the dependency and resume
    the update.
   </para>
   <para>
    If this is the first time you are using the Package Updater, the program
    will prompt you to import the Red Hat GPG security key that verifies
    that a package has been signed and is certified for Red Hat Enterprise
    Linux.
   </para>
<!--
  <figure>
   <title>Import the GPG Key</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="pup5.png" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="pup5.png" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
  -->
   <para>
    Click <guimenu>Import Key</guimenu> to accept the Key and continue with
    the update.
   </para>
   <para>
    When the update completes, you may be prompted to reboot your system for
    the changes to take effect.
   </para>
   <figure>
    <title>Reboot Prompt</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="75%" fileref="pup4.png"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="pup4.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    You can choose to reboot now or later, but it is recommended to click
    <guimenu>Reboot Now</guimenu> to start using the updated packages.
   </para>
  </sect2>

  <sect2 xml:id="pup-puplet">
   <title>The Package Updater Applet</title>
   <para>
    Red Hat Enterprise Linux 5 and later features an applet on the graphical
    desktop panel that periodically checks for updates from the &susemgr;
    server and alerts users when updates are available.
   </para>
   <figure>
    <title>Package Updater Applet</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="75%" fileref="puplet.png"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="puplet.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    The Package Updater applet stays in the notification tray of the desktop
    panel and periodically checks for updates. The applet also facilitates
    various package maintenance tasks. Click the notification icon and
    choose from the following actions:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <guimenu>Refresh</guimenu>: checks &susemgr; for new updates.
     </para>
    </listitem>
    <listitem>
     <para>
      <guimenu>View Updates</guimenu>: launches the Package Updater
      application and displays available updates in more detail. Configure
      the updates to your specifications.
     </para>
    </listitem>
    <listitem>
     <para>
      <guimenu>Apply Updates</guimenu>: downloads and installs all updated
      packages.
     </para>
    </listitem>
    <listitem>
     <para>
      <guimenu>Quit</guimenu>: closes the applet.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="pup-yum">
   <title>Updating Packages from the Command Line with yum</title>
   <para>
    <remark role="needinfo">emap: Couldn't find RH equivalent in 5.6, should still be useful to keep though. Or should we drop it?</remark>
    The foundation of the Package Updater is the Yum package manager,
    developed by Duke University. <command>yum</command> searches supported
    repositories for packages and their dependencies so they may be
    installed together in an effort to alleviate dependency issues. Red Hat
    Enterprise Linux 5 and 6 use <command>yum</command> to fetch and install
    packages.
   </para>
   <note>
    <para>
     <command>up2date</command> is no longer available on Red Hat Enterprise
     Linux 5 and later versions. The entire stack of update and installation
     tools is now based on Yum.
    </para>
   </note>
   <para>
    Yum commands are typically typed as follows:
   </para>
<screen>yum <replaceable>command</replaceable> [<replaceable>package_name</replaceable>]
</screen>
   <para>
    By default, Yum will automatically attempt to check all configured
    repositories to resolve all package dependencies during an installation
    or upgrade. The following is a list of the most commonly-used
    <command>yum</command> commands. For a complete list of available yum
    commands, refer to <command>man yum</command>.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>yum install</command><replaceable>package_name</replaceable>
     </term>
     <listitem>
      <para>
       Installs the latest version of a package or group of packages. If no
       package matches the specified package name, the name is treated as a
       shell wildcard. In this case, all matches are installed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum update <replaceable>package_name</replaceable>
     </term>
     <listitem>
      <para>
       Updates the specified packages to the latest available version. If no
       packages are specified, <command>yum</command> will attempt to update
       all installed packages.
      </para>
      <para>
       If the <option>--obsoletes</option> option is used (i.e. <command>yum
       --obsoletes</command> <replaceable>package_name</replaceable>), yum
       will process obsolete packages. Packages that are obsoleted across
       updates will be removed and replaced accordingly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum check-update</term>
     <listitem>
      <para>
       This command determines whether updates are available for your
       installed packages. <command>yum</command> returns a list of all
       package updates from all repositories where updates are available.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum remove <replaceable>package_name</replaceable>
     </term>
     <listitem>
      <para>
       Removes specified packages and along with it all dependent packages.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum provides <replaceable>package_name</replaceable>
     </term>
     <listitem>
      <para>
       Determines which packages provide a specific file or feature.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum search <replaceable>keyword</replaceable>
     </term>
     <listitem>
      <para>
       This command finds any packages containing the specified keyword in
       the description, summary, packager and package name fields of RPMs in
       all supported repositories.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yum localinstall <replaceable>absolute path to filename</replaceable>
     </term>
     <listitem>
      <para>
       Installs a local package stored on your system.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
<!-- xmllint says: this is valid!  emacs believes:  it is not.
      anyhow, to make the docs build, this is needed for now.  

      actually the schema is weird.  for chapters, the schema allows
      _either_ a sequence of sections _or_ a sequence of refentries
      _or_ a msgset _or_ a *single* xi:include ???

/usr/share/xml/novdoc/schema/rng/1.0/novdocx-core.rnc

chapter =
  element chapter {
    attlist_chapter,
    title,
    (abstract | all | procedure | qandaset)+,
    (sect1* | refentry* | msgset? | xi_include.opt)
  }

no good.

this is the part from 
/usr/share/xml/novdoc/schema/dtd/1.0/novdocx.dtd

<!-/- CHANGE_SEP_28 added msgset to Appendix, Chapter and Sect1 -/->
<!ELEMENT appendix  (title , (%all; | procedure | qandaset)+ , (sect1* | refentry* | msgset?) ) >
<!ELEMENT chapter   (title , (abstract | %all; | procedure | qandaset)+ , (sect1* |refentry* | msgset? %xi_include.opt;) ) >
<!ELEMENT abstract  (title?, para+) >

in case a chapter should continue to be either sect1 sections or
refentries (man pages) or a single msgset (eror message catalogue),
then chapter could instead be this:

<!ELEMENT chapter   (title ,
                     (abstract | %all; | procedure | qandaset)+ ,
                     ( (sect1 %xi_include.opt; )* | (refentry %xi_include.opt;)* | (msgset %xi_include.opt;)?  ) ) >


alternatively, if the restriction on chapter structure can be lifted,
it could also look like this instead:

<!ELEMENT chapter   (title , (abstract | %all; | procedure | qandaset)+ , (sect1 |refentry | msgset %xi_include.opt;)* ) >



anyhow.  this will render the documentation for now.
  -->
</chapter>
