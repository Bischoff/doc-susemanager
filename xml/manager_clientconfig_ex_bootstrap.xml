<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:novdoc-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE appendix PUBLIC
  "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<appendix id="ap-sample-bootstrap-script">
 <title>Sample Bootstrap Script</title><indexterm>
 <primary>bootstrap.sh</primary>
 <secondary>sample file</secondary></indexterm>
 <para>
  The <filename>/srv/www/htdocs/pub/bootstrap/bootstrap.sh</filename> script
  generated by the &susemgr; Server installation program provides the
  ability to reconfigure client systems to access your &susemgr; easily. It
  is available through the <command>mgr-bootstrap</command> command. After
  modifying the script for your particular use, it can be run on each client
  machine.
 </para><remark>emap: no diff of script available, possibly pull the latest?</remark>
 <para>
  Review the sample and its comments, beginning with a hash mark (#),
  for additional details. Follow the steps in <xref
  linkend="ch-bootstrap"/> to prepare the script for use.  The actual
  script may have evolved since this documentation was created, and it
  may look slightly different.  Please check the actual
  <filename>/srv/www/htdocs/pub/bootstrap/bootstrap.sh</filename>. 
 </para>
<!--
You should IMO not try to debrand it in the documentation, as this is the way 
it is generated. Keep in Mind that the script must able to serve both RH and 
SUSE clients. Thus it must contain rhn-* commands as well as 'up2date' 
and 'yum' invocations.

In doubt contact Joe, and Joe must request changing the script generator or 
filenames like the one of the ORG_CA_CERT: RHN-ORG-TRUSTED-SSL-CERT or 
rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
-->
<screen>#!/bin/bash
echo &quot;SUSE Manager Server Client bootstrap script v4.0&quot;

# This file was autogenerated. Minor manual editing of this script (and
# possibly the client-config-overrides.txt file) may be necessary to complete
# the bootstrap setup. Once customized, the bootstrap script can be triggered
# in one of two ways (the first is preferred):
#
# 1/ centrally, from the SUSE Manager Server via ssh (i.e., from the
#    SUSE Manager Server):
#    cd /srv/www/htdocs/pub/bootstrap/
#    cat bootstrap-&lt;edited_name&gt;.sh \
#        | ssh root@&lt;client-hostname&gt; /bin/bash
#
# ...or...
#
# 2/ in a decentralized manner, executed on each client, via wget or curl:
#    wget -qO- https://&lt;hostname&gt;/pub/bootstrap/bootstrap-&lt;edited_name&gt;.sh \
#        | /bin/bash
#    ...or...
#    curl -Sks https://&lt;hostname&gt;/pub/bootstrap/bootstrap-&lt;edited_name&gt;.sh \
#        | /bin/bash

# SECURITY NOTE:
#   Use of these scripts via the two methods discussed is the most expedient
#   way to register machines with your SUSE Manager Server. Since &quot;wget&quot; is
#   used throughout the script to download various files, a &quot;Man-in-the-middle&quot;
#   attack is theoretically possible.
#
#   The actual registration process is performed securely via SSL, so the risk
#   is minimized in a sense. This message merely serves as a warning.
#   Administrators need to appropriately weigh their concern against the
#   relative security of their internal network.

# PROVISIONING/KICKSTART NOTE:
#   If provisioning a client, ensure the proper CA SSL public certificate is
#   configured properly in the post section of your kickstart profiles (the
#   SUSE Manager Server or hosted web user interface).

# UP2DATE/RHN_REGISTER VERSIONING NOTE:
#   This script will not work with very old versions of up2date and
#   rhn_register.


echo
echo
echo &quot;MINOR MANUAL EDITING OF THIS FILE MAY BE REQUIRED!&quot;
echo
echo &quot;If this bootstrap script was created during the initial installation&quot;
echo &quot;of a SUSE Manager Server, the ACTIVATION_KEYS, and ORG_GPG_KEY values&quot;
echo &quot;will probably *not* be set (see below). If this is the case, please do&quot;
echo &quot;the following:&quot;
echo &quot;  - copy this file to a name specific to its use.&quot;
echo &quot;    (e.g., to bootstrap-SOME_NAME.sh - like bootstrap-web-servers.sh.)&quot;
echo &quot;  - on the website create an activation key or keys for the system(s)&quot;
echo &quot;    to be registered.&quot;
echo &quot;  - edit the values of the VARIABLES below (in this script) as&quot;
echo &quot;    appropriate:&quot;
echo &quot;    - ACTIVATION_KEYS needs to reflect the activation key(s) value(s)&quot;
echo &quot;      from the website. XKEY or XKEY,YKEY&quot;
echo &quot;    - ORG_GPG_KEY needs to be set to the name of the corporate public&quot;
echo &quot;      GPG key filename (residing in /srv/www/htdocs/pub) if appropriate.&quot;
echo
echo &quot;Verify that the script variable settings are correct:&quot;
echo &quot;    - CLIENT_OVERRIDES should be only set differently if a customized&quot;
echo &quot;      client-config-overrides-VER.txt file was created with a different&quot;
echo &quot;      name.&quot;
echo &quot;    - ensure the value of HOSTNAME is correct.&quot;
echo &quot;    - ensure the value of ORG_CA_CERT is correct.&quot;
echo
echo &quot;Enable this script: comment (with #'s) this block (or, at least just&quot;
echo &quot;the exit below)&quot;
echo
exit 1

# can be edited, but probably correct (unless created during initial install):
# NOTE: ACTIVATION_KEYS *must* be used to bootstrap a client machine.
ACTIVATION_KEYS=<replaceable>insert_activation_key_here</replaceable>
ORG_GPG_KEY=<replaceable>insert_filename_of_corporate_public_gpg_key</replaceable>

# can be edited, but probably correct:
CLIENT_OVERRIDES=client-config-overrides.txt
HOSTNAME=<replaceable>your_suse_manager_server_host.example.com</replaceable>

ORG_CA_CERT=rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
ORG_CA_CERT_IS_RPM_YN=1

USING_SSL=1
USING_GPG=1

REGISTER_THIS_BOX=1

ALLOW_CONFIG_ACTIONS=0
ALLOW_REMOTE_COMMANDS=0

FULLY_UPDATE_THIS_BOX=1

# Set if you want to specify profilename for client systems.
# NOTE: Make sure it's set correctly if any external command is used.
#
# ex. PROFILENAME=&quot;foo.example.com&quot;  # For specific client system
#     PROFILENAME=`hostname -s`                # Short hostname
#     PROFILENAME=`hostname -f`                # FQDN
PROFILENAME=&quot;&quot;   # Empty by default to let it be set automatically.

#
# -----------------------------------------------------------------------------
# DO NOT EDIT BEYOND THIS POINT -----------------------------------------------
# -----------------------------------------------------------------------------
#

# an idea from Erich Morisse (of Red Hat).
# use either wget *or* curl
# Also check to see if the version on the
# machine supports the insecure mode and format
# command accordingly.

if [ -x /usr/bin/wget ] ; then
    output=`LANG=en_US /usr/bin/wget --no-check-certificate 2&gt;&amp;1`
    error=`echo $output | grep &quot;unrecognized option&quot;`
    if [ -z &quot;$error&quot; ] ; then
        FETCH=&quot;/usr/bin/wget -q -r -nd --no-check-certificate&quot;
    else
        FETCH=&quot;/usr/bin/wget -q -r -nd&quot;
    fi

else
    if [ -x /usr/bin/curl ] ; then
        output=`LANG=en_US /usr/bin/curl -k 2&gt;&amp;1`
        error=`echo $output | grep &quot;is unknown&quot;`
        if [ -z &quot;$error&quot; ] ; then
            FETCH=&quot;/usr/bin/curl -SksO&quot;
        else
            FETCH=&quot;/usr/bin/curl -SsO&quot;
        fi
    fi
fi
HTTP_PUB_DIRECTORY=http://${HOSTNAME}/pub
HTTPS_PUB_DIRECTORY=https://${HOSTNAME}/pub
if [ $USING_SSL -eq 0 ] ; then
    HTTPS_PUB_DIRECTORY=${HTTP_PUB_DIRECTORY}
fi

INSTALLER=up2date
if [ -x /usr/bin/zypper ] ; then
    INSTALLER=zypper
elif [ -x /usr/bin/yum ] ; then
    INSTALLER=yum
fi
if [ &quot;$INSTALLER&quot; == zypper ]; then
  echo
  echo &quot;CHECKING THE REGISTRATION STACK&quot;
  echo &quot;-------------------------------------------------&quot;
  echo &quot;* check for necessary packages being installed:&quot;
  Z_NEEDED=&quot;spacewalk-check spacewalk-client-setup spacewalk-client-tools rhncfg-actions rhncfg-client rhncfg-management zypp-plugin-spacewalk&quot;
  Z_MISSING=&quot;&quot;
  for P in $Z_NEEDED; do
    rpm -q &quot;$P&quot; || Z_MISSING=&quot;$Z_MISSING $P&quot;
  done
  if [ -z &quot;$Z_MISSING&quot; ]; then
    echo &quot;  no packages missing.&quot;
  else
    echo &quot;* going to install missing packages:&quot;
    Z_CLIENT_REPO_NAME=&quot;susemanager-client-setup&quot;
    Z_CLIENT_REPO_FILE=&quot;/etc/zypp/repos.d/${Z_CLIENT_REPO_NAME}.repo&quot;
    if [ ! -f &quot;$Z_CLIENT_REPO_FILE&quot; ]; then
      echo &quot;  adding client software repository $Z_CLIENT_REPO_NAME&quot;
      cat &lt;&lt;EOF &gt;&quot;$Z_CLIENT_REPO_FILE&quot;
[$Z_CLIENT_REPO_NAME]
name=$Z_CLIENT_REPO_NAME
baseurl=http://${HOSTNAME}/pub/repositories/${Z_CLIENT_REPO_NAME}
enabled=1
autorefresh=1
keeppackages=0
gpgcheck=0
EOF
      zypper --non-interactive --gpg-auto-import-keys refresh &quot;$Z_CLIENT_REPO_NAME&quot; || exit 1
    fi
    zypper --non-interactive install $Z_MISSING || exit 1
  fi
fi

echo
echo &quot;UPDATING RHN_REGISTER/UP2DATE CONFIGURATION FILES&quot;
echo &quot;-------------------------------------------------&quot;
echo &quot;* downloading necessary files&quot;
echo &quot;  client_config_update.py...&quot;
rm -f client_config_update.py
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/client_config_update.py
echo &quot;  ${CLIENT_OVERRIDES}...&quot;
rm -f ${CLIENT_OVERRIDES}
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/${CLIENT_OVERRIDES}

if [ ! -f &quot;client_config_update.py&quot; ] ; then
    echo &quot;ERROR: client_config_update.py was not downloaded&quot;
    exit 1
fi
if [ ! -f &quot;${CLIENT_OVERRIDES}&quot; ] ; then
    echo &quot;ERROR: ${CLIENT_OVERRIDES} was not downloaded&quot;
    exit 1
fi

echo &quot;* running the update scripts&quot;
if [ -f &quot;/etc/sysconfig/rhn/rhn_register&quot; ] ; then
    echo &quot;  . rhn_register config file&quot;
    /usr/bin/python -u client_config_update.py /etc/sysconfig/rhn/rhn_register ${CLIENT_OVERRIDES}
fi
echo &quot;  . up2date config file&quot;
/usr/bin/python -u client_config_update.py /etc/sysconfig/rhn/up2date ${CLIENT_OVERRIDES}

if [ ! -z &quot;$ORG_GPG_KEY&quot; ] ; then
    echo
    echo &quot;* importing organizational GPG key&quot;
    rm -f ${ORG_GPG_KEY}
    $FETCH ${HTTPS_PUB_DIRECTORY}/${ORG_GPG_KEY}
    # get the major version of up2date
    # this will also work for RHEL 5 and systems where no up2date is installed
    res=$(LC_ALL=C rpm -q --queryformat '%{version}' up2date \
      | sed -e 's/\..*//g')
    if [ &quot;x$res&quot; == &quot;x2&quot; ] ; then
        gpg $(up2date --gpg-flags) --import $ORG_GPG_KEY
    else
        rpm --import $ORG_GPG_KEY
    fi
fi

echo
echo &quot;* attempting to install corporate public CA cert&quot;
if [ $USING_SSL -eq 1 ] ; then
    if [ $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
        rpm -Uvh ${HTTP_PUB_DIRECTORY}/${ORG_CA_CERT}
    else
        rm -f ${ORG_CA_CERT}
        $FETCH ${HTTP_PUB_DIRECTORY}/${ORG_CA_CERT}
        mv ${ORG_CA_CERT} /usr/share/rhn/

    fi
    if [ &quot;$INSTALLER&quot; == zypper ] ; then
	if [  $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
	  # get name from config
	  ORG_CA_CERT=$(basename $(sed -n 's/^sslCACert *= *//p' /etc/sysconfig/rhn/up2date))
	fi
	test -e &quot;/etc/ssl/certs/${ORG_CA_CERT}.pem&quot; || {
	  test -d &quot;/etc/ssl/certs&quot; || mkdir -p &quot;/etc/ssl/certs&quot;
	  ln -s &quot;/usr/share/rhn/${ORG_CA_CERT}&quot; &quot;/etc/ssl/certs/${ORG_CA_CERT}.pem&quot;
	  test -x /usr/bin/c_rehash &amp;&amp; /usr/bin/c_rehash /etc/ssl/certs/ \
            | grep &quot;${ORG_CA_CERT}&quot;
	}
    fi
fi

echo
echo &quot;REGISTRATION&quot;
echo &quot;------------&quot;
# Should have created an activation key or keys on the SUSE Manager Server's
# website and edited the value of ACTIVATION_KEYS above.
#
# If you require use of several different activation keys, copy this file and
# change the string as needed.
#
if [ -z &quot;$ACTIVATION_KEYS&quot; ] ; then
    echo &quot;*** ERROR: in order to bootstrap SUSE Manager Server clients, an&quot;
    echo &quot;           activation key or keys must be created in the SUSE Manager Server&quot;
    echo &quot;           web user interface, and the corresponding key or keys string&quot;
    echo &quot;           (XKEY,YKEY,...) must be mapped to the ACTIVATION_KEYS variable&quot;
    echo &quot;           of this script.&quot;
    exit 1
fi

if [ $REGISTER_THIS_BOX -eq 1 ] ; then
    echo &quot;* registering&quot;
    files=&quot;&quot;
    directories=&quot;&quot;
    if [ $ALLOW_CONFIG_ACTIONS -eq 1 ] ; then
        for i in &quot;/etc/sysconfig/rhn/allowed-actions /etc/sysconfig/rhn/allowed-actions/configfiles&quot;; do
            [ -d &quot;$i&quot; ] || (mkdir -p $i &amp;&amp; directories=&quot;$directories $i&quot;)
        done
        [ -f /etc/sysconfig/rhn/allowed-actions/configfiles/all ] || files=&quot;$files /etc/sysconfig/rhn/allowed-actions/configfiles/all&quot;
        [ -n &quot;$files&quot; ] &amp;&amp; touch  $files
    fi
    if [ -z &quot;$PROFILENAME&quot; ] ; then
        profilename_opt=&quot;&quot;
    else
        profilename_opt=&quot;--profilename=$PROFILENAME&quot;
    fi
    /usr/sbin/rhnreg_ks --force --activationkey &quot;$ACTIVATION_KEYS&quot; $profilename_opt
    [ -n &quot;$files&quot; ] &amp;&amp; rm -f $files
    [ -n &quot;$directories&quot; ] &amp;&amp; rmdir $directories
    echo
    echo &quot;*** this system should now be registered, please verify ***&quot;
    echo
else
    echo &quot;* explicitly not registering&quot;
fi

echo
echo &quot;OTHER ACTIONS&quot;
echo &quot;------------------------------------------------------&quot;
if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
    if [ &quot;$INSTALLER&quot; == zypper ] ; then
        echo &quot;zypper --non-interactive up zypper zypp-plugin-spacewalk; rhn-profile-sync; zypper --non-interactive up (conditional)&quot;
    elif [ &quot;$INSTALLER&quot; == yum ] ; then
        echo &quot;yum -y upgrade yum yum-rhn-plugin; rhn-profile-sync; yum upgrade (conditional)&quot;
    else
        echo &quot;up2date up2date; up2date -p; up2date -uf (conditional)&quot;
    fi
else
    if [ &quot;$INSTALLER&quot; == zypper ] ; then
        echo &quot;zypper --non-interactive up zypper zypp-plugin-spacewalk; rhn-profile-sync&quot;
    elif [ &quot;$INSTALLER&quot; == yum ] ; then
        echo &quot;yum -y upgrade yum yum-rhn-plugin; rhn-profile-sync&quot;
    else
        echo &quot;up2date up2date; up2date -p&quot;
    fi
fi
echo &quot;but any post configuration action can be added here.  &quot;
echo &quot;------------------------------------------------------&quot;
if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
    echo &quot;* completely updating the box&quot;
else
    echo &quot;* ensuring $INSTALLER itself is updated&quot;
fi
if [ &quot;$INSTALLER&quot; == zypper ] ; then
    zypper ref -s
    zypper --non-interactive up zypper zypp-plugin-spacewalk
    if [ -x /usr/sbin/rhn-profile-sync ] ; then
        /usr/sbin/rhn-profile-sync
    else
        echo &quot;Error updating system info in SUSE Manager Server.&quot;
        echo &quot;    Please ensure that rhn-profile-sync in installed and rerun it.&quot;
    fi
    if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
        zypper --non-interactive up
    fi
elif [ &quot;$INSTALLER&quot; == yum ] ; then
    /usr/bin/yum -y upgrade yum yum-rhn-plugin
    if [ -x /usr/sbin/rhn-profile-sync ] ; then
        /usr/sbin/rhn-profile-sync
    else
        echo &quot;Error updating system info in SUSE Manager Server.&quot;
        echo &quot;    Please ensure that rhn-profile-sync in installed and rerun it.&quot;
    fi
    if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
        /usr/bin/yum -y upgrade
    fi
else
    /usr/sbin/up2date up2date
    /usr/sbin/up2date -p
    if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
        /usr/sbin/up2date -uf
    fi
fi
echo &quot;-bootstrap complete-&quot;</screen>
</appendix>
