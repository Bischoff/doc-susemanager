<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp.systems.management">
  <title>Server and Client Contact Methods</title>

  <sect1>
    <title>Selecting a Contact Method</title>
    <para>&susemgr; &productnumber3; provides several methods for communication between client and
      server. These methods allow fetching of packages and for providing updates. Which one you
      select will be heavily dependant on your network infrastructure. The following sections
      provide a good starting point for selecting a method which best suits your network
      environment.</para>
  </sect1>
  <sect1 xml:id="bp.contact.methods.rhnsd">
    <title>rhnsd</title>
    <para/>

  </sect1>

  <sect1 xml:id="bp.contact.methods.ssh.push">
    <title>SSH Push</title>
    <para>SSH Server Push is intended to be used in environments where your clients cannot reach the
      SUSE Manager server directly to regularly check in and, for example, fetch package updates. </para>

    <para>In detail this feature enables a SUSE Manager located within an internal network to manage
      clients located on a DMZ. Due to security reasons, no system on a DMZ is authorized to open a
      connection to the internal network and therefore your &susemgr; server. The solution is to
      configure SSH Server Push which utilizes an encrypted tunnel from your &susemgr; server on the
      internal network to the clients located on the DMZ. After all actions/events are executed, the
      tunnel is closed. The server will contact the clients in regular intervals (using SSH) to
      check in and perform all actions and events.</para>

    <sect2 xml:id="bp.contact.methods.ssh.push.requirements">
      <title>Configuring the Server for SSH Push</title>
      <para>For tunneling connections via <abbrev>SSH</abbrev>, two available port numbers are
        required, one for tunneling <abbrev>HTTP</abbrev> and the second for tunneling via
          <abbrev>HTTPS</abbrev> (<abbrev>HTTP</abbrev> is only necessary during the registration
        process). The port numbers used by default are 1232 and 1233. To overwrite these, add two
        custom port numbers greater than 1024 to <replaceable>/etc/rhn/rhn.conf</replaceable> like
        this: <screen>ssh_push_port_http = high port 1
ssh_push_port_https = high port 2</screen>
      </para>



      <para>If you would like your clients to be contacted via their hostnames instead of an IP
        address, set the following option: <screen>ssh_push_use_hostname = true</screen></para>

      <para>It is also possible to adjust the number of threads to use for opening client
        connections in parallel. By default two parallel threads are used. Set
          <systemitem>taskomatic.ssh_push_workers</systemitem> in
          <replaceable>/etc/rhn/rhn.conf</replaceable> like
        this:<screen>taskomatic.ssh_push_workers = number</screen></para>
    </sect2>

    <sect2>
      <title>Using <abbrev>sudo</abbrev> with SSH Push </title>
      <para>For security reasons you may desire to use <abbrev>sudo</abbrev> and SSH into a system
        as a user other than root. The following procedure will guide you through configuring sudo
        for use with ssh push. <note>
          <title>sudo Requirements</title>
          <para>The packages <filename>spacewalk-taskomatic >= 2.1.165.19</filename> and
              <filename>spacewalk-certs-tools => 2.1.6.7</filename> are required for using sudo with
            SSH Push.</para>
        </note>
      </para>

      <procedure>
        <title>Configuring sudo</title>

        <step>
          <para>Set the following parameter on the server located in:
              <replaceable>/etc/rhn/rhn.conf</replaceable><screen>ssh_push_sudo_user = user</screen>
            The server will now use sudo to ssh as the configured user.</para>
        </step>

        <step>
          <para>You must now create the user specified in step 1 above on each of your clients and
            the following parameters should be commented out within your clients
              <filename>/etc/sudoers</filename>
            file:<screen> #Defaults targetpw   # ask for the password of the target user i.e. root
 #ALL    ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!</screen></para>
        </step>

        <step>
          <para>Now add the following line beneath the <parameter>## User privilege
              specification</parameter> section of each clients <filename>sudoers</filename>
            file:<screen>user ALL=(ALL) NOPASSWD:/usr/sbin/rhn_check</screen></para>
        </step>

        <step>
          <para>On each client add the following two lines to the
              <filename>/home/user/.bashrc</filename>
            file.<screen> PATH=$PATH:/usr/sbin
 export PATH</screen></para>
        </step>

      </procedure>

    </sect2>
    <sect2>
      <title>Client Registration</title>
      <para>As your clients cannot reach the server, you will need to register your clients from the
        server. A tool for performing registration of clients from the server is included with
        &susemgr; &productnumber3; called <filename>mgr-ssh-push-init</filename> This tool expects a
        client's hostname or IP address as well as the path to a valid bootstrap script located in
        the servers filesystem for registration as parameters.</para>
      <note>
        <title>Specifying Ports for Tunneling before Registering Clients</title>
        <para>The ports for tunneling need to be specified before the first client is registered.
          Clients already registered before changing the port numbers, must be registered again,
          otherwise the server will not be able to contact them anymore.</para>
      </note>
      <para><screen><prompt>#</prompt> mgr-ssh-push-init --client client --register /srv/www/htdocs/pub/bootstrap/bootstrap_script --tunnel</screen></para>

    </sect2>
  </sect1>

  <sect1 xml:id="bp.contact.methods.osad">
    <title>osad</title>
    <para>Osad is one of the available contact methods for server/client communication. The default
      contact method between &susemgr; and its clients is <systemitem>rhnsd</systemitem>. When using
      the <systemitem>rhnsd</systemitem> daemon normally you could wait up to 4 hours before your
      clients execute a scheduled action. Depending on your network environment
        <systemitem>rhnsd</systemitem> may not suit your needs. You can configure and use osad with
      registered client systems.<systemitem>osad</systemitem> allows for real-time completion of
      scheduled actions and consists of three components: </para>
    <formalpara>
      <title>osad</title>
      <para>A client-side service that responds to pings and runs <systemitem>rhn_check</systemitem>
        when directed by the <systemitem>osa-dispatcher</systemitem> running on &susemgr;.</para>
    </formalpara>
    <formalpara>
      <title>osa-dispatcher</title>
      <para>A service running on &susemgr; that checks the database to determine if a client running
          <systemitem>osad</systemitem> needs to be pinged or is required to run
          <systemitem>rhn_check</systemitem>, then sends a message telling the client to do
        so.</para>
    </formalpara>
    <formalpara>
      <title>jabberd</title>
      <para>A daemon that runs on &susemgr; and uses the <systemitem>XMPP</systemitem> protocol.
          <systemitem>osad</systemitem> and <systemitem>osa-dispatcher</systemitem> both connect to
        this daemon. <systemitem>jabberd</systemitem> also handles authentication when using
        osad.</para>
    </formalpara>
    <para>
      <itemizedlist>
        <title>How it Works</title>
        <listitem>
          <para>On &susemgr; the <systemitem>osa-dispatcher</systemitem> periodically runs a query
            which checks to see if there are any clients overdue for a ping.</para>
        </listitem>
        <listitem>
          <para>If an overdue client is found, a message is sent via
              <systemitem>jabberd</systemitem> to the <systemitem>osad</systemitem> instances
            running on all clients registered with your &susemgr; server. The
              <systemitem>osad</systemitem> instances respond to the ping through the
              <systemitem>jabberd</systemitem> deamon running in the background on your &susemgr;
            Server. <systemitem>osa-dispatcher</systemitem> receives the response, and marks the
            client as 'online'.</para>
        </listitem>
        <listitem>
          <para>If <systemitem>osa-dispatcher</systemitem> fails to receive a response from an
              <systemitem>osad</systemitem> instance in a certain amount of time, the client is
            marked 'offline'. </para>
        </listitem>
        <listitem>
          <para><systemitem>osa-dispatcher</systemitem> also periodically executes a select on the
            database to check all &susemgr; clients which have actions that need to be executed. If
            an action is found, a message is sent through <systemitem>jabberd</systemitem> to
              <systemitem>osad</systemitem> which then executes <systemitem>rhn_check</systemitem>
            on the client. <systemitem>rhn_check</systemitem> then takes over performing the actual
            action.</para>
        </listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Configuring and Enabling osad</title>
      <para> The following procedure enables use of osad with &susemgr;.</para>
      <important>
        <title>Enabling SSL</title>
        <para>For this communication method to work SSL is mandatory. If SSL certificates are not
          available, the daemon on your client systems will fail to connect. Make sure your firewall
          rules allow for the required ports. See: <xref linkend="tab.install.ports.server"/></para>
      </important>
      <procedure>
        <title>Enabling osa-dispatcher on &susemgr; and osad on Clients</title>
        <step>
          <para>On your &susemgr; server use the following command as root to start the
              <systemitem>osa-dispatcher</systemitem>
            service:<screen><command>rcosa-dispatcher start</command></screen></para>
        </step>
        <step>
          <para>Install the <systemitem>osad</systemitem> package on all client systems to allow
            communication to the osa-dispatcher on &susemgr;. The package can be found in the
              <replaceable>Tools child channel</replaceable>.<warning>
              <title>osad conflicts with osa-dispatcher</title>
              <para>Do <emphasis>not</emphasis> install the <systemitem>osad</systemitem> client
                package on your &susemgr; server. The <systemitem>osad</systemitem> client service
                conflicts with <systemitem>osa-dispatcher</systemitem> server package.</para>
            </warning></para>
        </step>
        <step>
          <para>Once osad has been installed, start the service on your client systems as root using
            the command:<screen><command>rcosad start</command></screen>Like other services,
            rcosa-dispatcher and rcosad accept stop, restart, and status commands as well.</para>
        </step>
      </procedure>
      <para>This feature depends on the client systems recognizing the fully qualified domain name
        (FQDN) of SUSE Manager. The client systems use this name and not the IP address of the
        server when configuring the YaST Online Update.</para>
      <para>Now when you schedule actions from SUSE Manager on any of the osad enabled systems, the
        task will be carried out immediately rather than after a client checks in using
          <systemitem>rhnsd</systemitem>.</para>
    </sect2>
    <sect2>
      <title>osad Configuration and Logging Files</title>
      <para>Each component of osad is configured via local configuration files. Changing default
        parameters is not recommended. For reference the configuration files and logs are found in
        the following locations.</para>
      <formalpara>
        <title>osa-dispatcher</title>
        <para>osa-dispatcher is configured via the <replaceable>rhn.conf</replaceable> file located
          on the &susemgr; at:<screen><replaceable>/etc/rhn/rhn.conf</replaceable></screen> All
          parameters for configuring osa-dispatcher are located under the section heading:
          <screen><replaceable># OSA configuration #</replaceable>.</screen></para>
      </formalpara>
      <formalpara>
        <title>osad</title>
        <para>osad configuration files are located on all &susemgr; clients at:
          <screen><replaceable>/etc/sysconfig/rhn/osad.conf
/etc/syseconfig/rhn/up2date</replaceable></screen>
          For troubleshooting <systemitem>osad</systemitem> the log file is located in:
          <screen><replaceable>/var/log/osad</replaceable></screen> The location of this log file is
          configurable via the <replaceable>osad.conf</replaceable> file.</para>
      </formalpara>
      <formalpara>
        <title>jabberd</title>
        <para>Configuration of jabberd goes beyond the scope of this document. The jabberd log file
          is located at:<screen><replaceable>/var/log/messages</replaceable></screen></para>
      </formalpara> <para>This concludes osad configuration and logging.</para></sect2>
  </sect1>

  <sect1 xml:id="bp.contact.methods.salt">
    <title>Salt</title>
    <para/>
  </sect1>


</chapter>
