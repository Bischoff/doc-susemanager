<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp.systems.management">
  <title>Contact Methods</title>

  <sect1>
    <title>Selecting a Contact Method</title>
    <para>&susemgr; provides several methods for communication between client and server. All
      commands your &susemgr; server tells its clients to do will be routed through the configured
      contact method. Which one you select will be heavily dependant on your network infrastructure.
      The following sections provide a good starting point for selecting a method which best suits
      your network environment.</para>
  </sect1>
  <sect1 xml:id="bp.contact.methods.rhnsd">
    <title>The rhnsd (Default)</title>
    <para>The SUSE Manager daemon (rhnsd) runs on client systems and periodically connects with SUSE
      Manager to check for new updates and notifications. The daemon, which runs in the background,
      is typically started by the <systemitem>rcrhnsd</systemitem> initialization script. By default
      it will check every 4 hours for new actions, therefore it may take some time for your clients
      to begin updating after actions have been scheduled for them.</para>

    <para>To check for updates, <systemitem>rhnsd</systemitem> runs the external
        <systemitem>mgr_check</systemitem> program located in <replaceable>/usr/sbin/</replaceable>.
      This is a small application that establishes the network connection to SUSE Manager. The SUSE
      Manager daemon does not listen on any network ports or talk to the network directly. All
      network activity is done via the <systemitem>mgr_check</systemitem> utility. </para>
    <warning>
      <title>Auto accepting (EULAs)</title>
      <para> When new packages or updates are installed on the client via SUSE Manager, any licenses
        (EULAs) requiring agreement before installation are automatically accepted.</para>
    </warning>

    <para>This figure provides an overview of the default <systemitem>rhnsd</systemitem> process
      path. All items left of the <systemitem>Python XMLRPC server</systemitem> block represent
      processes running on a &susemgr; client.</para>
    <figure>
      <title>rhnsd Contact Method</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="rhnsd.png" width="80%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>Configuring &susemgr; rhnsd Daemon</title>
      <para>The SUSE Manager daemon can be configured by editing the following configuration file:
        <screen><replaceable>/etc/sysconfig/rhn/rhnsd</replaceable></screen>This is the
        configuration file the rhnsd initialization script uses. An important parameter for the
        daemon is its check-in frequency. The default interval time is four hours (240 minutes). If
        you modify the configuration file, you must as <systemitem>root</systemitem> restart the
        daemon with the command <command>rcrhnsd restart</command>. </para>
      <important>
        <title>Minimum Allowed Check-in Parameter</title>
        <para>The minimum allowed time interval is one hour (60 minutes). If you set the interval
          below one hour, it will default back to the default of 4 hours (240 minutes). </para>
      </important>
    </sect2>
    <sect2>
      <title>Viewing rhnsd Daemon Status</title>
      <para>You can view the status of rhnsd by typing the command <command>rcrhnsd status</command>
        as <systemitem>root</systemitem>.</para>
    </sect2>

  </sect1>

  <sect1 xml:id="bp.contact.methods.ssh.push">
    <title>SSH Push</title>
    <para>SSH Server Push is intended to be used in environments where your clients cannot reach the
      SUSE Manager server directly to regularly check in and, for example, fetch package updates. </para>

    <para>In detail this feature enables a SUSE Manager located within an internal network to manage
      clients located on a DMZ. Due to security reasons, no system on a DMZ is authorized to open a
      connection to the internal network and therefore your &susemgr; server. The solution is to
      configure SSH Server Push which utilizes an encrypted tunnel from your &susemgr; server on the
      internal network to the clients located on the DMZ. After all actions/events are executed, the
      tunnel is closed. The server will contact the clients in regular intervals (using SSH) to
      check in and perform all actions and events.</para>
    <important>
      <title>SSH Push Unsupported Actions</title>
      <para>Certain actions are currently not supported on scheduled clients which are managed via
        SSH push. This includes the re-installation of a system using the provisioning module.
        Furthermore, image deployments using SUSE Studio will work only when the vhost is permitted
        to directly connect to the SUSE Studio image store and download the required images. </para>
    </important>
    <para>The following figure provides an overview of the ssh push process path. All items left of
      the <systemitem>Taskomatic</systemitem> block represent processes running on a &susemgr;
      client.</para>
    <figure>
      <title>ssh Push Contact Method</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="sshpush.png" width="80%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <sect2 xml:id="bp.contact.methods.ssh.push.requirements">
      <title>Configuring the Server for SSH Push</title>
      <para>For tunneling connections via <abbrev>SSH</abbrev>, two available port numbers are
        required, one for tunneling <abbrev>HTTP</abbrev> and the second for tunneling via
          <abbrev>HTTPS</abbrev> (<abbrev>HTTP</abbrev> is only necessary during the registration
        process). The port numbers used by default are 1232 and 1233. To overwrite these, add two
        custom port numbers greater than 1024 to <replaceable>/etc/rhn/rhn.conf</replaceable> like
        this: <screen>ssh_push_port_http = high port 1
ssh_push_port_https = high port 2</screen>
      </para>



      <para>If you would like your clients to be contacted via their hostnames instead of an IP
        address, set the following option: <screen>ssh_push_use_hostname = true</screen></para>

      <para>It is also possible to adjust the number of threads to use for opening client
        connections in parallel. By default two parallel threads are used. Set
          <systemitem>taskomatic.ssh_push_workers</systemitem> in
          <replaceable>/etc/rhn/rhn.conf</replaceable> like
        this:<screen>taskomatic.ssh_push_workers = number</screen></para>
    </sect2>

    <sect2>
      <title>Using <abbrev>sudo</abbrev> with SSH Push </title>
      <para>For security reasons you may desire to use <abbrev>sudo</abbrev> and SSH into a system
        as a user other than root. The following procedure will guide you through configuring sudo
        for use with ssh push. <note>
          <title>sudo Requirements</title>
          <para>The packages <filename>spacewalk-taskomatic >= 2.1.165.19</filename> and
              <filename>spacewalk-certs-tools => 2.1.6.7</filename> are required for using sudo with
            SSH Push.</para>
        </note>
      </para>

      <procedure>
        <title>Configuring sudo</title>

        <step>
          <para>Set the following parameter on the server located in:
              <replaceable>/etc/rhn/rhn.conf</replaceable><screen>ssh_push_sudo_user = user</screen>
            The server will now use sudo to ssh as the configured user.</para>
        </step>

        <step>
          <para>You must now create the user specified in step 1 above on each of your clients and
            the following parameters should be commented out within your clients
              <filename>/etc/sudoers</filename>
            file:<screen> #Defaults targetpw   # ask for the password of the target user i.e. root
 #ALL    ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!</screen></para>
        </step>

        <step>
          <para>Now add the following line beneath the <parameter>## User privilege
              specification</parameter> section of each clients <filename>sudoers</filename>
            file:<screen>user ALL=(ALL) NOPASSWD:/usr/sbin/mgr_check</screen></para>
        </step>

        <step>
          <para>On each client add the following two lines to the
              <filename>/home/user/.bashrc</filename>
            file.<screen> PATH=$PATH:/usr/sbin
 export PATH</screen></para>
        </step>

      </procedure>

    </sect2>
    <sect2>
      <title>Client Registration</title>
      <para>As your clients cannot reach the server, you will need to register your clients from the
        server. A tool for performing registration of clients from the server is included with
        &susemgr; &productnumber3; called <filename>mgr-ssh-push-init</filename> This tool expects a
        client's hostname or IP address as well as the path to a valid bootstrap script located in
        the servers filesystem for registration as parameters.</para>

      <important>
        <title>Specifying Ports for Tunneling before Registering Clients</title>
        <para>The ports for tunneling need to be specified before the first client is registered.
          Clients already registered before changing the port numbers, must be registered again,
          otherwise the server will not be able to contact them anymore.</para>
      </important>

      <note>
        <title>mgr-ssh-push-init Disables rhnsd</title>
        <para>The <replaceable>mgr-ssh-push-init</replaceable> disables the rhnsd daemon which
          normally checks clients for updates every 4 hours. Your clients cannot reach the server
          without using ssh push contact method therefore the <systemitem>rhnsd</systemitem> daemon
          is disabled.</para>
      </note>

      <para>For registration of systems which should be managed via the ssh push tunnel contact
        method, it is required to use an activation key that is configured to use this method.
        Normal <systemitem>ssh push</systemitem> is unable to reach the server. For managing
        activation keys see: <link linkend="bp.key.managment">Activation Key
        Management</link></para>
      <para>Run the following command as root on the server to register a client:
        <screen><prompt>#</prompt> mgr-ssh-push-init --client client --register /srv/www/htdocs/pub/bootstrap/bootstrap_script --tunnel</screen></para>


      <para>To enable a client to be managed using Push via SSH (without tunneling), the same script
        may be used. Registration is optional since it can also be done from within the client in
        this case. Note that <systemitem>mgr-ssh-push-init</systemitem> will also automatically
        generate the necessary SSH key pair if it does not yet exist on the server:
        <screen><prompt>#</prompt> mgr-ssh-push-init --client client --register bootstrap_script</screen></para>


      <para>When using the Push via SSH tunnel contact method, please note that the client is
        configured to connect &susemgr; via the high ports mentioned above (see
        /etc/sysconfig/rhn/up2date). In other words, tools like rhn_check and zypper will need an
        active SSH session with the proper port forwarding options in order to access the SUSE
        Manager API. To verify the Push via SSH tunnel connection manually, you can run e.g. this on
        the SUSE Manager
        server:<screen><prompt>#</prompt> ssh -i /root/.ssh/id_susemanager -R high port: susemanager :443 client zypper ref</screen>
      </para>

    </sect2>
    <sect2 xml:id="bp.contact.methods.ssh.push.api.support">
      <title>API Support for SSH Push</title>
      <para>The contact method to be used for managing a server can also be modified via the API.
        The following example code (python) shows how to set a system's contact method to
        'ssh-push'. Available valid values are: <itemizedlist>
          <listitem>
            <para>'default' (pull)</para>
          </listitem>
          <listitem>
            <para>'ssh-push'</para>
          </listitem>
          <listitem>
            <para>'ssh-push-tunnel'</para>
          </listitem>
        </itemizedlist></para>
      <screen>client = xmlrpclib.Server(SUMA_HOST + "/rpc/api", verbose=0)
key = client.auth.login(SUMA_LOGIN, SUMA_PASSWORD)
client.system.setDetails(key, 1000012345, {'contact_method' : 'ssh-push'})</screen>

      <note>
        <title>Migration and Management via SSH Push</title>
        <para>When a system should be migrated and managed using SSH push, it requires setup using
          the <systemitem>mgr-ssh-push-init</systemitem> script before the server can connect via
          SSH. This separate command requires human interaction to install the server's SSH key onto
          the managed client (root password). The following procedure illustrates how to migrate an
          already registered system: </para>
      </note>

      <procedure>
        <title>Migrate Registered Systems</title>
        <step>
          <para>Setup the client using the <systemitem>mgr-ssh-push-init</systemitem> script
            (without --register)</para>
        </step>
        <step>
          <para> Change the client's contact method to 'ssh-push' or 'ssh-push-tunnel' respectively
            (via API or web UI)</para>
        </step>
      </procedure>
      <para>Existing activation keys can also be edited via API to use the SSH push contact method
        for clients registered with these keys: </para>
      <screen><command>client.activationkey.setDetails(key, '1-mykey', {'contact_method' : 'ssh-push'})</command></screen>
    </sect2>
    <sect2 xml:id="bp.contact.methods.ssh.push.proxy.support">
      <title>Proxy Support with SSH Push</title>
      <para>It is possible to use SSH push to manage systems that are connected to the SUSE Manager
        server via a proxy. To register a system, run <systemitem>mgr-ssh-push-init</systemitem> on
        the proxy system for each client you wish to register. Update your proxy with the latest
        packages to ensure the registration tool is available. It is necessary to copy the ssh key
        to your proxy. This can be achieved by executing the following command from the
        server:</para>
      <screen><prompt>#</prompt><command> mgr-ssh-push-init --client &lt;proxy&gt;</command></screen>
    </sect2>
  </sect1>

  <sect1 xml:id="bp.contact.methods.osad">
    <title>osad</title>
    <para>The default contact method between &susemgr; and its clients is
        <systemitem>rhnsd</systemitem>. When using the <systemitem>rhnsd</systemitem> daemon the
      server will check every 4 hours and then execute a scheduled action on clients. Depending on
      your network environment <systemitem>rhnsd</systemitem> may not suit your requirements.
      Alternatively you may configure osad for use with registered client systems enabling immediate
      execution of scheduled actions. osad consists of three components: </para>
    <formalpara>
      <title>osad</title>
      <para>A client-side service that responds to pings and runs <systemitem>mgr_check</systemitem>
        when directed by the <systemitem>osa-dispatcher</systemitem> running on &susemgr;.</para>
    </formalpara>
    <formalpara>
      <title>osa-dispatcher</title>
      <para>A service running on &susemgr; that checks the database to determine if a client running
          <systemitem>osad</systemitem> needs to be pinged or is required to run
          <systemitem>mgr_check</systemitem>, then sends a message telling the client to do
        so.</para>
    </formalpara>
    <formalpara>
      <title>jabberd</title>
      <para>A daemon that runs on &susemgr; and uses the <systemitem>XMPP</systemitem> protocol.
          <systemitem>osad</systemitem> and <systemitem>osa-dispatcher</systemitem> both connect to
        this daemon. <systemitem>jabberd</systemitem> also handles authentication when using
        osad.</para>
    </formalpara>
    <para>The following figure represents the osad contact method. All items left of the
        <systemitem>osa-dispatcher</systemitem> block represent running processes on the
      client.</para>
    <figure>
      <title>osad Contact Method</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="osad.png" width="80%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      <itemizedlist>
        <title>How it Works</title>
        <listitem>
          <para>On &susemgr; the <systemitem>osa-dispatcher</systemitem> periodically runs a query
            which checks to see if there are any clients overdue for a ping.</para>
        </listitem>
        <listitem>
          <para>If an overdue client is found, a message is sent via
              <systemitem>jabberd</systemitem> to the <systemitem>osad</systemitem> instances
            running on all clients registered with your &susemgr; server. The
              <systemitem>osad</systemitem> instances respond to the ping through the
              <systemitem>jabberd</systemitem> deamon running in the background on your &susemgr;
            Server. <systemitem>osa-dispatcher</systemitem> receives the response, and marks the
            client as 'online'.</para>
        </listitem>
        <listitem>
          <para>If <systemitem>osa-dispatcher</systemitem> fails to receive a response from an
              <systemitem>osad</systemitem> instance in a certain amount of time, the client is
            marked 'offline'. </para>
        </listitem>
        <listitem>
          <para><systemitem>osa-dispatcher</systemitem> also periodically executes a select on the
            database to check all &susemgr; clients which have actions that need to be executed. If
            an action is found, a message is sent through <systemitem>jabberd</systemitem> to
              <systemitem>osad</systemitem> which then executes <systemitem>mgr_check</systemitem>
            on the client. <systemitem>mgr_check</systemitem> then takes over performing the actual
            action.</para>
        </listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Configuring and Enabling osad</title>
      <para> The following procedure enables use of osad with &susemgr;.</para>
      <important>
        <title>Enabling SSL</title>
        <para>For this communication method to work SSL is mandatory. If SSL certificates are not
          available, the daemon on your client systems will fail to connect. Make sure your firewall
          rules allow for the required ports. See: <xref linkend="tab.install.ports.server"/></para>
      </important>
      <procedure>
        <title>Enabling osa-dispatcher on &susemgr; and osad on Clients</title>
        <step>
          <para>On your &susemgr; server use the following command as root to start the
              <systemitem>osa-dispatcher</systemitem>
            service:<screen><command>rcosa-dispatcher start</command></screen></para>
        </step>
        <step>
          <para>Install the <systemitem>osad</systemitem> package on all client systems to allow
            communication to the osa-dispatcher on &susemgr;. The package can be found in the
              <replaceable>Tools child channel</replaceable>.<warning>
              <title>osad conflicts with osa-dispatcher</title>
              <para>Do <emphasis>not</emphasis> install the <systemitem>osad</systemitem> client
                package on your &susemgr; server. The <systemitem>osad</systemitem> client service
                conflicts with <systemitem>osa-dispatcher</systemitem> server package.</para>
            </warning></para>
        </step>
        <step>
          <para>Once osad has been installed, start the service on your client systems as root using
            the command:<screen><command>rcosad start</command></screen>Like other services,
            rcosa-dispatcher and rcosad accept stop, restart, and status commands as well.</para>
        </step>
      </procedure>
      <para>This feature depends on the client systems recognizing the fully qualified domain name
        (FQDN) of SUSE Manager. The client systems use this name and not the IP address of the
        server when configuring the YaST Online Update.</para>
      <para>Now when you schedule actions from SUSE Manager on any of the osad enabled systems, the
        task will be carried out immediately rather than after a client checks in using
          <systemitem>rhnsd</systemitem>.</para>
    </sect2>
    <sect2>
      <title>osad Configuration and Logging Files</title>
      <para>Each component of osad is configured via local configuration files. Changing default
        parameters is not recommended. For reference the configuration files and logs are found in
        the following locations.</para>
      <formalpara>
        <title>osa-dispatcher</title>
        <para>osa-dispatcher is configured via the <replaceable>rhn.conf</replaceable> file located
          on the &susemgr; at:<screen><replaceable>/etc/rhn/rhn.conf</replaceable></screen> All
          parameters for configuring osa-dispatcher are located under the section heading:
          <screen><replaceable># OSA configuration #</replaceable>.</screen></para>
      </formalpara>
      <formalpara>
        <title>osad</title>
        <para>osad configuration files are located on all &susemgr; clients at:
          <screen><replaceable>/etc/sysconfig/rhn/osad.conf
/etc/syseconfig/rhn/up2date</replaceable></screen>
          For troubleshooting <systemitem>osad</systemitem> the log file is located in:
          <screen><replaceable>/var/log/osad</replaceable></screen> The location of this log file is
          configurable via the <replaceable>osad.conf</replaceable> file.</para>
      </formalpara>
      <formalpara>
        <title>jabberd</title>
        <para>Configuration of jabberd goes beyond the scope of this document. The jabberd log file
          is located at:<screen><replaceable>/var/log/messages</replaceable></screen></para>
      </formalpara>
      <para>This concludes osad configuration and logging.</para>
    </sect2>
  </sect1>

  <!-- TODO: ADD this once team has fully established a working method <sect1 xml:id="bp.contact.methods.salt">
    <title>Salt</title>
    <para/>
  </sect1> -->


</chapter>
