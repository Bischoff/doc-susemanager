<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp.key.managment">
  <title>Activation Key Management</title>

  <sect1>
    <title>What's Covered Here?</title>
    <para/>

  </sect1>

  <sect1>
    <title>What are Activation Keys?</title>
    <para>An <literal>activation key</literal> in &susemgr; is a group of settings with a label. You
      can apply all settings associated with an activation key by adding its label as a parameter to
      a bootstrap script. Under normal operating conditions best practices suggest using an
      activation key label always in combination with a bootstrap script.</para>
    <para>An activation key can specify:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>Channel Assignment</para>
        </listitem>
        <listitem>
          <para>System Types (Traditionally called Add-on Entitlements)</para>
        </listitem>
        <listitem>
          <para>Contact Method</para>
        </listitem>
        <listitem>
          <para>Configuration Files</para>
        </listitem>
        <listitem>
          <para>Packages to be Installed</para>
        </listitem>
        <listitem>
          <para>System Group Assignment</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>So what do activation keys do exactly? Activation keys alone do nothing. The are just a
      collection of settings which have been given a label that is added to a bootstrap script. When
      the bootstrap script is executed all settings associated with the label are applied to the
      system the bootstrap script is run on.</para>
  </sect1>

  <sect1>
    <title>Provisioning and Configuration</title>
    <para/>
    <figure>
      <title>Provisioning and Configuration Overview</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="provision-config-keys.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1>
    <title>Activation Keys Best Practices</title>
    <para>There are a few important concepts which should be kept in mind when creating activation
      keys. The following sections provide insight when creating and naming your activation
      keys.</para>
    <sect2>
      <title>Key Label Naming</title>
      <para> One of the most important things to consider during activation key creation is label
        naming. Creating simple names which are associated with your organization's infrastructure
        will make it easier for you when performing more complex operations. When naming key labels
        keep the following in mind:<itemizedlist>
          <listitem>
            <para>OS naming(mandatory): Keys should always refer to the OS they provide settings
              for</para>
          </listitem>
          <listitem>
            <para>Architecture naming(recommended): Unless your company is running on one
              architecture, for example x86_64, then providing labels with an architecture type is a
              good idea.</para>
          </listitem>
          <listitem>
            <para>Server type naming: What is, or what will this server be used for?</para>
          </listitem>
          <listitem>
            <para>Location naming: Where is the server located? Room, building or department?
            </para>
          </listitem>
          <listitem>
            <para>Date naming: Maintenance windows, quarter, etc.</para>
          </listitem>
          <listitem>
            <para>Custom naming: What naming scheme suits your organizations needs?</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>Example activation key label names:</para>
      <screen>sles12-sp1-web_server-room_129-x86_64</screen>
      <screen>sles12-sp2-test_packages-blg_502-room_21-i586</screen>
    </sect2>
    <sect2>

      <title>Channels to be Included</title>
      <para>When creating activation keys you also need to keep in mind which channels (software
        sources) will be associated with it. For example:</para>
      <important>
        <title>Specific Base Channel Assignment</title>
        <para>OS keys must have a specific base channel assigned to it for example:
            <literal>SLES12-SP1-Pool-x86_64</literal> If this is not the case &susemgr; will be
          unable to assign specific stages. All non-OS keys must have the <replaceable>SUSE Manager
            Default </replaceable> as their base channel. Using the &susemgr; Default Base Channel
          is not recommended and may cause problems.</para>
      </important>
      <itemizedlist>
        <listitem>
          <para>Channels to be included:<itemizedlist>
              <listitem>
                <para>suse-manager-tools</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Typical packages to be included:<itemizedlist>
              <listitem>
                <para>osad(pushing tasks)<itemizedlist>
                    <listitem>
                      <para>Installs python-jabberpy and pyxml as dependencies</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem>
                <para> rhncfg-actions (Remote Command, Configuration Managment) <itemizedlist>
                    <listitem>
                      <para>Installs rhncfg and rhncfg-client as dependencies</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist>

    </sect2>
  </sect1>

  <sect1>
    <title>Combining Activation Keys</title>
    <para>You can combine activation keys when executing the bootstrap script on your clients.
      Combining keys allows for more control on what is installed on your systems and reduces
      duplication of keys for large complex environments.</para>
    <figure>
      <title>Combining Activation Keys</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="combine-keys.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>Combining Activation Keys 2</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="combine-keys2.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1>
    <title>Using Activation Keys and Bootstrap with Traditional Clients (Non-Salt) </title>
    <para>Create the initial bootstrap script template from the command line on the &susemgr; server
      with:<screen language="bash"><prompt>#</prompt> mgr-bootstrap</screen> This command will
      generate the bootstrap script and place them in
        <replaceable>/srv/www/htdocs/pub/bootstrap</replaceable>.</para>

    <para> Alternatively you may use the WebUI to create your bootstrap script template. </para>

    <para>Create the activation keys you need from command line with: </para>

    <para>Alternatively use the WebUI to create your keys. From the WebUI proceed to:<menuchoice>
        <guimenu>Overview</guimenu>
        <guimenu>Tasks</guimenu>
        <guimenu>Manage Activation Keys</guimenu>
      </menuchoice></para>
  </sect1>

  <sect1>
    <title>Using Activation Keys when Registering salt-minions</title>
    <!-- ADD TO Activation Keys PAGE: 1. We do not support specifying an activation key on the minion on-boarding page
     2. Act keys used with salt minions are the same as used with a traditional system and may be shared
     3. Equiv specifying key in traditional bootstrap is to put the key in the grain of the minion
     4. After accepting minion key all settings specified in the grain and associated with the key will be applied.
  -->
    <para> With the addition of Salt to &susemgr; &productnumber3; states should now be considered
      best practice over the more traditional way of combining activation keys. Although states
      allow for even more powerful configuration options you will still need to place the new system
      within the correct group so the correct states will be applied to the system. Using an
      activation key will place the system within the correct group automatically. There are two
      places you can specify an activation key for use by a salt-minion:</para>
    <para>You may place the activation key within a custom grains file you will need to create
      located here:</para>
    <screen><prompt>#</prompt> etc/salt/grains</screen>
    <para> Or you may alternatively place the activation key grain within the minion configuration
      file located in:</para>
    <screen><prompt>#</prompt> etc/salt/minion</screen>

    <para>You should be aware of a few facts when working with Salt over traditional activation keys<itemizedlist>
        <listitem>
          <para>Currently we do not support specifying an activation key on the minion on-boarding
            page.</para>
        </listitem>
        <listitem>
          <para>Activation keys used with salt-minions are the same as those used with traditional
            systems and may be shared.</para>
        </listitem>
        <listitem>
          <para>The equivalent of specifying a key using the traditional bootstrap method is to
            place the desired key in the grain of a minion.</para>
        </listitem>
        <listitem>
          <para>Once a minion has been accepted either from the <menuchoice>
              <guimenu>Salt</guimenu>
              <guimenu>Onboarding</guimenu>
            </menuchoice> page located in the WebUI or from the command line, all configurations
            specified by the activation key placed within a salt grain will be applied. </para>
        </listitem>
        <listitem>
          <para>Currently you may only use one activation key when working with salt. You cannot
            combine them, despite this, salt states allow for even more control.</para>
        </listitem>
      </itemizedlist></para>
  </sect1>




</chapter>
