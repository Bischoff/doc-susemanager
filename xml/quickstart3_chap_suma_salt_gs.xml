<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="salt.gs.guide.introduction">
    <title>Getting Started with Salt</title>

    <sect1 xml:id="salt.gs.guide.intro">
        <title>Introduction</title>
        <para>This chapter provides an introduction to using the new salt features added in SUSE
            Manager 3. This chapter assumes you have completed all former sections within the
            Getting Started Guide. You should have a running SUSE Manager server and at least one
            on-boarded salt-minion to complete the following sections. If you find yourself stuck at
            any point refer to the official Salt getting started guide located at: <link
                xlink:href="https://docs.saltstack.com/en/getstarted/fundamentals/index.html"/>
            <tip>
                <title>Use More than One Minion</title>
                <para>Connecting two or more minions should be considered best practice during your
                    testing. This will allow you to target individual minions using Salt and
                    experiment with the power of its targeting features.</para>
            </tip> This guide doest not attempt to cover all that Salt has to offer. This guide is a
            primer for using Salt with SUSE Manager. For comprehensive Salt documentation, see:
                <link xlink:href="https://docs.saltstack.com/en/latest/contents.html"/>
        </para>

    </sect1>

    <sect1 xml:id="salt.gs.guide.testing.first.minion">
        <title>Understanding Salt Calls</title>
        <variablelist>
            <varlistentry>
                <term>Salt Calls</term>
                <listitem>
                    <para>A great place to start would be learning basic Salt calls. Salt calls are
                        defined by three main components:
                        <screen># salt '&lt;target>' &lt;function> [arguments]</screen></para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>Target</term>
                                <listitem>
                                    <para>Use the second component in a Salt call to define a target
                                        machine. Specify the minion or group of minions you would
                                        like to run a function on.</para>
                                    <para>
                                        <variablelist>

                                            <varlistentry>
                                                <term>General Targeting</term>
                                                <listitem>
                                                  <para>List available grains on all
                                                  minions:<screen># salt '*' grains.ls</screen></para>
                                                  <para>Ping a specific minion:</para>
                                                  <para><screen># salt 'web1.example.com' test.ping</screen></para>
                                                </listitem>
                                            </varlistentry>

                                            <varlistentry>
                                                <term>Glob Targeting</term>
                                                <listitem>
                                                  <para>Ping all minions using a domain:</para>
                                                  <para>
                                                  <screen># salt '*example.com' test.ping</screen>
                                                  </para>
                                                  <para>Display the OS name of all minions with the
                                                  label <literal>webserver</literal>:</para>

                                                  <para><screen># salt 'webserver*' grains.item oscodename</screen></para>
                                                </listitem>
                                            </varlistentry>

                                            <varlistentry>
                                                <term>List Targeting</term>
                                                <listitem>
                                                  <para>
                                                  <screen># salt -L 'webserver.example.com,db.example.com' test.ping</screen></para>
                                                </listitem>
                                            </varlistentry>

                                            <varlistentry>
                                                <term>Regular Expression Targeting</term>
                                                <listitem>
                                                  <para>You may use PCRE-compliant regular
                                                  expressions:</para>
                                                  <para>
                                                  <screen># salt -E '(?!web)' test.ping</screen>
                                                  </para>
                                                </listitem>
                                            </varlistentry>

                                            <varlistentry>
                                                <term>IP Address Targeting</term>
                                                <listitem>
                                                  <para>List minion IP addresses:</para>
                                                  <para>
                                                  <screen># salt '*' network.ip_addrs</screen>
                                                  </para>
                                                  <para>Ping a specific minion IP address:</para>
                                                  <para><screen># salt -S '172.31.60.74' test.ping</screen></para>
                                                  <para>Ping all minions on a subnet:<screen># salt -S 172.31.0.0/16 test.ping</screen><tip>
                                                  <title>Lookup a Subnet Using the ip
                                                  Command</title>
                                                  <para>You can use the ip command to find the
                                                  subnet mask in the format of
                                                  <literal>192.168.1.1/24</literal>:
                                                  <screen># ip -o -f inet addr show | awk '/scope global/ {print $4}'</screen></para>
                                                  </tip></para>

                                                </listitem>
                                            </varlistentry>

                                        </variablelist></para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>Function</term>
                                <listitem>
                                    <para>Once you have specified a target, provide the function you
                                        would like to call. Functions also accept arguments. These
                                        are space-delimited. For example: <screen>salt '*' cmd.run 'echo "Hello: $FIRST_NAME"' env='{FIRST_NAME: "John"}'</screen>
                                        <variablelist>
                                            <varlistentry>
                                                <term>Locating Additional Minion Functions</term>
                                                <listitem>
                                                  <para>Find more functions which can be called on
                                                  minions by running:
                                                  <screen>salt '*' sys.doc</screen> A full list of
                                                  callable functions are located here: <link
                                                  xlink:href="https://docs.saltstack.com/en/2015.8/ref/modules/all/index.html"
                                                  /></para>
                                                </listitem>
                                            </varlistentry>
                                        </variablelist></para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>Arguments</term>
                                <listitem>
                                    <para>Provides the extra data needed by a function you are
                                        calling. The command pkg.install requires an argument
                                        specifying a package to install. Yast2 has been selected for
                                        installation. For
                                        example:<screen>salt '*' pkg.install yast2</screen></para>
                                </listitem>
                            </varlistentry>
                        </variablelist></para>
                </listitem>
            </varlistentry>




        </variablelist>


    </sect1>

    <sect1>
        <title>Salt Terminology Overview</title>

        <variablelist>
            <varlistentry>
                <term>Grains</term>
                <listitem>
                    <para>Grains provide information about the underlying components of a minion.
                        For example: <literal>Operating system, IP addresses, network interfaces and
                            memory</literal>. </para>
                    <para>You can see what grains are available on your minions by listing them
                        using the <function>grains.ls</function>
                        module:<screen># salt '*' grains.ls</screen></para>
                    <para>List collected grain data by using the <function>grains.items</function>
                        module:<screen>salt '*' grains.items</screen></para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>

    <sect1>
        <title>Useful Salt Commands</title>
        <para>The following list provides several useful salt commands.</para>
        <variablelist>
            <varlistentry>
                <term>salt-run</term>
                <listitem>
                    <para>Print a list of all minions that are up:</para>
                    <para>
                        <screen># salt-run manage.up</screen>
                    </para>
                    <para>Print a list of all minions that are down:</para>
                    <para>
                        <screen># salt-run manage.down</screen>
                    </para>
                    <para>Print a list with the current status of all salt minions</para>
                    <para>
                        <screen># salt-run manage.status</screen>
                    </para>
                    <para>Check the version of salt running on the master and active minions</para>
                    <para>
                        <screen># salt-run manage.versions</screen>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>salt-cp</term>
                <listitem>
                    <para>Copies a file to a minion or set of minions.
                        <screen># salt-cp '*' foo.conf /root</screen> For more information see:
                            <link
                            xlink:href="https://docs.saltstack.com/en/latest/ref/cli/salt-cp.html"
                        /></para>
                </listitem>
            </varlistentry>
        </variablelist>

    </sect1>

    <sect1 xml:id="salt.gs.guide.salt.file.locations">
        <title>Salt File Locations and Structure</title>
        <para>The following screen describes Salt file structures and their locations used by the
            &susemgr; server. These files are listed in:
                <filename>/etc/salt/master.d/susemanager.conf</filename>
            <screen>#Configure different file roots

file_roots:
  base:
    - /usr/share/susemanager/salt    #Should not be touched by a user
    - /srv/susemanager/salt          #Should not be touched by a user
    - /srv/salt                      #Your custom states go here

# Configure different pillar roots

pillar_roots:
  base:
    - /usr/share/susemanager/pillar  #Should not be touched by a user
    - /srv/pillar                    #Custom pillars go here

# Extension modules path

extension_modules: /usr/share/susemanager/modules

# Master top configuration

master_tops:
  mgr_master_tops: True
</screen></para>

        <para>The following tips should be kept in mind when working with
                <filename>/etc/salt/master.d/susemanager.conf</filename><itemizedlist>
                <listitem>
                    <para>Files listed are searched in the order they appear.</para>
                </listitem>
                <listitem>
                    <para>The first file found is called.</para>
                </listitem>
            </itemizedlist></para>



        <sect2 xml:id="salt.gs.guide.salt.file.locations.file.roots">
            <title>file_roots</title>
            <para>&susemgr; as the salt-master reads its state data from three specific file root
                directories.</para>
            <variablelist>
                <varlistentry>
                    <term><filename>/usr/share/susemanager/salt</filename></term>
                    <listitem>
                        <para>This directory is created by &susemgr; and its content generated by
                            the following python module:
                            <screen>/usr/share/susemanager/modules/tops/mgr_master_tops.py                          </screen>
                            It is shipped and updated together with &susemgr; and includes
                            certificate setup and common state logic that will be applied to
                            packages and channels. This directory should not be touched by a
                            user.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>/srv/susemanager/salt</filename></term>
                    <listitem>
                        <para>This directory is created by &susemgr; and contains assigned channels
                            and packages for minions, groups and organizations. This file will be
                            overwritten and regenerated. A good analogy for this directory would be
                            the &susemgr; database translated into salt directives. This directory
                            should not be touch by a user.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>/srv/salt</filename></term>
                    <listitem>
                        <para>The directory <filename>/srv/salt</filename> is for your custom state
                            data, salt modules etc. &susemgr; does not touch or do anything with
                            this directory. However the state data placed here affects the Highstate
                            of minions and is merged with the result generated by &susemgr;. Place
                            your custom state data here.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>



        <sect2 xml:id="salt.gs.guide.salt.file.locations.pillar.roots">
            <title>pillar_roots</title>

            <para>&susemgr; as the salt-master reads its pillar data from two specific pillar root
                directories.</para>
            <variablelist>
                <varlistentry>
                    <term><filename>/usr/share/susemanager/pillar</filename></term>
                    <listitem>
                        <para>This directory is generated by &susemgr;. It is shipped and updated
                            together with &susemgr;. This directory should not be touched by a
                            user.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>/srv/pillar/</filename></term>
                    <listitem>
                        <para>This directory is for your custom pillar data. &susemgr; does not
                            touch or do anything with this directory. However the pillar data placed
                            here is merged with the pillar result created by &susemgr;.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
    </sect1>

    <sect1 xml:id="salt.gs.guide.creating.targeting.applying.states">
        <title>Creating and Applying States</title>
        <para/>

        <sect2 xml:id="salt.gs.guide.creating.targeting.applying.states.webui">
            <title>Using the WebUI</title>
            <para/>
        </sect2>

        <sect2 xml:id="salt.gs.guide.creating.targeting.applying.states.cli">
            <title> On the Command Line</title>
            <para/>
        </sect2>
    </sect1>

    <sect1 xml:id="salt.gs.guide.state.catalog">
        <title>Using the State Catalog</title>
        <para/>
    </sect1>


    <!-- More Advanced Section to be added later to BP 
       <sect1 xml:id="salt.gs.guide.apply.states.org.group.single.systems">
        <title>Applying States on an Organization, Group or a Single System</title>
        <para/>

        <sect2 xml:id="salt.gs.guide.apply.org.level">
            <title>Organization Level</title>
            <para/>
        </sect2>

        <sect2 xml:id="salt.gs.guide.apply.group.level">
            <title>Group Level</title>
            <para/>
        </sect2>

        <sect2 xml:id="salt.gs.guide.apply.single.level">
            <title>Single System Level</title>
            <para/>
        </sect2>
    </sect1>  -->




</chapter>
