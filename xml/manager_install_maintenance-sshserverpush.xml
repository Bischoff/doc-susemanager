<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:novdoc-profile.xsl" 
type="text/xml"
title="Profiling step"?>
<!DOCTYPE sect1 PUBLIC
"-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!--
     based on:
     http://wiki.novell.com/index.php/SUSE_Manager/SSHServerPush
     tracked here: bnc#813506
-->
<sect1 id="s1-maintenance-sshserverpush">
 <title>SSH Server Push</title><indexterm>
 <primary>SSH Server Push</primary></indexterm>
 <para>
  SSH Server Push is intended to be used in environments where clients
  cannot reach the &susemgr; server to regularly check in and, for
  example, fetch package updates. Therefore the server will
  contact the clients in regular intervals (using SSH) to perform all
  actions via an encrypted channel.
 </para>
 <para>
  This feature enables &susemgr; within the internal network to
  manage clients in the DMZ.  In such a scenario, for security reasons
  no system in the DMZ is allowed to open a connection into the
  internal network.  Instead <guimenu>SSH Server Push with tunnel</guimenu> initiates the
  tunnel from the internal network. Once all actions
  are performed, the tunnel will be closed again.
 </para>
 <sect2>
  <title>Configuring &susemgr; Server</title>

  <para>
   For tunneling connections via ssh, two available high port numbers (>
   1024) are needed, one for tunneling HTTP and another for tunneling
   HTTPS (while HTTP is only needed during the registration process). The port
   numbers used by default are 1232 and 1233. To overwrite
   these, add your values in <filename>/etc/rhn/rhn.conf</filename>
   like this:
  </para>

  <screen>ssh_push_port_http = <replaceable>high port 1</replaceable>
ssh_push_port_https = <replaceable>high port 2</replaceable></screen>

  <note>
   <title>Specifying Ports for Tunneling before Registering Clients</title>
   <para>
    The ports for tunneling need to be specified before the first client
    is registered.  Clients already registered before changing the port numbers,
    must be registered again, otherwise the server will not be able to
    contact them anymore.
   </para>
  </note>
   <para>
    In case  the clients should be contacted via their hostnames instead of their IP addresses, set the following option:
   </para>
 <screen>ssh_push_use_hostname = true</screen>
  <para>
   It is also possible to adjust the number of threads to use for
   opening client connections in parallel. By default two parallel
   threads are used. Set <literal>taskomatic.ssh_push_workers</literal>
   in <filename>/etc/rhn/rhn.conf</filename> like this:
  </para>
  <screen>taskomatic.ssh_push_workers = <replaceable>number</replaceable></screen>
 </sect2>

 <sect2>
  <title>Client Registration</title>
  <para>
   Registration of a client that is unable to reach the server needs
   to be done on the server. Therefore we are shipping a tool called
   <command>mgr-ssh-push-init</command>, which obsoletes
   <command>mgr-push-register</command>. The latter could only set up
   clients to be managed via an SSH tunnel. The deprecated
   <command>mgr-push-register</command> script now simply calls the
   new one and will be removed with one of the next releases.
  </para>
  <para>
 The new script provides the option to initialize and register a
 client to be managed via SSH push with or without tunneling. This
 command expects a client's hostname (or IP address) as well as the
 path to a valid bootstrap script in the server's file system as
 parameters for registration:
  </para>
  <screen>mgr-ssh-push-init --client <replaceable>client</replaceable> --register <replaceable>bootstrap_script</replaceable> --tunnel</screen>
  <para>
   For registration of systems that should be managed via SSH push, an activation key can be configured to enable this contact method. Go to <menuchoice><guimenu>Systems</guimenu><guimenu>Activation Keys</guimenu></menuchoice> and click on a key or create a new one. Select your preferred Push method from the dropdown menu and click on <guimenu>Update Activation Key</guimenu>.
  </para>
  <para>
   All systems registered with an activation key will be pre-configured
   to be contacted by the server using the method specified in the
   key. Currently, the following server contact methods are available:
  </para>

  <variablelist>
   <varlistentry>
    <term>
     Pull via XMLRPC:
    </term>
    <listitem>
     <para>
      The longtime default: the clients contact the server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Push via SSH:
    </term>
    <listitem>
     <para>
      The server will contact the clients using SSH and run
      <command>rhn_check</command> there.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Push via SSH tunnel:
    </term>
    <listitem>
     <para>
      The server will contact the clients and run
      <command>rhn_check</command> via an encrypted SSH tunnel.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For already registered clients it is still possible
   to change the contact method in the system details Web interface: On
   the <guimenu>Systems</guimenu> page select the system, click
   <guimenu>Edit These Properties</guimenu> and set the value in the
   <guimenu>Contact Method</guimenu> combobox, then click
   <guimenu>Update Properties</guimenu>.
  </para>
  <para>
   To enable managing a client using <guimenu>Push via SSH</guimenu>
   (without tunneling), the same script can be used as with
   tunneling. Registration is optional since it can also be done from
   within the client in this case:
  </para>
  <screen>mgr-ssh-push-init --client <replaceable>client</replaceable> [--register <replaceable>bootstrap_script</replaceable>]</screen>
  <para> 
   Note that <command>mgr-ssh-push-init</command> will automatically
   generate the necessary SSH key pair if it does not yet exist on the
   &susemgr; server. The correct host keys of clients are being stored
   in the <filename>known_hosts</filename> file.
  </para>
  <note>
   <para>
     When using the <guimenu>Push via SSH tunnel</guimenu> contact method, the client is configured to connect to &susemgr; via <replaceable>high port[1|2]</replaceable>. Tools like <command>rhn_check</command> and <command>zypper</command> will need an active SSH session with the proper port forwarding options to access the &susemgr; API. To verify the <guimenu>Push via SSH tunnel</guimenu> connection manually, you can run the following command on the &susemgr; server: 
   </para>
<screen>ssh -i /root/.ssh/id_susemanager -R <replaceable>high port2</replaceable>:<replaceable>susemanager</replaceable>:443 <replaceable>client</replaceable> zypper ref</screen>
  </note> 
 </sect2>
 <sect2>
  <title>Proxy Support</title>
  <para>
   <!-- bnc#886421 -->
   Make sure that the latest maintenance updates with the registration tool
   are installed on the &susemgrproxy; system.
  </para>
  <para>
   It is possible to use the SSH push contact methods to manage
   systems that are connected to the &susemgr; server via a proxy. To
   register such a system, run <command>mgr-ssh-push-init</command> on
   the proxy server that is next to the respective client.
  </para>
  <para>
   This will even work with a chain of cascading &susemgr; proxies.  The
   only known limitation is that the server needs to be able to directly
   connect to the last proxy in the chain.
  </para>
 </sect2>
</sect1>
