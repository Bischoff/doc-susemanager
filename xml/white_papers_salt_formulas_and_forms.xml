<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>

<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="white.papers.salt.formulas.and.forms">

    <title>Salt Formulas and SUSE Manager</title>

    <para>This chapter provides a technical overview for using the Salt Formulas with SUSE Manager
        for groups and individual systems. This chapter also covers creating custom formulas and
        using these with SUSE Manager.</para>


    <!-- Add Images of UI, showing examples to help clarify this chapters goals -->

    <sect1>
        <title>What are Salt Formulas?</title>
        <para>Formulas are a collections of Salt States that have been pre-written by other Salt
            users and contain generic parameter fields. Formulas allow for reliable reproduction of
            any configuration again and again. Formulas also allow you to create and reuse custom
            states. These collections of states may be installed from RPM binaries or an external
            git repository. The difference between using a state and a formula perhaps could be
            introduced best with the following Apache web server analogy.</para>
        <variablelist>
            <varlistentry>
                <term>Configuration via a Salt State</term>
                <listitem>
                    <para>Penguin the administrator decides to configure Apache using a regular salt
                        state for his server. His server requires many special parameters (ports,
                        file configurations etc.). The state file he is writing will be very
                        specific to the infrastructure of his company's internal network.
                        Additionally the state will be written for a specific system and will likely
                        not function on another server or machine within the same network. He also
                        will start by writing his state from scratch and therefore will require a
                        moderate time investment.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Configuration via a Salt Formula</term>
                <listitem>
                    <para>Dr. Chameleon decides to use a Salt Formula. Using a Salt Formula allows
                        him to place his infrastructure specific parameters into a generic
                        pre-written Apache formula (which contains many of Apache's default
                        configuration options) and deploy the configuration to a minion. He can then
                        duplicate this process, by changing the available pre-written parameters(or
                        by adding more of his own) and deploy these changes to each additional
                        server. This means that he is not required to write a custom state from
                        scratch for each additional system and simply needs to edit basic
                        parameters. Formula changes will always be sent to minions like states by
                        applying the highstate.</para>
                </listitem>
            </varlistentry>
        </variablelist>

        <note>
            <title>What is a Highstate?</title>
            <para>The highstate could also be referred to as a configuration change. When you apply
                a highstate you are simply pushing any new configuration changes stored on the
                master(SUSE Manager) to a minion. All minions targeted by these changes will receive
                the new configuration updates.</para>
        </note>

        <para>The following list should help you in making the decision to use a state or a
            formula.</para>
        <itemizedlist>
            <title>Formula Tips</title>
            <listitem>
                <para>When writing states for trivial tasks formulas are probably not worth the time
                    investment</para>
            </listitem>
            <listitem>
                <para>For large, non-trivial configurations use formulas</para>
            </listitem>
            <listitem>
                <para>Formulas and States both act as a kind of configuration documentation. Once
                    written and stored you have a snapshot of what your infrastructure should always
                    look like.</para>
            </listitem>
            <listitem>
                <para>You can greatly decrease the amount of time required for writing a formula by
                    grabbing one of the many pre-written formulas on github. There are pre-written
                    formulas for hundreds of configurations. You can find these located at: <link
                        xlink:href="https://github.com/saltstack-formulas"/>
                </para>
            </listitem>
        </itemizedlist>

        <important>
            <title>Creating Formulas as a Time Investment</title>
            <para>Creating formulas is quite possibly the most time consuming task for a SUSE
                Manager administrator. Nevertheless utilizing well designed formulas provides
                excellent pay-offs, as managing thousands of systems becomes a maintainable, and
                more importantly a reproducible task. You can find many community prepared formulas
                and examples at the official Saltstack repository located on github: <link
                    xlink:href="https://github.com/saltstack-formulas"/></para>
        </important>
    </sect1>

    <!-- How to install salt formulas from an RPM package and location of files after installation -->
    <sect1>
        <title>Installing Salt Formulas via RPM</title>

        <para>SUSE will release formulas in the form of RPM packages. These may be installed using
                zypper.<remark>Add note here on where to find RPMs when released.</remark></para>
        <procedure>
            <title>Installing Salt Formulas via an RPM</title>
            <step>
                <para>To see what formulas are available, execute the following command:</para>
                <screen># zypper se formulas</screen>
                <para>You will be presented with a list of available Salt Formulas:</para>
                <screen>S | Name              | Summary                                                    | Type      
--+-------------------+------------------------------------------------------------+-----------
  | openstack-formula | Example openstack Salt Formula collection for SUSE Manager | package   
  | openstack-formula | Example openstack Salt Formula collection for SUSE Manager | srcpackage
i | timezone-formula  | Example timezone Salt Formula for SUSE Manager             | package   
  | timezone-formula  | Example timezone Salt Formula for SUSE Manager             | srcpackage</screen>
            </step>
            <step>
                <para>For more information (metadata) about a specific formula run from the command
                    line as root:</para>
                <screen># zypper info timezone-formula</screen>
                <screen>Information for package timezone-formula:
-----------------------------------------
Repository: SUSE-Manager-Head
Name: timezone-formula
Version: 0.1-7.1.develHead
Arch: noarch
Vendor: obs://build.suse.de/Devel:Galaxy:Manager:Head
Support Level: unknown
Installed: Yes
Status: up-to-date
Installed Size: 1.9 KiB
Summary: Example timezone Salt Formula for SUSE Manager
Description: 
  Example Salt Formula for SUSE Manager. Sets the timezone on a system.</screen>
            </step>
            <step>
                <para>To install a formula, as root run:</para>
                <screen># zypper in timezone-formula</screen>
            </step>
        </procedure>

    </sect1>
    <!---->

    <!-- How to use your formulas to change data on groups or individual systems from the webui -->
    <sect1>
        <title>Customizing Formula Data Fields in the WebUI</title>
        <para/>
    </sect1>

    <sect1>
        <title>Deploying Custom Salt Formulas</title>
        <para/>
    </sect1>

    <sect1>
        <title>Example Saltstack Formulas</title>
        <para/>
    </sect1>


    <!-- This section needs major rework its ugly  Rework and simplify providing more visual examples-->
    <sect1>
        <title>Writing Salt Formulas</title>


        <para>Salt formulas are pre-written Salt States, which may be configured with pillar data.
            You can manipulate state files using Jinja. Jinja allows you to access pillar data by
            using the following syntax:</para>
        <screen>pillar.some.value</screen>
        <para>Alternatively you can use the following syntax:</para>
        <screen>salt['pillar.get']('some:value', 'default value')</screen>

        <para>You may also replace the <literal>pillar</literal> value with
                <literal>grains</literal> (e.g. grains.some.value) allowing access to grains.</para>

        <para>Using data this way allows you to make a formula configurable. The following code
            snippet will install a package specified in the pillar <literal>package_name</literal>.
            For example:</para>
        <screen>install_a_package:
  pkg.installed:
    - name: {{ pillar.package_name }}</screen>
        <para>You may also use more complex constructs such as <literal>if/else</literal> and
                <literal>for-loop</literal>'s To provide greater functionality. For Example:</para>
        <screen>{% if pillar.installSomething %}
something:
  pkg.installed
{% else %}
anotherPackage:
  pkg.installed
{% endif %}</screen>
        <para>Another example:</para>
        <screen>{% for service in pillar.services %}
start_{{ service }}:
  service.running:
    - name: {{ service }}
{% endfor %}</screen>

        <para>Jinja also provides other helpful functions. For example you can iterate over a
            dictionary:</para>
        <screen>{% for key, value in some_dictionary.items() %}
do_something_with_{{ key }}: {{ value }}
{% endfor %}</screen>

        <para>You may want to have Salt manage your files (E.g. configuration files for a program),
            and you can change these with pillar data. For example the following snippet shows how
            you can manage a file using Salt:</para>
        <screen>/etc/my_program/my_program.conf:
  file.managed:

    - source: salt://my_state/files/my_program.conf
    - template: jinja</screen>


        <para>Salt will copy the file
                <filename>&lt;salt-file_roots&gt;/my_state/files/my_program.conf</filename> on the
            salt master to <filename>/etc/my_program/my_program.conf</filename> on the minion and
            template it with Jinja. This allows you to use Jinja in the file, exactly like shown
            above for states:</para>
        <screen>some_config_option = {{ pillar.config_option_a }}</screen>

        <sect2>
            <title>Separating Data</title>
            <para>It is often a good idea to separate data from a state to increase its flexibility
                and add re-usability value. This is often done by writing values into a separate
                file named <filename>map.jinja</filename>. This file should be placed within the
                same directory as your state files.</para>
            <para>The following example will set <literal>data</literal> to a dictionary with
                different values, depending on which system the state runs on. It will also merge
                data with the pillar using the <literal>some.pillar.data</literal> value so you can
                access <literal>some.pillar.data.value</literal> by just using
                    <literal>data.value</literal>.</para>
            <para>You can also choose to override defined values from pillars (e.g. by overriding
                    <literal>some.pillar.data.package</literal> in the example). </para>
            <screen>{% set data = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘packageA’,
        ‘service’: ‘serviceA’
    },
    ‘RedHat’: {
        ‘package’: ‘package_a’,
        ‘service’: ‘service_a’
    }
}, merge=salt[‘pillar.get’](‘some:pillar:data’)) %}</screen>
            <para>After creating a map file like the above example, you can easily maintain
                compatibility with multiple system types while accessing "deep" pillar data in a
                simpler way. Now you can import and use <literal>data</literal> in any file. For
                example:</para>
            <screen>{% from “some_folder/map.jinja” import data with context %}

install_package_a:
  pkg.installed:
    - name: {{ data.package }}</screen>

            <para>You can also define multiple variables by copying the <literal>{% set ...
                    %}</literal> statement with different values and then merge it with other
                pillars. For example:</para>
            <screen>{% set server = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘my-server-pkg’
    }
}, merge=salt[‘pillar.get’](‘myFormula:server’)) %}
{% set client = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘my-client-pkg’
    }
}, merge=salt[‘pillar.get’](‘myFormula:client’)) %}</screen>

            <para>To import multiple variables, separate them with a comma. For Example:</para>
            <screen>{% from “map.jinja” import server, client with context %}</screen>
            <para>To learn more about writing Salt Formulas see the official documentation:<link
                    xlink:href="https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html"
                /></para>
        </sect2>

    </sect1>









    <sect1>
        <title>Making Pillar Data Editable in SUSE Manager</title>

        <para>Once you have written a formula, SUSE Manager allows you to generate and edit pillar
            data for system groups and individual systems. Pillar data allows you to define a
            configuration specification for these systems. To enable this configuration
            functionality, a formula requires a file called <filename>form.yml</filename>, that will
            describe how pillar data will look. <filename>form.yml</filename> is used by SUSE
            Manager to generate a form, with values editable by a user. These user values are
            re-generated as new pillar data, when requested, (E.G. when applying the
                <literal>highstate</literal> to a system). <filename>form.yml</filename> is written
            in using YAML syntax therefore it’s base structure is the same as the pillar it
            generates.</para>
        <para>form.yml example: </para>
        <screen># form.yml

my_pillar:
  $type: group
              
  valueA:
    $type: number
    $default: 5
  
  valueB:
    $type: password
  
  valueC:
    $default: some text</screen>

        <para>The generated pillar:</para>
        <screen># Generated Pillar

my_pillar:
  valueA: 5
  valueB: my_very_bad_password
  valueC: some text</screen>

        <para><filename>form.yml</filename> contains additional information that describes how the
            form for a pillar should look for SUSE Manager. This information is contained in
            attributes and always start with a <literal>$</literal> sign.</para>
        <important>
            <title>Ignored Values</title>
            <para>All values, that start with a <literal>$</literal> sign and are not valid
                attributes, will be ignored.</para>
        </important>
        <para>The following are valid attributes.</para>
        <variablelist>

            <varlistentry>
                <term>$type</term>
                <listitem>
                    <para>The most important attribute is the $type attribute. It defines the type
                        of the pillar value and the form-field that is generated. The following
                        represent the currently supported types:</para>
                    <itemizedlist>
                        <listitem>
                            <para>text</para>
                        </listitem>
                        <listitem>
                            <para>password</para>
                        </listitem>
                        <listitem>
                            <para>number</para>
                        </listitem>
                        <listitem>
                            <para>url</para>
                        </listitem>
                        <listitem>
                            <para>email</para>
                        </listitem>
                        <listitem>
                            <para>date</para>
                        </listitem>
                        <listitem>
                            <para>time</para>
                        </listitem>
                        <listitem>
                            <para>datetime</para>
                        </listitem>
                        <listitem>
                            <para>boolean</para>
                        </listitem>
                        <listitem>
                            <para>color</para>
                        </listitem>
                        <listitem>
                            <para>select</para>
                        </listitem>
                        <listitem>
                            <para>group</para>
                        </listitem>
                        <listitem>
                            <para>hidden-group</para>
                        </listitem>
                    </itemizedlist>
                    <para>Many of these values are self-explanatory. <literal>text</literal> will
                        generate a simple text field, <literal>password</literal> a password field
                        etc. The color type will generate a color picker. The group and hidden-group
                        types do not generate an editable field and are used to structure form and
                        pillar data. The major difference between group and hidden-group is that
                            <literal>group</literal> will generate a visible border with a heading,
                        whereas hidden-group will show nothing visually and is used to structure
                        pillar data.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>$default</term>
                <listitem>
                    <para>$default allows you to specify a default value that is displayed and used,
                        if no other value is entered.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>$name</term>
                <listitem>
                    <para>$name allows you to specify the name of a value that is shown in the form.
                        If this value is not set, the pillar name is used and capitalized without
                        underscores and dashes.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>$help and $placeholder</term>
                <listitem>
                    <para>The $help and $placeholder attributes are used to give a user a better
                        understanding of what the value should be. $help defines the message a user
                        sees when hovering over a field and $placeholder displays a gray placeholder
                        text in the field. $placeholder may only be used with text fields like text,
                        password, email or date.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>$scope</term>
                <listitem>
                    <para>$scope allows you to specify a hierarchy level at which a value may be
                        edited. Possible values are <literal>system</literal>,
                            <literal>group</literal> and <literal>readonly</literal>. The first is
                        the default and allows the value to be edited at group and system levels.
                        This does implies a value should be entered for each system, but you can
                        choose to set a default for an entire group that will be used, if no
                        system-specific value is found. When using $scope: group the value can only
                        be edited for a complete group. On the system level you will be able to see
                        the value, but not edit it. The last option makes a field read-only. It can
                        be used to show the user data, that he should know, but should not be able
                        to edit. This option only makes sense in combination with the $default
                        attribute.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term> $visibleIf</term>
                <listitem>
                    <para>$visibleIf allows you to show a field or group if a simple condition is
                        met. A condition always looks similar to the following example: </para>
                    <screen>some_group$another_group$my_checkbox == true</screen>


                    <para>The left part of the above statement is the path to another value, and
                        groups are separated by <literal>$</literal> signs. The middle section of
                        the command should be either <literal>==</literal> for a value to be equal
                        or <literal>!=</literal> for values that should be not equal. The last field
                        in the statement can be any value which a field should have or not
                        have.</para>

                    <para>The field with this attribute associated with it will now be shown only
                        when the condition is met. In this example the field will be shown only if
                            <literal>my_checkbox</literal> is checked. The ability to use
                        conditional statements i not limited to checkboxes. It may also be used to
                        check values of select-fields, text-fields etc.</para>

                    <para>A check-box should be structured like the following example:</para>
                    <screen>some_group:
  $type: group

  another_group:
    $type: group

      my_checkbox:
        $type: boolean</screen>

                    <para>By using multiple groups with the attribute, you can allow a user to
                        select an option and show a completely different form, dependant upon the
                        selected value.</para>

                    <note>
                        <title>Hidden Values</title>
                        <para>Hidden values will still be merged into the pillar data and sent to
                            the server. The formula must check the condition again and use the
                            appropriate data. For example:</para>
                        <screen>show_option:
  $type: checkbox
some_text:
  $visibleIf: show_option == true</screen>
                        <screen>{% if pillar.show_option %}
do_something:
  with: {{ pillar.some_text }}
{% endif %}</screen>

                    </note>

                </listitem>
            </varlistentry>

            <varlistentry>
                <term>$values</term>
                <listitem>
                    <para>$value can only be used together with $type: select to specify the
                        different options in the select-field. $values must be a list of possible
                        values to select. For example:</para>
                    <screen>select_something:
  $type: select
  $values: [“option1”, “option2”]</screen>
                    <para>Or alternatively:</para>
                    <screen>select_something:
  $type: select
  $values:
    - option1
    - option2</screen>
                </listitem>
            </varlistentry>
        </variablelist>

    </sect1>


    <sect1>

        <title>File Structure Overview</title>
        <para>Formulas in SUSE Manager are required to have a specific structure and should be
            located within certain directories to work properly. A formula will always consists of
            two separate parts: The <literal>state</literal> and the
            <literal>metadata</literal>.</para>

        <variablelist>
            <varlistentry>
                <term>The State</term>
                <listitem>
                    <para>The state is everything required for a salt state to work independently.
                        This includes state files, the map.jinja file and any other files which may
                        be required.</para>
                    <note>
                        <title>More on States Locations</title>
                        <para>Although unnecessary, it is recommended, to place state files within a
                            separate folder and use an init.sls file to represent the main state.
                            You can however place a <filename>my_formula.sls in
                                /srv/salt/</filename>. The name of the sls-file or the folder
                            containing the init.sls must match the name of the folder containing the
                            metadata files.</para>
                    </note>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>The Metadata</term>
                <listitem>
                    <para>The metadata includes the <literal>form.yml</literal> file which defines
                        the forms for SUSE Manager and an optional metadata.yml file that may
                        contain additional metadata for a formula.</para>
                    <note>
                        <title>More on the metadata.yml File</title>
                        <para>The metadata.yml file is an optional file, that may contain additional
                            metadata for a formula which is used by SUSE Manager. metadata.yml is
                            also written in YAML. Possible values are:</para>
                        <itemizedlist>
                            <listitem>
                                <para>description: A description text for the formula.</para>
                            </listitem>
                            <listitem>
                                <para>group: The name of a group of formulas. May be used when
                                    working with multiple formulas that should be used together.
                                    Formulas within the same group will always be grouped together
                                    within the UI.</para>
                            </listitem>
                            <listitem>
                                <para>after: A list of formulas, which should be executed before
                                    this formula if present.</para>
                            </listitem>
                        </itemizedlist>
                    </note>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Official Formulas</term>
                <listitem>
                    <para>Official formulas installed via RPMs store their state files within:
                            <filename>/usr/share/susemanager/formulas/states/&lt;formula-name&gt;/</filename>
                        and their metadata files within:
                            <filename>/usr/share/susemanager/formulas/metadata/&lt;formula-name&gt;/</filename></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Custom Formulas</term>
                <listitem>
                    <para>To use custom formulas place your state files within:
                            <filename>/srv/salt/</filename> and metadata files in:
                            <filename>/srv/formula_metadata/&lt;formula-name&gt;/</filename></para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>All folders located in the following directories should contain a
                <literal>form.yml</literal> file. These files are detected as formula recipes and
            may be applied to groups and systems:</para>
        <screen>/srv/formula_data/</screen>
        <screen>/usr/share/susemanager/formulas/metadata/</screen>

        <para>Each time a page for a formula is requested, the server will load a form.yml file,
            parse it to JSON and then send it to a client. On the client the form is generated in
            JavaScript. Edited values entered by a user are sent back to the server and saved. All
            formula data is saved in:</para>
        <screen>/srv/susemanager/formula_data/</screen>
        <itemizedlist>
            <listitem>
                <para>Formulas that are applied to groups and servers will be stored in:</para>
                <screen>group_formulas.json</screen>
                <screen>server_formulas.json</screen>
            </listitem>
            <listitem>
                <para> Form pillar values for groups are stored in:</para>
                <screen>group_pillar/&lt;group-id&gt;_&lt;formula-name&gt;.json</screen>
                <para>Form pillar values for systems are stored in:</para>
                <screen>pillar/&lt;minion-id&gt;_&lt;formula-name&gt;.json</screen>
            </listitem>
        </itemizedlist>

        <sect2>
            <title> SUSE Manager Generated Pillar Data </title>
            <para>When pillar data is generated (e.g. after applying the highstate) the following
                external pillar script generates pillar data for packages, group ids, etc. and
                includes all pillar data for a system:</para>
            <screen>/usr/share/susemanager/modules/pillar/suma_minion.py</screen>
            <para>The process is executed as follows:</para>
            <procedure>
                <step>
                    <para>The suma_minion.py script starts and finds all formulas for a system (by
                        checking the <literal>group_formulas.json</literal> and
                            <literal>server_formulas.json</literal> files). </para>
                </step>
                <step>
                    <para>suma_minion.py loads the values for each formula (groups and from the
                        system) and merges them with the highstate (default: if no values are found,
                        a group overrides a system if $scope: group etc.).</para>
                </step>
                <step>
                    <para>suma_minion.py also includes a list of formulas applied to the system in a
                        pillar named formulas. This structure makes it possible to include states.
                        The top file (in this case specifically generated by the mgr_master_tops.py
                        script) includes a state called formulas for each system. This includes the
                            <literal>formulas.sls</literal> file located in:</para>
                    <screen>/usr/share/susemanager/formulas/states/</screen>
                    <para>The content looks similar to the following:</para>
                    <screen>include: {{ pillar["formulas"] }}</screen>
                    <para>This pillar includes all formulas, that are specified in pillar data
                        generated from the external pillar script.</para>
                </step>
            </procedure>
        </sect2>
    </sect1>

    <sect1>
        <title>Formula Requirements</title>
        <para>Formulas should be designed/created directly after a SUSE Manager installation, but if
            you encounter any issues check the following:</para>
        <itemizedlist>
            <listitem>
                <para>The external pillar script (suma_minion.py) must include formula data</para>
            </listitem>
            <listitem>
                <para>Data is saved to <filename>/srv/susemanager/formula_data</filename> and the
                        <filename>pillar</filename> and <filename>group_pillar</filename>
                    sub-directories. These should be automatically generated by the server</para>
            </listitem>
            <listitem>
                <para>Formulas must be included for every minion listed in the top file. Currently
                    this process is initiated by the <filename>mgr_master_tops.py</filename> script
                    which includes the formulas.sls file located in:</para>
                <screen>/usr/share/susemanager/formulas/states/</screen>
                <para>This directory must be a salt file root. File roots are configured on the
                    salt-master (SUSE Manager) located in:</para>
                <screen>/etc/salt/master.d/susemanager.conf</screen>
            </listitem>

        </itemizedlist>
    </sect1>
    <sect1>
        <title>Using Salt Formulas with SUSE Manager</title>
        <para>The following procedure provides an overview on using Salt Formulas with SUSE
            Manager.</para>

        <procedure>
            <step>
                <para>Official formulas may be installed as RPMs. If you have written your own
                    formulas, place the states within /srv/salt/&lt;your-formula-name&gt;/ and the
                    metadata (form.yml and metadata.yml) in
                    /srv/formula_metadata/&lt;your-formula-name&gt;/ After installing your formulas
                    they will appear in the Formula Cataolg, located under the Salt tab on the main
                    menu.</para>
            </step>
            <step>
                <para>To begin using a formula, apply it to a group or system. Apply a formula to a
                    group or system by selecting the Formulas tab from the main menu of a system or
                    system group. From the Formulas page you can select any formulas you wish to
                    apply to a group or system. Click the save button to save your changes to the
                    database.</para>
            </step>
            <step>
                <para>After applying one or more formulas to a group or system, additional tabs will
                    become available from the top menu, one for each formula selected. From these
                    tabs you may configure your formulas.</para>
            </step>
            <step>
                <para>Once you have finished customizing your formula values you will need to apply
                    the highstate for them to take effect. Applying the highstate will execute the
                    state associated with the formula and configure targeted systems. You can use
                    the <literal>Apply Highstate</literal> button from any formulas page of a group
                    or systems page or alternatively use the Highstate page under any system’s Salt
                    tab.</para>
            </step>
            <step>
                <para>When a change to any or your values is required or you need to reapply the
                    formula state because of a failure or bug, change values located on your formula
                    pages and re-apply the highstate. Salt will ensure that only modified values are
                    adjusted and restart or reinstall services only when necessary.</para>
            </step>
        </procedure>
    </sect1>




    <sect1>
        <title>Example Formulas</title>
        <para>The following examples should help you get started writing formulas.</para>
        <variablelist>
            <varlistentry>
                <term>Basic Webserver Forumla</term>
                <listitem>
                    <para><link xlink:href="https://github.com/benediktwerner/webserver-formula"
                        /></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Advanced Openstack Cloud Formula</term>
                <listitem>
                    <para><link xlink:href="https://github.com/benediktwerner/openstack-formula"
                        /></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Test Formula For SUSE Manager</term>
                <listitem>
                    <para><link xlink:href="https://github.com/benediktwerner/test-formula"/></para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>

</chapter>
