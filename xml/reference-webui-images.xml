<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>

<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ref.webui.building.containers">

    <title>Image Building and Management</title>

    <sect1>
        <title>Introduction</title>
        <para>SUSE Manager enables system administrators to build containers, create Image stores,
            and profiles. The following section targets administrators with former experience using
            Docker and Kubernetes.</para>
        <para>For additional resources on Docker or Kubernetes see:</para>
        <itemizedlist>
            <listitem>
                <para><link
                        xlink:href="https://www.suse.com/documentation/sles-12/book_sles_docker/data/book_sles_docker.html"
                    /></para>
            </listitem>
            <listitem>
                <para><link xlink:href="https://docs.docker.com/"/></para>
            </listitem>
            <listitem>
                <para><link xlink:href="https://kubernetes.io/docs/home/"/></para>
            </listitem>
        </itemizedlist>

    </sect1>

    <sect1>
        <title>Requirements</title>
        <para>This image feature is only available for SALT minions running on SLES12.</para>

    </sect1>

    <sect1>
        <title>Creating a Build Host</title>

        <para>To build container images with SUSE Manager, you will need to create a build host.
            Build hosts must be a Salt minion running SLES12.</para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="images_image_build.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="images_image_build.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <para>From the SUSE Manager WebUI perform the following steps to create a build host.</para>
        <procedure>
            <step>
                <para>Select the desired build host minion from the <guimenu>Systems
                        Overview</guimenu> page.</para>
            </step>
            <step>
                <para>From the <guimenu>System Details</guimenu> page assign the containers modules
                    to the Salt minion by going to: <menuchoice>
                        <guimenu>Software</guimenu>
                        <guimenu>Software Channels</guimenu>
                    </menuchoice></para>
            </step>
            <step>
                <para>Update the "salt" and "salt-minion" packages.</para>
                <warning>
                    <para>Do not update Salt itself using Salt states. First update your other
                        system packages using salt states then update Salt as a separate stand-alone
                        step from the SUSE Manager WebUI.</para>
                </warning>
            </step>
            <step>
                <para>From the <menuchoice>
                        <guimenu>System Details</guimenu>
                        <guimenu>Properties</guimenu>
                    </menuchoice> page, enable the Add-on System Type: <filename>Docker Build
                        Host</filename> then select <guimenu>Update Properties</guimenu></para>
            </step>
            <step>
                <para>A state will be applied that installs the required packages.</para>
            </step>

        </procedure>
    </sect1>

    <sect1>
        <title>Define Container Build Channels with an Activation Key</title>
        <para>Create an <literal>Activation Key</literal> associated with the channel that should be
            used with your image.</para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="systems_create_activation_key.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="systems_create_activation_key.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <procedure>
            <step>
                <para>From the left navigation menu select
                        <guimenu>Systems</guimenu><guimenu>Activation Keys</guimenu></para>
            </step>
            <step>
                <para>Select <guimenu>Create Key</guimenu>.</para>
            </step>
            <step>
                <para>Enter a <literal>Description</literal>, a <literal>Key</literal> name, Use the
                    dropdown to select the <literal>Base Channel</literal> that should be associated
                    with this Key.</para>
            </step>
            <step>
                <para>Make sure </para>
            </step>
        </procedure>
    </sect1>

    <sect1>
        <title>Creating an Image Store</title>
        <para>When working with images you will need a place to store them. </para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="images_image_stores.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="images_image_stores.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <procedure>
            <step>
                <para>From the left navigation menu select <guimenu>Images</guimenu> and
                        <guimenu>Stores</guimenu>.</para>
            </step>
            <step>
                <para>Click <guimenu>Create</guimenu> to create a new store.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject role="fo">
                            <imagedata fileref="imeages_image_stores_create.png" width="400"/>
                        </imageobject>
                        <imageobject role="html">
                            <imagedata fileref="imeages_image_stores_create.png" width="444"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </step>
            <step>
                <para>Currently SUSE Manager only supports registry for the <literal>Store
                        Type</literal>. Define a <literal>Label</literal> for the image store and
                    provide a <literal>URI</literal>(For containers the FQDN of the host containing
                    the registry is sufficient in most cases).</para>
            </step>
            <step>
                <para>Click <guimenu>Create</guimenu> to add the new <literal>Image
                    Store</literal>.</para>
            </step>
        </procedure>
    </sect1>


    <sect1>
        <title>Creating an Image Profile</title>
        <para>You can create an image profile for your images. You can define an image type, a
            specific store and select an activation key the image should be associated with. </para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="images_image_profiles.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="images_image_profiles.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <procedure>
            <title>Create Image Profile</title>
            <step>
                <para>To create an image profile select <menuchoice>
                        <guimenu>Image</guimenu>
                        <guimenu>Profiles</guimenu>
                    </menuchoice> and click the <guimenu>Create</guimenu> button.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject role="fo">
                            <imagedata fileref="images_image_create_profile.png" width="400"/>
                        </imageobject>
                        <imageobject role="html">
                            <imagedata fileref="images_image_create_profile.png" width="444"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </step>
            <step>
                <para>Fill in the <guimenu>Label</guimenu>,<guimenu>Image Type</guimenu>,
                        <guimenu>Target Image Store</guimenu>,<guimenu>Path</guimenu> , and
                        <guimenu>Activation Key</guimenu> fields.</para>
                <note>
                    <para>For the <guimenu>Path</guimenu> field you should use a git url
                        (http/https) with the following format:</para>
                    <screen> https://git.domain.top/path/my.git#branchname:folder</screen>
                    <para>If a branchname is not specified the <literal>Master</literal> branch will
                        be used by default. If a <literal>folder</literal> is not specified a
                            <literal>Dockerfile</literal> is expected to be in the root directory of
                        the checkout.</para>
                </note>
            </step>
            <step>
                <para>Click the <guimenu>Create</guimenu> button.</para>
            </step>
        </procedure>

        <sect2>
            <title>Example Dockerfile</title>
            <para>See the following example Dockerfile. A docker file is specified when creating an
                image profile and stored in a git repository:</para>
            <screen>   FROM registry.mgr.suse.de/sles12sp2
   MAINTAINER Tux Administrator "tux@suse.de"
   
   ARG repo
   ARG cert
   
   RUN echo "$cert" > /etc/pki/trust/anchors/RHN-ORG-TRUSTED-SSL-CERT.pem
   RUN update-ca-certificates
   RUN echo "$repo" > /etc/zypp/repos.d/susemanager:dockerbuild.repo
   
   ... do the required tasks
   
   RUN rm -f /etc/zypp/repos.d/susemanager:dockerbuild.repo</screen>
            <important>
                <para>If you would like to inspect an image and provide the package/product list of
                    a container to the SUSE Manager WebUI you are required to install
                        <filename>python</filename> and <filename>python-xml</filename> in your
                    container. If these packages remain uninstalled, images will still build, but
                    the package and product list will not be read and the package/product list
                    information will not be available from the WebUI.</para>
            </important>
        </sect2>
    </sect1>

    <sect1>
        <title>Building an Image</title>
        <para>There are two ways to build an image. You can select <menuchoice>
                <guimenu>Images</guimenu>
                <guimenu>Build</guimenu>
            </menuchoice> from the left navigation bar, or click the build icon in the <menuchoice>
                <guimenu>Images</guimenu>
                <guimenu>Profiles</guimenu>
            </menuchoice> list.</para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="images_image_build.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="images_image_build.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <procedure>
            <title>Build an Image</title>
            <step>
                <para>For this example select <menuchoice>
                        <guimenu>Images</guimenu>
                        <guimenu>Build</guimenu>
                    </menuchoice>.</para>
            </step>
            <step>
                <para>Add a different tag name if you want a version other than the default
                        <literal>Latest</literal>.</para>
            </step>
            <step>
                <para>Select the <guimenu>Build Profile</guimenu> and a <guimenu>Build
                        Host</guimenu></para>
                <note>
                    <para>Notice the <guimenu>Profile Summary</guimenu> to the right of the build
                        fields. Once you have selected an build profile detailed information about
                        the selected profile will show up in this area.</para>
                </note>
            </step>
            <step>
                <para>To schedule a build click the <guimenu>Build</guimenu> button.</para>
            </step>
        </procedure>
    </sect1>

    <sect1>
        <title>Listing Available Build Images</title>
        <para>To list available build images select <menuchoice>
                <guimenu>Images</guimenu>
                <guimenu>Images</guimenu>
            </menuchoice>. A list of all build images will be displayed.</para>
        <informalfigure>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="images_list_images.png" width="400"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="images_list_images.png" width="444"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
        <para> Displayed data about images includes an image <guimenu>Name</guimenu>, its
                <guimenu>Version</guimenu> and the build <guimenu>Status</guimenu>. You will also
            see an images Update status with a listing of possible patch/package updates that are
            available for the image.</para>
        <para>Clicking the <guimenu>Details</guimenu> button on an image will provide a detailed
            view including an exact list of relevant patches and a list of all packages installed
            within the image. </para>
        <important>
            <para> The patch and package list is only available if the inspect state after a build
                was successful.</para>
        </important>
    </sect1>

    <sect1>
        <title>Troubleshooting</title>
        <para>The following are some known pitfalls when working with Images.</para>
        <itemizedlist>
            <listitem>
                <para>HTTPS certificates to access the registry or the git repositories should be
                    deployed to the minion by a custom written state file.</para>
            </listitem>
            <listitem>
                <para>ssh git access with docker is currently not working.</para>
            </listitem>
            <listitem>
                <para>In case python and python-xml is not installed in an image. Salt will not be
                    able to run within the container and reporting of installed packages/products
                    will fail. This results in an unknown update status.</para>
            </listitem>
        </itemizedlist>
    </sect1>

</chapter>
