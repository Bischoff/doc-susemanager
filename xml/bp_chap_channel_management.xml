<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:novdoc-profile.xsl" 
 type="text/xml" 
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC
"-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- ################################################################################# -->
<!-- Draft 1 Channel Management-->
<!-- ################################################################################# -->

<chapter id="chapt.bp.channel.management">
  <title>Channel Management</title>

  <sect1 id="chapt.bp.channel.management.intro">
    <title>Introduction</title>
    <para>This chapter discusses the critical topic of channel design within &susemgr; and provides
      an overview of channel management concepts. This includes naming, base and child channel
      relationships, deployment and maintenance of vendor and custom channels for &susemgr; Server
      and &susemgrproxy; as well as the &susemgr; channel life cycle and staging. This chapter also
      provides information about repositories, cloning, and security options within &susemgr;.
    </para>
  </sect1>
  <sect1 id="chapt.bp.channel.management.channel.design.concepts">
    <title>The Importance of Channel Design</title>
    <para>The design of your channels influence all other component interaction within &susemgr; and
      as such, channel design requires careful consideration and a concrete understanding of channel
      terminology. While re-working channels after initial setup is possible, in large environments
      this can become increasingly difficult. Therefore it is important to plan your channel life
      cycle implementation with this consideration in mind, specifically regarding large production
      environments. </para>

    <para>Channels in &susemgr; represent the installation media for your clients. Like other media
      types channels contain software packages, patches and updates for client systems. Channels
      also provide an administrator with strict controls as to which packages may be installed on
      client systems and make an organizations application life cycle easier to manage.</para>
    <!-- need to add links here going to the API and CLI
        documentation! -->

    <sect2>
      <title>Channel Terminology</title>

      <formalpara>
        <title>Channels vs Repositories</title>
        <para>A <xref linkend="bp.gloss.channel"/>channel could also be called a repository manager
          within SUSE Manager. A channel is a collection of RPMs and when present, errata data. Each
          base channel also contains information specific to the product and architecture. Another
          often confused term, <systemitem>repository</systemitem>. This simply means that &susemgr;
          can include external repositories. One or more of these repositories may be added to a
          base channel or assigned to multiple child channels.</para>
      </formalpara>

      <formalpara>
        <title>Base Channels</title>
        <para>A <xref linkend="bp.gloss.base"/>base or parent channel, can contain one or more other
          channels (referred to as child channels). A system may only be assigned to one base
          channel. If the base channel is a clone of a SUSE channel (or is a clone of a cloned
          channel previously cloned from a SUSE Channel) it contains also meta information that is
          needed to do a SUSE Manager support pack migration.</para>
      </formalpara>

      <formalpara>
        <title>Child channels</title>
        <para>These channels belong to one parent channel and are from the same architecture and
          SLES or RHEL release. A registered system may have one or more child channels, but all
          children must belong to the same base channel.</para>
      </formalpara>

      <formalpara>
        <title>Patches</title>
        <para>Patches are a collection of packages which belong together and help in solving
          security issues, fixing bugs or often to simply provide an update. The data within in a
          patch is gathered together into errata information. In regards to SUSE Manager most of the
          actions performed in software channels are done against these patches. </para>
      </formalpara>

      <formalpara>
        <title>Packages</title>
        <para>A package is an RPM that contains all necessary files: configuration, binaries,
          scripts, as well as pre and post installation scripts.</para>
      </formalpara>

      <formalpara>
        <title>Clones</title>
        <para>A clone is a copy of a channel and will include exactly the same information as the
          original SUSE Manager channel up to the point from when the channel was created. If the
          original channel, receives updates after the clone has been created, these changes have to
          be updated (or cloned) to the cloned channel. This is a manual process which can be
          automated with the standard SLES tools. Cloning is especially useful in life-cycle
          management. The concept of cloning and relevant uses cases will be described within the
          following section:<!-- INCLUDE CLONING SECTION HERE -->.</para>
      </formalpara>

      <formalpara>
        <title>Stages</title>
        <!--    #########################################     -->
        <!--   Staging should also include an overview here.  -->
        <!--    #########################################     -->
        <para>This will be described in the next sub-chapter about staging.</para>
      </formalpara>
    </sect2>


  </sect1>
  <sect1>
    <title>Channel Life-cycle Management (In Development)</title>
    <para>This section describes &susemgr; Life-cycle best practices.<!-- add more later after speaking with MB and TH --></para>
  </sect1>
  
  <sect1>
    <title>Life-cycle Design with Staging (In development)</title>
    <para>Staging is the next step in channel Life-cycle management. Selecting a staging model based on your organizational requirements is highly recommended to increase the stability of your systems and environment. </para>
    
    <para>There are several staging models available for use in &susemgr;</para>
    <itemizedlist>
      <listitem><para>Three tier model. Tiers may be reduced or extended depending on your requirements </para></listitem>
      <listitem><para>A clone model based on a date or period of time</para></listitem>
      <listitem><para>A clone model based on specific projects</para></listitem>
      <listitem><para>A combination of one or more of the above models</para></listitem>
    </itemizedlist>
    
    <figure>
      <title>Three Tier Model</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="3tier.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  
  <sect1 id="chapt.bp.channel.management.base.child.relationships">
    <title> Base Channels vs. Child Channels</title>
    <para>It is important to understand channel hierarchy within &susemgr;. There are two types of
      channels: <systemitem>base</systemitem> channels and <systemitem>child</systemitem> channels.
      A base channel consists of packages built for a specific architecture and SUSE Linux
      Enterprise Server or Red Hat Enterprise Linux release. A child channel is a channel associated
      with a base channel and contains extra packages to extend its base channel. A client system
      must be assigned a base channel as this provides it's main media sources. A client may only
      have one base channel assigned to it, but a base channel may be assigned multiple child
      channels. A base channel could also be referred to as a parent channel to which all child
      channels belong. A subscribed client system may only install or update packages available
      through its assigned base  and child channels.</para>

  </sect1>
  
<sect1>
  <title> Connecting Clients to &susemgr;</title>
  <para>Below you will find the different methods available for registering client systems with
      &susemgr;.</para>
  
  <formalpara>
    <title>Registering Client Systems with Salt (In development)</title>
    <para>In the future it will be possible to register client systems to a &susemgr; server master as minions as well as accepting keys to assign base and child channels. <!-- Description will be added at a later time as well as links to reference book--></para>
  </formalpara>
  
  <formalpara>
    <title>Registering Clients with Activation Keys</title>
    <para>Due to the simplicity and speed of activation keys, this is the preferred method
        <!-- is this still the preferred method with salt-stack on the way? -->for registering
        client systems with either an &susemgrproxy; server or  a &susemgr; Server. Systems
        registered using an activation key are subscribed to all channels associated with its unique
        activation key. For more information about activation keys, see
        "<!-- link to section for activation keys --> the &susemgr; Reference Guide. </para>
  </formalpara>
  
  <formalpara>
    <title>Registering Client Systems Using the &susemgr; Web Interface</title>
    <para>Specific child channels are available through subscription, depending on the system's base channel. A system may be subscribed to a child channel through the &susemgr; web interface. If your organization has created custom base channels, the systems may also be reassigned to these custom channels through the &susemgr; web interface. For more information about subscribing to channels online, see the &susemgr; web interface chapter of the &susemgr; Reference Guide. <!-- add links to reference guide here explaining this process! --></para>
  </formalpara>
  
  <formalpara>
    <title>Registering Client systems with the <command>spacewalk-channel</command> Command</title>
    <para>The <command>spacewalk-channel</command> command line tool allows you to subscribe a system to specific channels via the command line without logging into </para>
  </formalpara>
  
  
</sect1>
  
  <sect1>
    <title>Relationship Between Products and Channels</title>
    <para/>

  </sect1>

  <sect1>
    <title>Organization Credentials</title>
    <para/>

  </sect1>

  <sect1>
    <title>Adding Products</title>
    <para/>

  </sect1>

  <sect1>
    <title>Channel Cloning</title>
    <para/>

  </sect1>
  <sect1>
    <title> Cloning Channels by Date</title>
    <para/>

  </sect1>

  <sect1>
    <title>Channel Security</title>
    <para/>

  </sect1>

  <sect1>
    <title>Signed Third party packages</title>
    <para/>

  </sect1>

  <sect1>
    <title>Signed Internal Packages</title>
    <para/>

  </sect1>

  <sect1>
    <title>GPG key usage</title>
    <para/>

  </sect1>

</chapter>
