<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="bp.images">
 <title>Image Building and Management</title>
 <info>
  <abstract>
   <para>
    &susemgr; enables system administrators to build containers, create
    image stores, and profiles. The following sections target
    administrators with former experience using Docker and Kubernetes.
   </para>
  </abstract>
 </info>

  <para>
   For additional information on Docker or Kubernetes, see:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <link
                        xlink:href="https://www.suse.com/documentation/sles-12/book_sles_docker/data/book_sles_docker.html"
                    />
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://docs.docker.com/"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://kubernetes.io/docs/home/"/>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1>
  <title>Requirements</title>

  <para>
   This images feature is only available for SALT minions running on
   &sls; 12 or later.  You will need git to store dockerfiles.
  </para>
 </sect1>
 <sect1>
  <title>Creating a Build Host</title>

  <para>
   To build container images with &susemgr;, you will need to create a build
   host. Build hosts must be a Salt minion running SLES 12 or later.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_build.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_build.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <para>
   From the &susemgr; &webui; perform the following steps to create a build
   host.
  </para>

  <procedure>
   <step>
    <para>
     Select the desired build host minion from the
     <menuchoice><guimenu>Systems</guimenu><guimenu>Overview</guimenu></menuchoice>
     page.
    </para>
   </step>
   <step>
    <para>
     From the <guimenu>System Details</guimenu> page assign the containers
     modules to the Salt minion by going to <menuchoice>
     <guimenu>Software</guimenu> <guimenu>Software Channels</guimenu>
     </menuchoice> and enable
     <literal>SLE-Module-Containers12-Pool</literal> and
     <literal>SLE-Module-Containers12-Updates</literal>.  Confirm with
     clicking <guimenu>Change Subscriptions</guimenu>.
    </para>
   </step>
   <!-- Is this actually needed after beta? -->
   <step>
    <para>
     Update the <package>salt</package> and
     <package>salt-minion</package> packages.
    </para>
    <warning>
     <para>
      Do not update <package>salt</package> itself using Salt
      states. First update your other system packages using Salt states
      then update <package>salt</package> as a separate stand-alone step
      from the &susemgr; &webui;.
     </para>
    </warning>
   </step>
   <step>
    <para>
     From the <menuchoice> <guimenu>System Details</guimenu>
     <guimenu>Properties</guimenu> </menuchoice> page, enable the
     <guimenu>Add-on System Type</guimenu> <literal>Docker Build
     Host</literal> and confirm with <guimenu>Update
     Properties</guimenu>.
    </para>
   </step>
   <step>
    <!-- Check this.  After enabling "Docker Build
         Host" SUMA prints:

Note: This action will not result in state application. To apply the
state, either use the states page or run `state.highstate` from the
command line.
    -->
    <para>
     A state will be applied that installs the required packages.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Define Container Build Channels with an Activation Key</title>

  <para>
   Create an activation key associated with the channel that should be
   used with your image.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="systems_create_activation_key.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="systems_create_activation_key.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <step>
    <para>
     From the left navigation menu select
     <menuchoice><guimenu>Systems</guimenu><guimenu>Activation
     Keys</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Create Key</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Enter a <guimenu>Description</guimenu>, a <guimenu>Key</guimenu>
     name, Use the dropdown to select the <guimenu>Base
     Channel</guimenu> that should be associated with this key.  Confirm
     with <guimenu>Create Activation Key</guimenu>.
    </para>
   </step>
  </procedure>
  <!-- For more info, see ... -->
 </sect1>
 <sect1>
  <title>Creating an Image Store</title>

  <para>
   When working with images you will need a place to store them.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_stores.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_stores.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <step>
    <para>
     From the left navigation menu select
     <menuchoice><guimenu>Images</guimenu>
     <guimenu>Stores</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Create</guimenu> to create a new store.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="imeages_image_stores_create.png" width="400"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="imeages_image_stores_create.png" width="80%"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     Currently, &susemgr; only supports <literal>Registry</literal> for
     the <guimenu>Store Type</guimenu>.  Define a
     <guimenu>Label</guimenu> for the image store and provide a
     <guimenu>URI</guimenu>. For containers the FQDN of the host
     containing the registry is sufficient in most cases.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Create</guimenu> to add the new <literal>Image
     Store</literal>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Creating an Image Profile</title>

  <para>
   You can create an image profile for your images. You can define an image
   type, a specific store and select an activation key the image should be
   associated with.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_profiles.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_profiles.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <title>Create Image Profile</title>
   <step>
    <para>
     To create an image profile select <menuchoice> <guimenu>Image</guimenu>
     <guimenu>Profiles</guimenu> </menuchoice> and click
     <guimenu>Create</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="images_image_create_profile.png" width="400"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="images_image_create_profile.png" width="80%"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     Fill in the <guimenu>Label</guimenu>, <guimenu>Image Type</guimenu>,
     <guimenu>Target Image Store</guimenu>, <guimenu>Path</guimenu>, and
     <guimenu>Activation Key</guimenu> fields.
    </para>
    <note>
     <para>
      For the <guimenu>Path</guimenu> field you should use a git url
      (http/https) with the following format:
     </para>
<screen> https://git.domain.top/path/my.git#branchname:folder</screen>
     <para>
      If a branchname is not specified the <literal>Master</literal> branch
      will be used by default. If a <literal>folder</literal> is not specified
      a <literal>Dockerfile</literal> is expected to be in the root directory
      of the checkout.
     </para>
    </note>
   </step>
   <step>
    <para>
     Click the <guimenu>Create</guimenu> button.
    </para>
   </step>
  </procedure>

  <sect2>
   <title>Example Dockerfile</title>
   <para>
    See the following example Dockerfile. A docker file is specified when
    creating an image profile and stored in a git repository:
   </para>
<screen>   FROM registry.mgr.suse.de/sles12sp2
   MAINTAINER Tux Administrator "tux@suse.de"
   
   ARG repo
   ARG cert
   
   RUN echo "$cert" > /etc/pki/trust/anchors/RHN-ORG-TRUSTED-SSL-CERT.pem
   RUN update-ca-certificates
   RUN echo "$repo" > /etc/zypp/repos.d/susemanager:dockerbuild.repo
   
   ... do the required tasks
   
   RUN rm -f /etc/zypp/repos.d/susemanager:dockerbuild.repo</screen>
   <important>
    <para>
     If you would like to inspect an image and provide the package/product list
     of a container to the &susemgr; &webui; you are required to install
     <package>python</package> and <package>python-xml</package> in your
     container. If these packages remain uninstalled, images will still build,
     but the package and product list will not be read and the package/product
     list information will not be available from the &webui;.
    </para>
   </important>
  </sect2>
 </sect1>
 <sect1>
  <title>Building an Image</title>

  <para>
   There are two ways to build an image. You can select <menuchoice>
   <guimenu>Images</guimenu> <guimenu>Build</guimenu> </menuchoice> from the
   left navigation bar, or click the build icon in the <menuchoice>
   <guimenu>Images</guimenu> <guimenu>Profiles</guimenu> </menuchoice> list.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_build.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_build.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <title>Build an Image</title>
   <step>
    <para>
     For this example select <menuchoice> <guimenu>Images</guimenu>
     <guimenu>Build</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Add a different tag name if you want a version other than the default
     <literal>Latest</literal>.
    </para>
   </step>
   <step>
    <para>
     Select the <guimenu>Build Profile</guimenu> and a <guimenu>Build
     Host</guimenu>
    </para>
    <note>
     <para>
      Notice the <guimenu>Profile Summary</guimenu> to the right of the build
      fields. Once you have selected an build profile detailed information
      about the selected profile will show up in this area.
     </para>
    </note>
   </step>
   <step>
    <para>
     To schedule a build click the <guimenu>Build</guimenu> button.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Listing Available Build Images</title>

  <para>
   To list available build images select <menuchoice> <guimenu>Images</guimenu>
   <guimenu>Images</guimenu> </menuchoice>. A list of all build images will be
   displayed.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_list_images.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_list_images.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <para>
   Displayed data about images includes an image <guimenu>Name</guimenu>, its
   <guimenu>Version</guimenu> and the build <guimenu>Status</guimenu>. You will
   also see an images update status with a listing of possible patch/package
   updates that are available for the image.
  </para>

  <para>
   Clicking the <guimenu>Details</guimenu> button on an image will provide a
   detailed view including an exact list of relevant patches and a list of all
   packages installed within the image.
  </para>

  <important>
   <para>
    The patch and package list is only available if the inspect state after a
    build was successful.
   </para>
  </important>
 </sect1>
 <sect1>
  <title>Troubleshooting</title>

  <para>
   The following are some known pitfalls when working with images.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     HTTPS certificates to access the registry or the git repositories should
     be deployed to the minion by a custom written state file.
    </para>
   </listitem>
   <listitem>
    <para>
     SSH git access with docker is currently not working.
    </para>
   </listitem>
   <listitem>
    <para>
     In case <package>python</package> and <package>python-xml</package>
     is not installed in an image, Salt will not be able to run within
     the container and reporting of installed packages/products will
     fail. This results in an unknown update status.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
