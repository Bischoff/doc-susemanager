<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="preparing.and.registering.clients">

    <title>Preparing for Registering Clients</title>
    <sect1>
        <title>Introduction</title>
        <para>All releases previous to and including &susemgr; 2.1 were implemented and shipped with
            a client management framework, which today is still fully supported. In addition to this
            traditional framework SUSE Manager 3 includes a complete Salt solution. Salt is an
            end-to-end data-center automation tool which may also be used outside the scope of SUSE
            Manager to introduce reactive, real-time orchestration, and configuration management.
            Two of the greatest advantages of adding the Salt framework to &susemgr;
            &productnumber3; are that it remains a popular open source project with a vibrant
            community and that it continues to be well documented and supported across the web.
            Managed systems may coexist using both methods, allowing you to become comfortable using
            Salt while keeping existing deployments intact.</para>

    </sect1>
    <sect1 xml:id="create.act.keys"><title>Creating Your Keys</title>
        <para>The following procedure will guide you through creating the activation keys for your
            test channels. Activation keys can be used for both Salt and traditional clients. </para>
        <formalpara>
            <title>Activation Keys</title>
            <para>Activation keys define the number of software entitlements, channels and groups a
                client system is allowed to subscribe to. This information is passed on to all
                systems registered with a key. Each activation key is bound to the organization for
                which it has been created. For this guide you will be using the default SUSE Manager
                organization which includes all software entitlements. Activation keys may be used
                with traditional clients or with Salt clients. </para>
        </formalpara>
        <procedure xml:id="create.activation.keys">
            <title>Creating Activation Keys</title>
            <step>
                <para>Log in to the SUSE Manager Web interface as administrator. </para>
            </step>
            <step xml:id="create.activation.keys.ak">
                <para>Switch to the Systems tab and select Activation Keys. </para>
            </step>
            <step>
                <para> Click the Create Key link at the upper right corner. </para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="quickstart-activationkeys1.png" width="80%"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </step>
            <step>
                <para>Enter a Description to identify the generated activation key.</para>
            </step>
            <step>
                <para> Enter a human readable key string value such as: <command>SLES12-SP1
                    </command>. </para>
                <warning>
                    <title>Allowed Characters</title>
                    <para>For all &suse; Products do not use commas within the key string. Red Hat
                        Products require commas. See: Activation Keys and rhnreg_ks: Reference Guide
                    </para>
                </warning>
            </step>
            <step>
                <para>Enter 1 in the <command>Usage:</command> field. This allows one client to
                    register using this key and uses one of your subscription entitlements.</para>
            </step>

            <step>
                <para>Select the &sle; 12 SP1 channel you added earlier from the <command>Base
                        Channels:</command> drop down.</para>
            </step>

            <step>
                <para>Leave the <command>Contact Method:</command> at default.</para>
            </step>
            <step>
                <para>Leave Universal Default unchecked. Click <command>Create Activation
                        Key</command> to finish creating the key for the first channel.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="quickstart-activationkeys2.png" width="80%"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </step>
            <step>
                <para>Repeat this procedure from <xref linkend="create.activation.keys.ak"/> and
                    create a key for the &sle;&nbsp;11 SP4 channel. The final list of keys should
                    look similar to the following image.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="quickstart-activationkeys3.png" width="80%"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </step>
        </procedure> 
    
    </sect1>
    <sect1 xml:id="create.tools.repository">
        <title>Creating the &susemgr; Tools Repository</title>
        <para>In this section you will create a tools repository on the &susemgr; Server for
            providing client tools. The client tools repository contains packages for installing
            Salt on minions as well as the required packages for registering traditional clients
            during the bootstrapping procedure. These packages will be installed from the newly
            generated repository during the registration process. In the following procedure you
            will create the &sle; 12 SP1 tools repository. </para>
        <important>
            <title>Creating a Tools Repository when an SCC Channel has not been Synced</title>
            <para>Before following the procedure to create the tools repository make sure the &suse;
                vendor channel you will be using with your client has been completely synced. You can
                check this by running <replaceable>tail -f
                    /var/log/rhn/reposync/CHANNEL_NAME</replaceable>.log as
                    <systemitem>root</systemitem>. For example: <replaceable>tail -f
                    /var/log/rhn/reposync/sles12-sp1-pool-x86_64</replaceable>.log </para>
        </important>
        <procedure>
            <title>Generating the Tools Repository for &sle; 12 SP1</title>
            <step>
                <para>Open a terminal on the server as <systemitem>root</systemitem> and enter the
                    following command to list available bootstrap repositories:</para>
                <screen>
<prompt>example-server: #</prompt> <command>mgr-create-bootstrap-repo -l</command>
SLE-12-SP1-x86_64
</screen>
            </step>
            <step>
                <para>Then invoke the same command using the listed
                repository as the product label to actually create the
                bootstrap repository:</para>
                <screen>
<prompt>example-server: #</prompt> <command>mgr-create-bootstrap-repo -c SLE-12-SP1-x86_64</command>
</screen>
            </step>
            <step>
             <para>
              &susemgr; will create and add the client tools to the
              newly created <replaceable>repositories</replaceable>
              directory located at
              <replaceable>/srv/www/htdocs/pub/repositories/</replaceable>.
             </para>
            </step>
        </procedure>

    </sect1>
    <sect1>
        <title>Registering Traditional Clients</title>
        <sect2 xml:id="generate.bootstrap.script">
            <title>Generating a Bootstrap Script</title>
            <para>This section goes over generating a template bootstrap script which will be copied
                and modified for use with your traditional clients.</para>

            <para>Traditional clients register with SUSE Manager via a bootstrap script executed on
                the client which deploys all necessary packages to it. The bootstrap script contains
                parameters which assigns a client system to its base channel. Two of these important
                parameters are:</para>
            <itemizedlist>
                <listitem>
                    <para>Activation Keys</para>
                </listitem>
                <listitem>
                    <para>GNU Privacy Guard (GPG) Keys</para>

                </listitem>
            </itemizedlist>
            <note>
                <title>GPG Keys</title>
                <para>GPG Keys will not be covered in this guide. In the future review the Best
                    practice guide for this topic. </para>

            </note>

            <note>
                <title>Bootstrap Scripting Best Practices</title>
                <para>It is possible to use various methods to register clients for use with
                    &susemgr; in mass using bootstrap. Using batch scripts for mass registration of
                    both VM and Bare Metal machines is a possibility. Some of these methods will be
                    covered in the Best Practice Guide and will be added as examples at a later
                    time.</para>
            </note>

            <para>The following procedure will guide you through generating a bootstrap template
                script.</para>
            <procedure xml:id="create.boot.script">
                <title>Creating a Bootstrap Script</title>
                <step>
                    <para>On the SUSE Manager Web interface, switch to the <guimenu>Admin</guimenu>
                        tab and select <menuchoice>
                            <guimenu>SUSE Manager Configuration</guimenu>
                            <guimenu>Bootstrap Script.</guimenu>
                        </menuchoice></para>
                </step>
                <step>
                    <para>Leave the defaults settings and click the <guimenu>Update</guimenu>
                        button. </para>
                    <informalfigure>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="quickstart-bootstrap1.png" width="80%"/>
                            </imageobject>
                        </mediaobject>
                    </informalfigure>
                </step>

                <step>
                    <para>A template bootstrap script is generated and stored on the server's file
                        system in the <filename>/srv/www/htdocs/pub/bootstrap</filename> directory. </para>
                    <screen><prompt>example-server: /srv/www/htdocs/pub/bootstrap#</prompt> <command>ls</command>
bootstrap.sh                  client_config_update.py
client-config-overrides.txt   sm-client-tools.rpm
<prompt>example-server: /srv/www/htdocs/pub/bootstrap#</prompt>
 
 </screen>

                    <para>The bootstrap script is also available at:
                            <filename>https://example-server.com/pub/bootstrap/</filename>.</para>

                </step>
            </procedure>
            <para>The next section will cover copying and modifying your bootstrap template for use
                with each client.</para>
        </sect2>

        <sect2 xml:id="modify.bootstrap.script">
            <title>Modifying the Bootstrap Script</title>
            <para>In this section you will copy and modify the template bootstrap script you created
                from the previous section.</para>
            <remark>this section should go towards the end during modification</remark>

            <para>The minimal requirement when modifying a bootstrap script for use with &susemgr;
                is inclusion of an activation key. Depending on your organizations security
                requirements it is strongly recommended to include one or more (GPG) keys (for
                example, your organization key, and package signing keys). For the purposes of this
                guide you will be registering with the activation keys created in the previous
                section.</para>

            <procedure xml:id="mod.bootstrap.script">
                <title>Modifying the Bootstrap Script</title>
                <step>
                    <para>Log in as <systemitem>root</systemitem> on the command line on your
                        &susemgr; Server.</para>
                </step>
                <step>
                    <para>Navigate to the bootstrap directory with:</para>
                    <screen>
<prompt>example-server:# </prompt><command>cd /srv/www/htdocs/pub/bootstrap/</command>
</screen>
                </step>
                <step>
                    <para>Create and rename two copies of the template bootstrap script for use with
                        each of your clients.</para>
                    <screen><prompt>example-server:/srv/www/htdocs/pub/bootstrap# </prompt><command>cp bootstrap.sh bootstrap-sles11-sp4.sh</command>
<prompt>example-server:/srv/www/htdocs/pub/bootstrap# </prompt><command>cp bootstrap.sh bootstrap-sles12-sp1.sh</command>
</screen>
                </step>
                <step>
                    <para>Open <systemitem>sles12-sp1.sh</systemitem> for modification. Scroll down
                        and modify both lines marked in green. You must comment out
                            <systemitem>#exit 1</systemitem> to activate the script and then enter
                        the name of the key for this script in
                            the<systemitem>ACTIVATION_KEYS=</systemitem> field. See the example
                        script below.</para>
                    <screen>
echo "Enable this script: comment (with #'s) this block (or, at least just"
echo "the exit below)"
echo
<command>#exit 1</command>

# can be edited, but probably correct (unless created during initial install):
# NOTE: ACTIVATION_KEYS *must* be used to bootstrap a client machine.
<command>ACTIVATION_KEYS=1-sles12-sp1</command>
ORG_GPG_KEY=
    
</screen>
                </step>
                <step>
                    <para>When you have finished your modifications save the file and repeat this
                        procedure for the second bootstrap script. Then proceed to the next
                        section.</para>
                </step>
            </procedure>
            <note>
                <title>Finding Your Keys</title>
                <para>To find key names you have created: Select the <guimenu>Overview</guimenu> tab
                    from the Web-GUI and then <menuchoice>
                        <guimenu>Manage Activation keys</guimenu>
                        <guimenu>Key Field</guimenu>
                    </menuchoice>. All keys created for channels are listed here. You must enter the
                    full name of the key you wish to use in the bootstrap script exactly as
                    presented in the key field.</para>
            </note>
        </sect2>

        <sect2 xml:id="connect.first.client">
            <title>Connecting Your First Client</title>
            <para>This section covers connecting your clients to manager with the modified bootstrap
                script.</para>

            <procedure xml:id="run.bootstrap.script">
                <title>Running the Bootstrap Script</title>
                <step>
                    <para>On your &susemgr; Server as <systemitem>root</systemitem> navigate to the
                        following directory.</para>
                    <screen><prompt>example-server: #</prompt> <command>cd /srv/www/htdocs/pub/bootstrap/</command></screen>
                </step>
                <step>
                    <para>Run the following command to execute the bootstrap script on the
                        client.</para>
                    <screen>
<prompt>example-server:/srv/www/htdocs/pub/bootstrap #</prompt> <command>cat <replaceable>MODIFIED-SCRIPT.SH</replaceable> \
  | ssh root@example-client.com /bin/bash</command>
</screen>
                </step>
                <step>
                    <para>The script will execute and proceed to download the required dependencies
                        located in the repositories directory you created earlier. Once the script
                        has finished running, log in to the WebUI and select the systems tab to see
                        your new client listed.</para>
                </step>

            </procedure>

            <para>This concludes the bootstrap section of this guide. The next section will go over
                registering Salt minions for use with &susemgr; 3. </para>

        </sect2>
    </sect1>

    <sect1>
        <title>Registering Salt Clients</title>
        <para>The following section describes registering Salt minions. This section assumes you
            have created the SUSE Manager tools repository.</para>
        <para>Once you have setup a base channel from the WebUI clients to obtain software sources
            from, for example: <replaceable>SLES12-SP1-Pool for x86_64</replaceable> Perform the
            following procedure to register a Salt minion.</para>
        <procedure>
            <title>Registering Salt Minions</title>
            <step>
                <para>On your minion as root enter the following command:</para>
                <screen><prompt>#</prompt> zypper ar http://FQDN.SUSE.Manager.com/pub/repositories/sle/12/1/bootstrap/ sles12-sp1</screen>
                <para> It is important that you do not use HTTPS as you will receive errors. Use
                    HTTP instead.</para>
            </step>
            <step>
                <para>After adding the repository containing the necessary salt packages
                    execute:</para>
                <screen><prompt>#</prompt> zypper in salt-minion</screen>
            </step>
            <step>
                <para>Modify the minion configuration file to point to the FQDN of the SUSE Manager
                    Server (Master):</para>
                <screen><prompt>#</prompt> vi /etc/salt/minion</screen>
                <para> Find and change the following line </para>
                <screen>master: salt</screen>
                <para> to: </para>
                <screen>master: FQDN.SUSE.Manager.com</screen>
            </step>
            <step>
                <para>Restart the Salt minion with:</para>
                <screen><prompt>#</prompt> systemctl restart salt-minion</screen>
                <para> or on non-systemd OS: </para>
                <screen><prompt>#</prompt> rcsalt-minion restart</screen>
            </step>
        </procedure>

        <para>Your newly registered minion should now show up within the WebUI under <menuchoice>
                <guimenu>Salt</guimenu>
                <guimenu>Onboarding</guimenu>
            </menuchoice>. Accept its key to begin management.</para>
    </sect1>

</chapter>
