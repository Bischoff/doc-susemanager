<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:novdoc-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC
  "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="ch-latest-clients">
 <title>Red Hat Linux Client Applications</title>
 <para>
  In order to use most enterprise-class features of &susemgr;,
  configuration of the latest client applications is required. Obtaining
  these applications before the client has registered with &susemgr; can be
  difficult. This paradox is especially problematic for customers migrating
  large numbers of older systems to &susemgr;. This chapter identifies
  techniques to resolve this dilemma.
 </para>
 <important>
  <title>Latest Updates and Firewalls on Client Systems</title>
  <para>
   We strongly recommended to install the latest system updates on any
   client system connected to &susemgr; or &susemgrproxy; to ensure proper
   connectivity.
  </para>
  <para>
   Additionally, make sure to open ports <literal>80</literal> and
   <literal>443</literal> on the client firewalls for proper functionality
   with &susemgr;.
  </para>
 </important>
 <sect1 id="s1-latest-clients-deploying">
  <title>Deploying the Latest Client RPMs</title><indexterm>

  <primary>client applications</primary>

  <secondary>installation of</secondary></indexterm>

  <para>
   The Package Updater, <command>yum</command>
   (<filename>up2date</filename> on earlier RHEL versions) is a
   prerequisite for using much of &susemgr; enterprise functionality.
   It is crucial to install it on client systems before attempting to
   use &susemgr; Proxy Server or &susemgr; Server in your environment.
  </para>

  <para>
   There are several approaches to accomplish this update of the
   &susemgr; client software. One of them involves storing the RPMs in
   a location that is accessible by all client systems and deploying the
   packages with the simplest command possible.
  </para>
  <para>
   In most cases, a manual deployment of <command>yum</command> and
   <command>pup</command> (<filename>up2date</filename> for earlier
   version of Red Hat Enterprise Linux) does not have to be
   performed. These client tools should have no issues connecting to
   your &susemgr; or Proxy environment. If that is the case, only the
   necessary public keys need to be imported into the RPM database for
   clients to be able to install packages from &susemgr;:
  </para>
  <screen>
   rpm --import http://sumaserver/pub/res.key
   rpm --import http://sumaserver/pub/suse-307E3D54.key
  </screen>
  <para>
   In the following sections we assume that the &quot;out of the
   box&quot; <command>yum</command> and <command>pup</command> (or
   <command>up2date</command>) are not the latest and do not work for
   your environment.<remark role="needinfo">emap: RH dropped all this,
   looks like they don't support RHEL 4 clients anymore. Should we
   also drop this?</remark>
  </para>

  <note>
   <!-- bnc#801971 -->
   <title>Removing Obsolete Tools Such as <command>rhn_register</command></title>
   <para>
    Client systems to be migrated to &susemgr; must no longer use
    <command>rhn_register</command> and similar such client tools.
    During the migration,
    <systemitem>spacewalk-client-tools</systemitem> will remove these
    tools.  If it fails, make sure to remove at least
    <command>rhn_register</command>, <command>rhn-gnome-setup</command>,
    and <command>subscription-manager-firstboot</command>
    manually.
   </para>
   <para>
    If these tools stay installed, it might  not be possible to
    install the &susemgr; client tools packages successfully.
   </para>
  </note>

  <para>
   Remember, only systems running Red Hat Enterprise Linux 5 or 6 must
   have registered with &susemgr; in <command>firstboot</command> after
   installation. Systems running Red Hat Enterprise
   Linux 4 can use the registration functionality built into the Red Hat
   Update Agent.
  </para><remark>emap: is this valid? RHEL 4 clients still supported?</remark>

  <para>
   This document presumes that the customer has installed at least one
   &susemgr; Server or &susemgr; Proxy Server in their network. The
   example below demonstrates a simple approach of deploying
   <filename>yum</filename> and <command>pup</command> (or
   <filename>up2date</filename>) for the first time by an administrator,
   assuming the machines do not already have a working &ncc; setup. The
   administrator populates the
   <filename>/srv/www/htdocs/pub/</filename> directory with a copy of
   the <command>yum</command> and <command>pup</command> (or
   <filename>up2date</filename>) RPMs that client systems need, then deploys these RPMs on the client systems with the <command>rpm -Uvh</command> command. Run on a client, this
   command installs the RPMs to that client, assuming the domain name,
   paths, and RPM versions are correct (replace
   <replaceable>proxy_or_sat.domain</replaceable> with your addresses):
  </para>

<screen>rpm -Uvh \
http://<replaceable>proxy_or_sat.domain</replaceable>.com/pub/rhn-setup-0.4.17-8.el5.i386.rpm \
http://<replaceable>proxy_or_sat.domain</replaceable>.com/pub/yum-3.2.8-9.el5.i386.rpm \
http://<replaceable>proxy_or_sat.domain</replaceable>.com/pub/pirut-1.3.28-13.3l5.noarch.rpm</screen>

  <para>
   Keep in mind that the architecture (in this case,
   <filename>i386</filename>) may need to be altered depending on the
   systems to be served.
  </para>
 </sect1>
 <sect1 id="s1-latest-clients-configuring">
<!--status="rfc"-->

  <title>Configuring the Client Applications</title><indexterm>

  <primary>client applications</primary>

  <secondary>configuration of</secondary></indexterm>

  <para>
   Not every customer has to connect securely to a &susemgr; Server or
   &susemgr; Proxy Server within their organization and not every
   customer needs to build and deploy a GPG key for custom
   packages. These topics are explained in detail later. Every customer
   who uses &susemgr; Server or &susemgr; Proxy Server must reconfigure
   the Red Hat Update Agent (<filename>up2date</filename>) and the
   registration tool to redirect it to their &susemgr; Server or
   &susemgr; Proxy Server.
  </para>

  <important>
   <para>
    Although this is not configurable, note that the port used by the
    up2date agent
    is 80 for HTTP and 443 for secure HTTP (HTTPS). By default,
    <filename>yum</filename> on Red Hat Enterprise Linux 5 uses SSL only.
    For this reason, users should ensure that their firewalls allow
    connections over port 443. To bypass SSL, change the protocol for
    <option>serverURL</option> from <literal>https</literal> to
    <literal>http</literal> in
    <filename>/etc/sysconfig/rhn/up2date</filename>. If using &susemgr;'s
    Monitoring feature and probes requiring the Red Hat Network Monitoring
    <command>rhnmd</command> Daemon, client systems must allow connections
    on port 4545 (or port 22, if using <filename>sshd</filename> instead).
   </para>
  </important>

  <para>
   By default, client systems
   refer to the main &suse; Servers. Users must reconfigure client
   systems to refer to their &susemgr; Server or &susemgr; Proxy Server.
  </para>

  <para>
   The latest versions of the Red Hat Update Agent can be configured to
   accommodate several &susemgr; Servers, thereby providing failover
   protection in case the primary server is inaccessible. Refer to
   <xref linkend="s2-client-config-failover"/> for instructions on enabling
   this feature.
  </para>

  <para>
   The next sections describe three methods of configuring the client
   systems to access your &susemgr; Server or &susemgr; Proxy Server: using
   an Activation Key, <command>up2date --configure</command>, and manually updating the configuration files. To
   see how reconfiguration can be scripted, refer to
   <xref linkend="ch-scripting"/>.
  </para>

  <sect2 id="s2-client-config-keys">
   <title>Registering with Activation Keys</title><indexterm>
   <primary>activation keys</primary>
   <secondary>registering with</secondary></indexterm>
   <para>
    SUSE recommends using activation keys for registering and configuring
    client systems that access &susemgr; Proxy Server or &susemgr; Server.
    Activation keys can be used to register, entitle, and subscribe systems
    in a batch. Refer to <xref linkend="s2-sm-systems-activation-keys"/> for more
    information on activation keys.
   </para>
   <para>
    Registering with an activation key has four basic steps:
   </para>
   <orderedlist>
    <listitem>
     <para>
      Generate an activation key.
     </para>
    </listitem>
    <listitem>
     <para>
      Import custom GPG keys.
     </para>
    </listitem>
    <listitem>
     <para>
      Download and install the SSL Certificate RPM from the
      <filename>/pub/</filename> directory of the &susemgr; Proxy Server or
      &susemgr; Server. The command for this step looks similar to this:
     </para>
<screen>rpm -Uvh \
http://<replaceable>your-suse_manager-FQDN</replaceable>/pub/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm</screen>
    </listitem>
    <listitem>
     <para>
      Register the system with your &susemgr; Proxy Server or &susemgr;
      Server. The command for this step looks something like:
     </para>
<screen>rhnreg_ks --activationkey mykey \
--serverUrl https://your-suse_manager-FQDN/XMLRPC</screen>
    </listitem> 
   </orderedlist>
   <para>
    Alternatively, most of the above steps can be combined in a shell script
    that includes the following lines. This command has been split into
    multiple lines for print and PDF purposes but should be typed as one
    line at a shell prompt:
   </para>
   <screen>
    wget -0 - http://your-suse_manager-FQDN/pub/bootstrap.sh | bash
    &amp;&amp; rhnreg_ks --activation-key my_key --serverUrl
    https://susemanager.example.com/XMLRPC
   </screen>
   <note>
    <para>
     This command has been split into multiple lines for layout
     purposes but should be typed as one line at a shell prompt.
    </para>
   </note>
   <para>
    The bootstrap script, generated at installation and available for
    both &susemgr; Server and &susemgr; Proxy Server, is such a
    script. The script and the <command>mgr-bootstrap</command> that
    generates it are discussed in detail in <xref
    linkend="ch-bootstrap"/>.
   </para>
  </sect2>

  <sect2 id="s2-client-config-option">
   <title>The up2date --configure Option</title><indexterm>
   <primary>--configure</primary>
   <secondary>use of</secondary></indexterm><indexterm>
   <primary>client applications</primary>
   <secondary>Red Hat Update Agent</secondary></indexterm>
   <para>
    The Red Hat Update Agent in Red Hat Enterprise Linux 4 provides an
    interface for configuring various settings. For full listings of
    these settings, refer to the <command>up2date</command> manual page
    (<command>man up2date</command> at a command line).
   </para>
   <para>
    To reconfigure the Red Hat Update Agent, issue the following command as
    root:
   </para>
<screen>up2date --configure</screen>
   <para>
    You are presented with a dialog box offering various settings that may
    be reconfigured. In the <guimenu>General</guimenu> tab, under
    <literal>Select a &susemgr; Server to use</literal> replace the default
    value with the fully qualified domain name (FQDN) of the &susemgr;
    Server or &susemgr; Proxy Server, such as
    <literal>https://your_proxy_or_susemgr.your_domain.com/XMLRPC</literal>.
    Retain the <literal>/XMLRPC</literal> at the end. When finished, click
    <guimenu>OK</guimenu>.
   </para>
   <figure>
    <title>Red Hat Update Agent GUI Configuration</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="up2date-config.png" width="90%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="up2date-config.png" width="444"/>
     </imageobject>
<!--Red Hat Update Agent GUI configuration-->
    </mediaobject>
   </figure>
   <para>
    Make sure you enter the domain name of your &susemgr; Server or
    &susemgr; Proxy Server correctly. Entering an incorrect domain or
    leaving the field blank may prevent <command>up2date --configure</command> from launching. This may be resolved, however, by
    editing the value in the <filename>up2date</filename> configuration file. Refer to
    <xref linkend="s2-client-config-file"/> for precise instructions.
   </para>
   <warning>
    <para>
     Systems running Red Hat Enterprise Linux 4 have registration
     functionality built into the Red Hat Update Agent and therefore do
     not install the Red Hat Network Registration Client. Systems on Red
     Hat Enterprise Linux 5 or 6 do not use <command>up2date</command>,
     and need <command>rhnreg_ks</command> to register their systems with
     &susemgr; and <command>yum</command> and <command>pup</command> to
     update their packages.
    </para>
   </warning>
  </sect2>

  <sect2 id="s2-client-config-file">
   <title>Updating the Configuration Files Manually</title><indexterm>
   <primary>client applications</primary>
   <secondary>manual</secondary></indexterm><indexterm>
   <primary>Alert Notification Tool</primary>
   <secondary>configuring to use &susemgr; Proxy Server or &susemgr; Server</secondary></indexterm>
   <para>
    As an alternative to the GUI interface described in the previous
    section, users may also reconfigure the Red Hat Update Agent by editing
    the application's configuration file.
   </para>
   <para>
    To configure Red Hat Update Agent on the client systems connecting to
    the &susemgr; Proxy Server or &susemgr; Server, edit the values of the
    <command>serverURL</command> and <command>noSSLServerURL</command>
    settings in the <filename>/etc/sysconfig/rhn/up2date</filename>
    configuration file (as &rootuser;). Replace the default URL with the
    fully qualified domain name (FQDN) for the &susemgr; Proxy Server or
    &susemgr; Server. For example:
   </para>
<screen>serverURL[comment]=Remote server URL
serverURL=https://your_primary.your_domain.com/XMLRPC

noSSLServerURL[comment]=Remote server URL without SSL
noSSLServerURL=http://your_primary.your_domain.com/XMLRPC</screen>
   <warning>
    <para>
     The <filename>httpProxy</filename> setting in
     <filename>/etc/sysconfig/rhn/up2date</filename> does
     <emphasis>not</emphasis> refer to the &susemgr; Proxy Server. It is
     used to configure an optional HTTP proxy for the client. With an
     &susemgr; Proxy Server in place, leave the
     <filename>httpProxy</filename> blank.
    </para>
   </warning>
  </sect2>

  <sect2 id="s2-client-config-failover">
   <title>Implementing Server Failover</title><indexterm>
   <primary>client applications</primary>
   <secondary>server failover</secondary></indexterm>
   <para>
    Ensure that you are running Red Hat Enterprise Linux 5 or 6. I your still using &rhel;&nbs;4 or3 systems, make sure you have the latest version of <command>up2date</command> installed. Then manually add the secondary servers to the
    <command>serverURL</command> and <command>noSSLServerURL</command>
    settings in the <filename>/etc/sysconfig/rhn/up2date</filename>
    configuration file (as &rootuser;). Add the fully qualified domain names
    (FQDN) for the Proxy or &susemgr; immediately after the primary server,
    separated by a semicolon (;). For example:
   </para>
<screen>serverURL[comment]=Remote server URL
serverURL=https://your_primary.your_domain.com/XMLRPC; 
https://your_secondary.your_domain.com/XMLRPC;

noSSLServerURL[comment]=Remote server URL without SSL
noSSLServerURL=http://your_primary.your_domain.com/XMLRPC; 
https://your_secondary.your_domain.com/XMLRPC;</screen>
   <para>
    Connection to the servers is attempted in the order provided here. You
    can include as many servers as you wish. You may list the central
    &suse; Servers, as well. This makes sense, however, only if the
    client systems can reach the Internet.
   </para>
  </sect2>
 </sect1>
 <sect1 id="s1-latest-clients-puplet">
  <title>The Package Updater Applet</title>

  <para>
   Red Hat Enterprise Linux 5 and 6 features a running program on the graphical
   desktop panel that periodically checks for updates from &susemgr; server
   and will alert users when a new update is available.
  </para>

  <figure>
   <title>Package Updater Applet</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="puplet.png" width="70%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="puplet.png" width="75%"/>
    </imageobject>
<!--Package updater applet-->
   </mediaobject>
  </figure>

  <para>
   The Package Updater Applet stays in the notification tray of the desktop
   panel and checks for new updates periodically. The applet also allows you
   to perform a few package maintenance tasks from the applet by clicking
   the notification icon and choosing from the following actions:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Refresh: check &susemgr; for new updates.
    </para>
   </listitem>
   <listitem>
    <para>
     View Updates: launch the Package Updater application so you can see
     any available updates in more detail and configure the updates
     according to your needs.
    </para>
   </listitem>
   <listitem>
    <para>
     Apply Updates: download and install all updated packages.
    </para>
   </listitem>
   <listitem>
    <para>
     Quit: close the applet.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <!-- Obsolete according to bnc#722036 -->
 <!-- <sect1 id="s1-latest-clients-applet"> -->
 <!--status="rfc"-->
 <sect1 id="s1-latest-clients-sw-failure-rep">
  <title>Reporting Software Failures</title><indexterm>
  <primary>client applications</primary>
  <secondary>software failure reports</secondary></indexterm>
  <para>
   You can take advantage of software failure reporting capabilities
   and the Automatic Bug Reporting Tool (ABRT) on to extend the
   overall reporting functionality of your Red Hat client
   systems. This extended functionality allows clients to
   automatically report software failures captured by ABRT to
   &susemgr; and to process the captured failures in a centralized
   fashion. You can use either the Web Interface or the API to process
   these failure reports.
  </para>
  <sect2 id="s2-latest-clients-sw-fail-rep-tools">
  <title>Installing Software Failure Reporting Tools</title>
  <para>
   To install tools for ABRT on Red Hat clients, log in to your client system as user &rootuser; and install the spacewalk-abrt package on your client systems. This package installs the abrt package as a dependency:
  </para>
  <screen>
   yum install spacewalk-abrt
  </screen>
  <note>
   <para>
    Neither the abrt nor spacewalk-abrt packages are available for Red
    Hat Enterprise Linux 5 and earlier versions.
   </para>
  </note>
  </sect2>
  <sect2 id="s2-latest-clients-sw-fail-rep-use">
  <title>Using Software Failure Reporting Tools</title>
  <para>
   The spacewalk-abrt package has two important components: 
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The configuration file for ABRT: <filename>/etc/libreport/events.d/spacewalk.conf</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     The spacewalk-abrt utility: <command>/usr/bin/spacewalk-abrt</command>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The configuration file instructs the <systemitem>abrt</systemitem>
   daemon to use the <command>/usr/bin/spacewalk-abrt</command>
   utility to automatically report every software failure that occurs
   on the system to your &susemgr; server. This is a fully automated
   process and usually does not require human intervention.
  </para>
  <para>
   Use the &susemgr; Web Interface to view software failure reports from clients. For more information, refer to the User Guide <xref linkend="s5-sm-system-details-sw-crashes"/>.
  </para>
  </sect2>
  <sect2 id="s2-latest-clients-sw-fail-rep-manual">
  <title>Manually Reporting Software Failures</title>
  <para>
   Use the <command>spacewalk-abrt</command> utility to manually report software failures to &susemgr; server. Perform the following steps:
  </para>
   <procedure id="optional-id">
    <title>To manually report software failures:</title>
   <step>
    <para>
     Use the <command>abrt-cli list</command> parameter to display a list of existing failure reports.
    </para>
    <screen>
# abrt-cli list

@0
Directory: /var/tmp/abrt/ccpp-2013-02-28-15:48:50-8820
count: 2
executable: /usr/bin/python2.7
package: python-2.7.3-13.fc16
time: Thu 28 Feb 2013 03:48:50 PM CET
uid: 0

@1
Directory: /var/tmp/abrt/oops-2013-02-27-14:16:03-8107-1
count: 3
package: kernel
time: Wed 27 Feb 2013 02:16:03 PM CET
    </screen>
   </step>
   <step>
    <para>
     After you have identified the failure that you want to report,
     use the <command>--report</command> option to send the report to
     the &susemgr; server.
    </para>
<screen>
# spacewalk-abrt --report /var/tmp/abrt/ccpp-2013-02-28-15:48:50-8820
</screen>
   </step>
   <step>
    <para>
     To manually report all of the software failures that have
     occurred on your system, use the <command>--sync</command>
     option:
    </para>
    <screen>
     # spacewalk-abrt --sync
    </screen>
   </step>
  </procedure>

  </sect2>
  <sect2 id="s2-latest-clients-sw-fail-rep-testing">
  <title>Creating Software Failures for Testing</title>
  <para>
   You can force a software failure in order to verify that your
   reporting configuration is working properly. The following example
   demonstrates using the <command>kill</command> command to send a
   <systemitem>signal 11</systemitem> argument (segmentation fault) to
   an example process:
  </para>
<screen>
# abrt-cli list
# sleep 600 &amp;
[1] 17564
# kill -11 17564
#
[1]+  Segmentation fault      (core dumped) sleep 600
#
# abrt-cli list
@0
Directory:      /var/spool/abrt/ccpp-2013-05-14-04:56:17-17564
count:          1
executable:     /bin/sleep
package:        coreutils-8.4-19.el6
time:           Tue 14 May 2013 04:56:17 EDT
uid:            0
#
</screen>
  </sect2>
 </sect1>
</chapter>
